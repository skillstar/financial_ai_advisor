(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@antv/l7')) :
  typeof define === 'function' && define.amd ? define(['exports', '@antv/l7'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.L7 = global.L7 || {}, global.L7.Draw = {}), global.L7));
}(this, (function (exports, l7) { 'use strict';

  /**
   * 鼠标指针默认值
   */
  var DEFAULT_CURSOR_MAP = {
    draw: 'crosshair',
    pointHover: 'pointer',
    pointDrag: 'move',
    lineHover: 'pointer',
    lineDrag: 'move',
    polygonHover: 'pointer',
    polygonDrag: 'move'
  };
  var DEFAULT_SOURCE_DATA = {
    point: [],
    line: [],
    polygon: [],
    midPoint: [],
    dashLine: [],
    text: []
  };

  var global$1 = (typeof global !== "undefined" ? global :
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window : {});

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance$1 = global$1.performance || {};
  var performanceNow =
    performance$1.now        ||
    performance$1.mozNow     ||
    performance$1.msNow      ||
    performance$1.oNow       ||
    performance$1.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance$1)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var browser$1 = {
    nextTick: nextTick,
    title: title,
    browser: browser,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;

    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }

    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }

    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }

    var _ref = isElement(element) ? getWindow(element) : window,
        visualViewport = _ref.visualViewport;

    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;

        do {
          if (next && parent.isSameNode(next)) {
            return true;
          } // $FlowFixMe[prop-missing]: need a better way to handle this...


          next = next.parentNode || next.host;
        } while (next);
      } // Give up, the result is false


    return false;
  }

  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x,
        y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }, getWindow(popper)) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect$2(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect$2,
    data: {}
  };

  var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash[matched];
    });
  }

  var hash$1 = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash$1[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();

      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$strategy = _options.strategy,
        strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref) {
          var name = _ref.name,
              _ref$options = _ref.options,
              options = _ref$options === void 0 ? {} : _ref$options,
              effect = _ref.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  var BOX_CLASS = "tippy-box";
  var CONTENT_CLASS = "tippy-content";
  var BACKDROP_CLASS = "tippy-backdrop";
  var ARROW_CLASS = "tippy-arrow";
  var SVG_ARROW_CLASS = "tippy-svg-arrow";
  var TOUCH_OPTIONS = {
    passive: true,
    capture: true
  };
  var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO() {
    return document.body;
  };

  function hasOwnProperty(obj, key) {
    return {}.hasOwnProperty.call(obj, key);
  }
  function getValueAtIndexOrReturn(value, index, defaultValue) {
    if (Array.isArray(value)) {
      var v = value[index];
      return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
    }

    return value;
  }
  function isType(value, type) {
    var str = {}.toString.call(value);
    return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
  }
  function invokeWithArgsOrReturn(value, args) {
    return typeof value === 'function' ? value.apply(void 0, args) : value;
  }
  function debounce$1(fn, ms) {
    // Avoid wrapping in `setTimeout` if ms is 0 anyway
    if (ms === 0) {
      return fn;
    }

    var timeout;
    return function (arg) {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        fn(arg);
      }, ms);
    };
  }
  function removeProperties(obj, keys) {
    var clone = Object.assign({}, obj);
    keys.forEach(function (key) {
      delete clone[key];
    });
    return clone;
  }
  function splitBySpaces(value) {
    return value.split(/\s+/).filter(Boolean);
  }
  function normalizeToArray(value) {
    return [].concat(value);
  }
  function pushIfUnique(arr, value) {
    if (arr.indexOf(value) === -1) {
      arr.push(value);
    }
  }
  function unique(arr) {
    return arr.filter(function (item, index) {
      return arr.indexOf(item) === index;
    });
  }
  function getBasePlacement$1(placement) {
    return placement.split('-')[0];
  }
  function arrayFrom(value) {
    return [].slice.call(value);
  }
  function removeUndefinedProps(obj) {
    return Object.keys(obj).reduce(function (acc, key) {
      if (obj[key] !== undefined) {
        acc[key] = obj[key];
      }

      return acc;
    }, {});
  }

  function div() {
    return document.createElement('div');
  }
  function isElement$1(value) {
    return ['Element', 'Fragment'].some(function (type) {
      return isType(value, type);
    });
  }
  function isNodeList(value) {
    return isType(value, 'NodeList');
  }
  function isMouseEvent(value) {
    return isType(value, 'MouseEvent');
  }
  function isReferenceElement(value) {
    return !!(value && value._tippy && value._tippy.reference === value);
  }
  function getArrayOfElements(value) {
    if (isElement$1(value)) {
      return [value];
    }

    if (isNodeList(value)) {
      return arrayFrom(value);
    }

    if (Array.isArray(value)) {
      return value;
    }

    return arrayFrom(document.querySelectorAll(value));
  }
  function setTransitionDuration(els, value) {
    els.forEach(function (el) {
      if (el) {
        el.style.transitionDuration = value + "ms";
      }
    });
  }
  function setVisibilityState(els, state) {
    els.forEach(function (el) {
      if (el) {
        el.setAttribute('data-state', state);
      }
    });
  }
  function getOwnerDocument(elementOrElements) {
    var _element$ownerDocumen;

    var _normalizeToArray = normalizeToArray(elementOrElements),
        element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body


    return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;
  }
  function isCursorOutsideInteractiveBorder(popperTreeData, event) {
    var clientX = event.clientX,
        clientY = event.clientY;
    return popperTreeData.every(function (_ref) {
      var popperRect = _ref.popperRect,
          popperState = _ref.popperState,
          props = _ref.props;
      var interactiveBorder = props.interactiveBorder;
      var basePlacement = getBasePlacement$1(popperState.placement);
      var offsetData = popperState.modifiersData.offset;

      if (!offsetData) {
        return true;
      }

      var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;
      var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;
      var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;
      var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;
      var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
      var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
      var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
      var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
      return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
    });
  }
  function updateTransitionEndListener(box, action, listener) {
    var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
    // `webkitTransitionEnd`...

    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      box[method](event, listener);
    });
  }
  /**
   * Compared to xxx.contains, this function works for dom structures with shadow
   * dom
   */

  function actualContains(parent, child) {
    var target = child;

    while (target) {
      var _target$getRootNode;

      if (parent.contains(target)) {
        return true;
      }

      target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;
    }

    return false;
  }

  var currentInput = {
    isTouch: false
  };
  var lastMouseMoveTime = 0;
  /**
   * When a `touchstart` event is fired, it's assumed the user is using touch
   * input. We'll bind a `mousemove` event listener to listen for mouse input in
   * the future. This way, the `isTouch` property is fully dynamic and will handle
   * hybrid devices that use a mix of touch + mouse input.
   */

  function onDocumentTouchStart() {
    if (currentInput.isTouch) {
      return;
    }

    currentInput.isTouch = true;

    if (window.performance) {
      document.addEventListener('mousemove', onDocumentMouseMove);
    }
  }
  /**
   * When two `mousemove` event are fired consecutively within 20ms, it's assumed
   * the user is using mouse input again. `mousemove` can fire on touch devices as
   * well, but very rarely that quickly.
   */

  function onDocumentMouseMove() {
    var now = performance.now();

    if (now - lastMouseMoveTime < 20) {
      currentInput.isTouch = false;
      document.removeEventListener('mousemove', onDocumentMouseMove);
    }

    lastMouseMoveTime = now;
  }
  /**
   * When an element is in focus and has a tippy, leaving the tab/window and
   * returning causes it to show again. For mouse users this is unexpected, but
   * for keyboard use it makes sense.
   * TODO: find a better technique to solve this problem
   */

  function onWindowBlur() {
    var activeElement = document.activeElement;

    if (isReferenceElement(activeElement)) {
      var instance = activeElement._tippy;

      if (activeElement.blur && !instance.state.isVisible) {
        activeElement.blur();
      }
    }
  }
  function bindGlobalEventListeners() {
    document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);
    window.addEventListener('blur', onWindowBlur);
  }

  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
  var isIE11 = isBrowser ? // @ts-ignore
  !!window.msCrypto : false;

  function createMemoryLeakWarning(method) {
    var txt = method === 'destroy' ? 'n already-' : ' ';
    return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", 'indicates a potential memory leak.'].join(' ');
  }
  function clean(value) {
    var spacesAndTabs = /[ \t]{2,}/g;
    var lineStartWithSpaces = /^[ \t]*/gm;
    return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
  }

  function getDevMessage(message) {
    return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\uD83D\uDC77\u200D This is a development-only message. It will be removed in production.\n  ");
  }

  function getFormattedMessage(message) {
    return [getDevMessage(message), // title
    'color: #00C584; font-size: 1.3em; font-weight: bold;', // message
    'line-height: 1.5', // footer
    'color: #a6a095;'];
  } // Assume warnings and errors never have the same message

  var visitedMessages;

  {
    resetVisitedMessages();
  }

  function resetVisitedMessages() {
    visitedMessages = new Set();
  }
  function warnWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console;

      visitedMessages.add(message);

      (_console = console).warn.apply(_console, getFormattedMessage(message));
    }
  }
  function errorWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
      var _console2;

      visitedMessages.add(message);

      (_console2 = console).error.apply(_console2, getFormattedMessage(message));
    }
  }
  function validateTargets(targets) {
    var didPassFalsyValue = !targets;
    var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;
    errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element,', 'Element[], or NodeList.'].join(' '));
    errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is not supported as an argument', 'for virtual positioning. Use props.getReferenceClientRect instead.'].join(' '));
  }

  var pluginProps = {
    animateFill: false,
    followCursor: false,
    inlinePositioning: false,
    sticky: false
  };
  var renderProps = {
    allowHTML: false,
    animation: 'fade',
    arrow: true,
    content: '',
    inertia: false,
    maxWidth: 350,
    role: 'tooltip',
    theme: '',
    zIndex: 9999
  };
  var defaultProps = Object.assign({
    appendTo: TIPPY_DEFAULT_APPEND_TO,
    aria: {
      content: 'auto',
      expanded: 'auto'
    },
    delay: 0,
    duration: [300, 250],
    getReferenceClientRect: null,
    hideOnClick: true,
    ignoreAttributes: false,
    interactive: false,
    interactiveBorder: 2,
    interactiveDebounce: 0,
    moveTransition: '',
    offset: [0, 10],
    onAfterUpdate: function onAfterUpdate() {},
    onBeforeUpdate: function onBeforeUpdate() {},
    onCreate: function onCreate() {},
    onDestroy: function onDestroy() {},
    onHidden: function onHidden() {},
    onHide: function onHide() {},
    onMount: function onMount() {},
    onShow: function onShow() {},
    onShown: function onShown() {},
    onTrigger: function onTrigger() {},
    onUntrigger: function onUntrigger() {},
    onClickOutside: function onClickOutside() {},
    placement: 'top',
    plugins: [],
    popperOptions: {},
    render: null,
    showOnCreate: false,
    touch: true,
    trigger: 'mouseenter focus',
    triggerTarget: null
  }, pluginProps, renderProps);
  var defaultKeys = Object.keys(defaultProps);
  var setDefaultProps = function setDefaultProps(partialProps) {
    /* istanbul ignore else */
    {
      validateProps(partialProps, []);
    }

    var keys = Object.keys(partialProps);
    keys.forEach(function (key) {
      defaultProps[key] = partialProps[key];
    });
  };
  function getExtendedPassedProps(passedProps) {
    var plugins = passedProps.plugins || [];
    var pluginProps = plugins.reduce(function (acc, plugin) {
      var name = plugin.name,
          defaultValue = plugin.defaultValue;

      if (name) {
        var _name;

        acc[name] = passedProps[name] !== undefined ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;
      }

      return acc;
    }, {});
    return Object.assign({}, passedProps, pluginProps);
  }
  function getDataAttributeProps(reference, plugins) {
    var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
      plugins: plugins
    }))) : defaultKeys;
    var props = propKeys.reduce(function (acc, key) {
      var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();

      if (!valueAsString) {
        return acc;
      }

      if (key === 'content') {
        acc[key] = valueAsString;
      } else {
        try {
          acc[key] = JSON.parse(valueAsString);
        } catch (e) {
          acc[key] = valueAsString;
        }
      }

      return acc;
    }, {});
    return props;
  }
  function evaluateProps(reference, props) {
    var out = Object.assign({}, props, {
      content: invokeWithArgsOrReturn(props.content, [reference])
    }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
    out.aria = Object.assign({}, defaultProps.aria, out.aria);
    out.aria = {
      expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,
      content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content
    };
    return out;
  }
  function validateProps(partialProps, plugins) {
    if (partialProps === void 0) {
      partialProps = {};
    }

    if (plugins === void 0) {
      plugins = [];
    }

    var keys = Object.keys(partialProps);
    keys.forEach(function (prop) {
      var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
      var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`

      if (didPassUnknownProp) {
        didPassUnknownProp = plugins.filter(function (plugin) {
          return plugin.name === prop;
        }).length === 0;
      }

      warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", 'a plugin, forgot to pass it in an array as props.plugins.', '\n\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' '));
    });
  }

  var innerHTML = function innerHTML() {
    return 'innerHTML';
  };

  function dangerouslySetInnerHTML(element, html) {
    element[innerHTML()] = html;
  }

  function createArrowElement(value) {
    var arrow = div();

    if (value === true) {
      arrow.className = ARROW_CLASS;
    } else {
      arrow.className = SVG_ARROW_CLASS;

      if (isElement$1(value)) {
        arrow.appendChild(value);
      } else {
        dangerouslySetInnerHTML(arrow, value);
      }
    }

    return arrow;
  }

  function setContent(content, props) {
    if (isElement$1(props.content)) {
      dangerouslySetInnerHTML(content, '');
      content.appendChild(props.content);
    } else if (typeof props.content !== 'function') {
      if (props.allowHTML) {
        dangerouslySetInnerHTML(content, props.content);
      } else {
        content.textContent = props.content;
      }
    }
  }
  function getChildren(popper) {
    var box = popper.firstElementChild;
    var boxChildren = arrayFrom(box.children);
    return {
      box: box,
      content: boxChildren.find(function (node) {
        return node.classList.contains(CONTENT_CLASS);
      }),
      arrow: boxChildren.find(function (node) {
        return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
      }),
      backdrop: boxChildren.find(function (node) {
        return node.classList.contains(BACKDROP_CLASS);
      })
    };
  }
  function render(instance) {
    var popper = div();
    var box = div();
    box.className = BOX_CLASS;
    box.setAttribute('data-state', 'hidden');
    box.setAttribute('tabindex', '-1');
    var content = div();
    content.className = CONTENT_CLASS;
    content.setAttribute('data-state', 'hidden');
    setContent(content, instance.props);
    popper.appendChild(box);
    box.appendChild(content);
    onUpdate(instance.props, instance.props);

    function onUpdate(prevProps, nextProps) {
      var _getChildren = getChildren(popper),
          box = _getChildren.box,
          content = _getChildren.content,
          arrow = _getChildren.arrow;

      if (nextProps.theme) {
        box.setAttribute('data-theme', nextProps.theme);
      } else {
        box.removeAttribute('data-theme');
      }

      if (typeof nextProps.animation === 'string') {
        box.setAttribute('data-animation', nextProps.animation);
      } else {
        box.removeAttribute('data-animation');
      }

      if (nextProps.inertia) {
        box.setAttribute('data-inertia', '');
      } else {
        box.removeAttribute('data-inertia');
      }

      box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + "px" : nextProps.maxWidth;

      if (nextProps.role) {
        box.setAttribute('role', nextProps.role);
      } else {
        box.removeAttribute('role');
      }

      if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
        setContent(content, instance.props);
      }

      if (nextProps.arrow) {
        if (!arrow) {
          box.appendChild(createArrowElement(nextProps.arrow));
        } else if (prevProps.arrow !== nextProps.arrow) {
          box.removeChild(arrow);
          box.appendChild(createArrowElement(nextProps.arrow));
        }
      } else if (arrow) {
        box.removeChild(arrow);
      }
    }

    return {
      popper: popper,
      onUpdate: onUpdate
    };
  } // Runtime check to identify if the render function is the default one; this
  // way we can apply default CSS transitions logic and it can be tree-shaken away

  render.$$tippy = true;

  var idCounter = 1;
  var mouseMoveListeners = []; // Used by `hideAll()`

  var mountedInstances = [];
  function createTippy(reference, passedProps) {
    var props = evaluateProps(reference, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================
    // 🔒 Private members
    // ===========================================================================

    var showTimeout;
    var hideTimeout;
    var scheduleHideAnimationFrame;
    var isVisibleFromClick = false;
    var didHideDueToDocumentMouseDown = false;
    var didTouchMove = false;
    var ignoreOnFirstUpdate = false;
    var lastTriggerEvent;
    var currentTransitionEndListener;
    var onFirstUpdate;
    var listeners = [];
    var debouncedOnMouseMove = debounce$1(onMouseMove, props.interactiveDebounce);
    var currentTarget; // ===========================================================================
    // 🔑 Public members
    // ===========================================================================

    var id = idCounter++;
    var popperInstance = null;
    var plugins = unique(props.plugins);
    var state = {
      // Is the instance currently enabled?
      isEnabled: true,
      // Is the tippy currently showing and not transitioning out?
      isVisible: false,
      // Has the instance been destroyed?
      isDestroyed: false,
      // Is the tippy currently mounted to the DOM?
      isMounted: false,
      // Has the tippy finished transitioning in?
      isShown: false
    };
    var instance = {
      // properties
      id: id,
      reference: reference,
      popper: div(),
      popperInstance: popperInstance,
      props: props,
      state: state,
      plugins: plugins,
      // methods
      clearDelayTimeouts: clearDelayTimeouts,
      setProps: setProps,
      setContent: setContent,
      show: show,
      hide: hide,
      hideWithInteractivity: hideWithInteractivity,
      enable: enable,
      disable: disable,
      unmount: unmount,
      destroy: destroy
    }; // TODO: Investigate why this early return causes a TDZ error in the tests —
    // it doesn't seem to happen in the browser

    /* istanbul ignore if */

    if (!props.render) {
      {
        errorWhen(true, 'render() function has not been supplied.');
      }

      return instance;
    } // ===========================================================================
    // Initial mutations
    // ===========================================================================


    var _props$render = props.render(instance),
        popper = _props$render.popper,
        onUpdate = _props$render.onUpdate;

    popper.setAttribute('data-tippy-root', '');
    popper.id = "tippy-" + instance.id;
    instance.popper = popper;
    reference._tippy = instance;
    popper._tippy = instance;
    var pluginsHooks = plugins.map(function (plugin) {
      return plugin.fn(instance);
    });
    var hasAriaExpanded = reference.hasAttribute('aria-expanded');
    addListeners();
    handleAriaExpandedAttribute();
    handleStyles();
    invokeHook('onCreate', [instance]);

    if (props.showOnCreate) {
      scheduleShow();
    } // Prevent a tippy with a delay from hiding if the cursor left then returned
    // before it started hiding


    popper.addEventListener('mouseenter', function () {
      if (instance.props.interactive && instance.state.isVisible) {
        instance.clearDelayTimeouts();
      }
    });
    popper.addEventListener('mouseleave', function () {
      if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {
        getDocument().addEventListener('mousemove', debouncedOnMouseMove);
      }
    });
    return instance; // ===========================================================================
    // 🔒 Private methods
    // ===========================================================================

    function getNormalizedTouchSettings() {
      var touch = instance.props.touch;
      return Array.isArray(touch) ? touch : [touch, 0];
    }

    function getIsCustomTouchBehavior() {
      return getNormalizedTouchSettings()[0] === 'hold';
    }

    function getIsDefaultRenderFn() {
      var _instance$props$rende;

      // @ts-ignore
      return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);
    }

    function getCurrentTarget() {
      return currentTarget || reference;
    }

    function getDocument() {
      var parent = getCurrentTarget().parentNode;
      return parent ? getOwnerDocument(parent) : document;
    }

    function getDefaultTemplateChildren() {
      return getChildren(popper);
    }

    function getDelay(isShow) {
      // For touch or keyboard input, force `0` delay for UX reasons
      // Also if the instance is mounted but not visible (transitioning out),
      // ignore delay
      if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {
        return 0;
      }

      return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
    }

    function handleStyles(fromHide) {
      if (fromHide === void 0) {
        fromHide = false;
      }

      popper.style.pointerEvents = instance.props.interactive && !fromHide ? '' : 'none';
      popper.style.zIndex = "" + instance.props.zIndex;
    }

    function invokeHook(hook, args, shouldInvokePropsHook) {
      if (shouldInvokePropsHook === void 0) {
        shouldInvokePropsHook = true;
      }

      pluginsHooks.forEach(function (pluginHooks) {
        if (pluginHooks[hook]) {
          pluginHooks[hook].apply(pluginHooks, args);
        }
      });

      if (shouldInvokePropsHook) {
        var _instance$props;

        (_instance$props = instance.props)[hook].apply(_instance$props, args);
      }
    }

    function handleAriaContentAttribute() {
      var aria = instance.props.aria;

      if (!aria.content) {
        return;
      }

      var attr = "aria-" + aria.content;
      var id = popper.id;
      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        var currentValue = node.getAttribute(attr);

        if (instance.state.isVisible) {
          node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
        } else {
          var nextValue = currentValue && currentValue.replace(id, '').trim();

          if (nextValue) {
            node.setAttribute(attr, nextValue);
          } else {
            node.removeAttribute(attr);
          }
        }
      });
    }

    function handleAriaExpandedAttribute() {
      if (hasAriaExpanded || !instance.props.aria.expanded) {
        return;
      }

      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        if (instance.props.interactive) {
          node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
        } else {
          node.removeAttribute('aria-expanded');
        }
      });
    }

    function cleanupInteractiveMouseListeners() {
      getDocument().removeEventListener('mousemove', debouncedOnMouseMove);
      mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
        return listener !== debouncedOnMouseMove;
      });
    }

    function onDocumentPress(event) {
      // Moved finger to scroll instead of an intentional tap outside
      if (currentInput.isTouch) {
        if (didTouchMove || event.type === 'mousedown') {
          return;
        }
      }

      var actualTarget = event.composedPath && event.composedPath()[0] || event.target; // Clicked on interactive popper

      if (instance.props.interactive && actualContains(popper, actualTarget)) {
        return;
      } // Clicked on the event listeners target


      if (normalizeToArray(instance.props.triggerTarget || reference).some(function (el) {
        return actualContains(el, actualTarget);
      })) {
        if (currentInput.isTouch) {
          return;
        }

        if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {
          return;
        }
      } else {
        invokeHook('onClickOutside', [instance, event]);
      }

      if (instance.props.hideOnClick === true) {
        instance.clearDelayTimeouts();
        instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
        // currentTarget. This lets a tippy with `focus` trigger know that it
        // should not show

        didHideDueToDocumentMouseDown = true;
        setTimeout(function () {
          didHideDueToDocumentMouseDown = false;
        }); // The listener gets added in `scheduleShow()`, but this may be hiding it
        // before it shows, and hide()'s early bail-out behavior can prevent it
        // from being cleaned up

        if (!instance.state.isMounted) {
          removeDocumentPress();
        }
      }
    }

    function onTouchMove() {
      didTouchMove = true;
    }

    function onTouchStart() {
      didTouchMove = false;
    }

    function addDocumentPress() {
      var doc = getDocument();
      doc.addEventListener('mousedown', onDocumentPress, true);
      doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
      doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
      doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }

    function removeDocumentPress() {
      var doc = getDocument();
      doc.removeEventListener('mousedown', onDocumentPress, true);
      doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
      doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
      doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }

    function onTransitionedOut(duration, callback) {
      onTransitionEnd(duration, function () {
        if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
          callback();
        }
      });
    }

    function onTransitionedIn(duration, callback) {
      onTransitionEnd(duration, callback);
    }

    function onTransitionEnd(duration, callback) {
      var box = getDefaultTemplateChildren().box;

      function listener(event) {
        if (event.target === box) {
          updateTransitionEndListener(box, 'remove', listener);
          callback();
        }
      } // Make callback synchronous if duration is 0
      // `transitionend` won't fire otherwise


      if (duration === 0) {
        return callback();
      }

      updateTransitionEndListener(box, 'remove', currentTransitionEndListener);
      updateTransitionEndListener(box, 'add', listener);
      currentTransitionEndListener = listener;
    }

    function on(eventType, handler, options) {
      if (options === void 0) {
        options = false;
      }

      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        node.addEventListener(eventType, handler, options);
        listeners.push({
          node: node,
          eventType: eventType,
          handler: handler,
          options: options
        });
      });
    }

    function addListeners() {
      if (getIsCustomTouchBehavior()) {
        on('touchstart', onTrigger, {
          passive: true
        });
        on('touchend', onMouseLeave, {
          passive: true
        });
      }

      splitBySpaces(instance.props.trigger).forEach(function (eventType) {
        if (eventType === 'manual') {
          return;
        }

        on(eventType, onTrigger);

        switch (eventType) {
          case 'mouseenter':
            on('mouseleave', onMouseLeave);
            break;

          case 'focus':
            on(isIE11 ? 'focusout' : 'blur', onBlurOrFocusOut);
            break;

          case 'focusin':
            on('focusout', onBlurOrFocusOut);
            break;
        }
      });
    }

    function removeListeners() {
      listeners.forEach(function (_ref) {
        var node = _ref.node,
            eventType = _ref.eventType,
            handler = _ref.handler,
            options = _ref.options;
        node.removeEventListener(eventType, handler, options);
      });
      listeners = [];
    }

    function onTrigger(event) {
      var _lastTriggerEvent;

      var shouldScheduleClickHide = false;

      if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
        return;
      }

      var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';
      lastTriggerEvent = event;
      currentTarget = event.currentTarget;
      handleAriaExpandedAttribute();

      if (!instance.state.isVisible && isMouseEvent(event)) {
        // If scrolling, `mouseenter` events can be fired if the cursor lands
        // over a new target, but `mousemove` events don't get fired. This
        // causes interactive tooltips to get stuck open until the cursor is
        // moved
        mouseMoveListeners.forEach(function (listener) {
          return listener(event);
        });
      } // Toggle show/hide when clicking click-triggered tooltips


      if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
        shouldScheduleClickHide = true;
      } else {
        scheduleShow(event);
      }

      if (event.type === 'click') {
        isVisibleFromClick = !shouldScheduleClickHide;
      }

      if (shouldScheduleClickHide && !wasFocused) {
        scheduleHide(event);
      }
    }

    function onMouseMove(event) {
      var target = event.target;
      var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);

      if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {
        return;
      }

      var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {
        var _instance$popperInsta;

        var instance = popper._tippy;
        var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;

        if (state) {
          return {
            popperRect: popper.getBoundingClientRect(),
            popperState: state,
            props: props
          };
        }

        return null;
      }).filter(Boolean);

      if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
        cleanupInteractiveMouseListeners();
        scheduleHide(event);
      }
    }

    function onMouseLeave(event) {
      var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;

      if (shouldBail) {
        return;
      }

      if (instance.props.interactive) {
        instance.hideWithInteractivity(event);
        return;
      }

      scheduleHide(event);
    }

    function onBlurOrFocusOut(event) {
      if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {
        return;
      } // If focus was moved to within the popper


      if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
        return;
      }

      scheduleHide(event);
    }

    function isEventListenerStopped(event) {
      return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;
    }

    function createPopperInstance() {
      destroyPopperInstance();
      var _instance$props2 = instance.props,
          popperOptions = _instance$props2.popperOptions,
          placement = _instance$props2.placement,
          offset = _instance$props2.offset,
          getReferenceClientRect = _instance$props2.getReferenceClientRect,
          moveTransition = _instance$props2.moveTransition;
      var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
      var computedReference = getReferenceClientRect ? {
        getBoundingClientRect: getReferenceClientRect,
        contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
      } : reference;
      var tippyModifier = {
        name: '$$tippy',
        enabled: true,
        phase: 'beforeWrite',
        requires: ['computeStyles'],
        fn: function fn(_ref2) {
          var state = _ref2.state;

          if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh = getDefaultTemplateChildren(),
                box = _getDefaultTemplateCh.box;

            ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {
              if (attr === 'placement') {
                box.setAttribute('data-placement', state.placement);
              } else {
                if (state.attributes.popper["data-popper-" + attr]) {
                  box.setAttribute("data-" + attr, '');
                } else {
                  box.removeAttribute("data-" + attr);
                }
              }
            });
            state.attributes.popper = {};
          }
        }
      };
      var modifiers = [{
        name: 'offset',
        options: {
          offset: offset
        }
      }, {
        name: 'preventOverflow',
        options: {
          padding: {
            top: 2,
            bottom: 2,
            left: 5,
            right: 5
          }
        }
      }, {
        name: 'flip',
        options: {
          padding: 5
        }
      }, {
        name: 'computeStyles',
        options: {
          adaptive: !moveTransition
        }
      }, tippyModifier];

      if (getIsDefaultRenderFn() && arrow) {
        modifiers.push({
          name: 'arrow',
          options: {
            element: arrow,
            padding: 3
          }
        });
      }

      modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
      instance.popperInstance = createPopper(computedReference, popper, Object.assign({}, popperOptions, {
        placement: placement,
        onFirstUpdate: onFirstUpdate,
        modifiers: modifiers
      }));
    }

    function destroyPopperInstance() {
      if (instance.popperInstance) {
        instance.popperInstance.destroy();
        instance.popperInstance = null;
      }
    }

    function mount() {
      var appendTo = instance.props.appendTo;
      var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
      // it's directly after the reference element so the elements inside the
      // tippy can be tabbed to
      // If there are clipping issues, the user can specify a different appendTo
      // and ensure focus management is handled correctly manually

      var node = getCurrentTarget();

      if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === 'parent') {
        parentNode = node.parentNode;
      } else {
        parentNode = invokeWithArgsOrReturn(appendTo, [node]);
      } // The popper element needs to exist on the DOM before its position can be
      // updated as Popper needs to read its dimensions


      if (!parentNode.contains(popper)) {
        parentNode.appendChild(popper);
      }

      instance.state.isMounted = true;
      createPopperInstance();
      /* istanbul ignore else */

      {
        // Accessibility check
        warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, ['Interactive tippy element may not be accessible via keyboard', 'navigation because it is not directly after the reference element', 'in the DOM source order.', '\n\n', 'Using a wrapper <div> or <span> tag around the reference element', 'solves this by creating a new parentNode context.', '\n\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle', 'keyboard navigation.', '\n\n', 'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'].join(' '));
      }
    }

    function getNestedPopperTree() {
      return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));
    }

    function scheduleShow(event) {
      instance.clearDelayTimeouts();

      if (event) {
        invokeHook('onTrigger', [instance, event]);
      }

      addDocumentPress();
      var delay = getDelay(true);

      var _getNormalizedTouchSe = getNormalizedTouchSettings(),
          touchValue = _getNormalizedTouchSe[0],
          touchDelay = _getNormalizedTouchSe[1];

      if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {
        delay = touchDelay;
      }

      if (delay) {
        showTimeout = setTimeout(function () {
          instance.show();
        }, delay);
      } else {
        instance.show();
      }
    }

    function scheduleHide(event) {
      instance.clearDelayTimeouts();
      invokeHook('onUntrigger', [instance, event]);

      if (!instance.state.isVisible) {
        removeDocumentPress();
        return;
      } // For interactive tippies, scheduleHide is added to a document.body handler
      // from onMouseLeave so must intercept scheduled hides from mousemove/leave
      // events when trigger contains mouseenter and click, and the tip is
      // currently shown as a result of a click.


      if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {
        return;
      }

      var delay = getDelay(false);

      if (delay) {
        hideTimeout = setTimeout(function () {
          if (instance.state.isVisible) {
            instance.hide();
          }
        }, delay);
      } else {
        // Fixes a `transitionend` problem when it fires 1 frame too
        // late sometimes, we don't want hide() to be called.
        scheduleHideAnimationFrame = requestAnimationFrame(function () {
          instance.hide();
        });
      }
    } // ===========================================================================
    // 🔑 Public methods
    // ===========================================================================


    function enable() {
      instance.state.isEnabled = true;
    }

    function disable() {
      // Disabling the instance should also hide it
      // https://github.com/atomiks/tippy.js-react/issues/106
      instance.hide();
      instance.state.isEnabled = false;
    }

    function clearDelayTimeouts() {
      clearTimeout(showTimeout);
      clearTimeout(hideTimeout);
      cancelAnimationFrame(scheduleHideAnimationFrame);
    }

    function setProps(partialProps) {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));
      }

      if (instance.state.isDestroyed) {
        return;
      }

      invokeHook('onBeforeUpdate', [instance, partialProps]);
      removeListeners();
      var prevProps = instance.props;
      var nextProps = evaluateProps(reference, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
        ignoreAttributes: true
      }));
      instance.props = nextProps;
      addListeners();

      if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
        cleanupInteractiveMouseListeners();
        debouncedOnMouseMove = debounce$1(onMouseMove, nextProps.interactiveDebounce);
      } // Ensure stale aria-expanded attributes are removed


      if (prevProps.triggerTarget && !nextProps.triggerTarget) {
        normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
          node.removeAttribute('aria-expanded');
        });
      } else if (nextProps.triggerTarget) {
        reference.removeAttribute('aria-expanded');
      }

      handleAriaExpandedAttribute();
      handleStyles();

      if (onUpdate) {
        onUpdate(prevProps, nextProps);
      }

      if (instance.popperInstance) {
        createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
        // and the nested ones get re-rendered first.
        // https://github.com/atomiks/tippyjs-react/issues/177
        // TODO: find a cleaner / more efficient solution(!)

        getNestedPopperTree().forEach(function (nestedPopper) {
          // React (and other UI libs likely) requires a rAF wrapper as it flushes
          // its work in one
          requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
        });
      }

      invokeHook('onAfterUpdate', [instance, partialProps]);
    }

    function setContent(content) {
      instance.setProps({
        content: content
      });
    }

    function show() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));
      } // Early bail-out


      var isAlreadyVisible = instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);

      if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
        return;
      } // Normalize `disabled` behavior across browsers.
      // Firefox allows events on disabled elements, but Chrome doesn't.
      // Using a wrapper element (i.e. <span>) is recommended.


      if (getCurrentTarget().hasAttribute('disabled')) {
        return;
      }

      invokeHook('onShow', [instance], false);

      if (instance.props.onShow(instance) === false) {
        return;
      }

      instance.state.isVisible = true;

      if (getIsDefaultRenderFn()) {
        popper.style.visibility = 'visible';
      }

      handleStyles();
      addDocumentPress();

      if (!instance.state.isMounted) {
        popper.style.transition = 'none';
      } // If flipping to the opposite side after hiding at least once, the
      // animation will use the wrong placement without resetting the duration


      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),
            box = _getDefaultTemplateCh2.box,
            content = _getDefaultTemplateCh2.content;

        setTransitionDuration([box, content], 0);
      }

      onFirstUpdate = function onFirstUpdate() {
        var _instance$popperInsta2;

        if (!instance.state.isVisible || ignoreOnFirstUpdate) {
          return;
        }

        ignoreOnFirstUpdate = true; // reflow

        void popper.offsetHeight;
        popper.style.transition = instance.props.moveTransition;

        if (getIsDefaultRenderFn() && instance.props.animation) {
          var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),
              _box = _getDefaultTemplateCh3.box,
              _content = _getDefaultTemplateCh3.content;

          setTransitionDuration([_box, _content], duration);
          setVisibilityState([_box, _content], 'visible');
        }

        handleAriaContentAttribute();
        handleAriaExpandedAttribute();
        pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the
        // popper has been positioned for the first time

        (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
        invokeHook('onMount', [instance]);

        if (instance.props.animation && getIsDefaultRenderFn()) {
          onTransitionedIn(duration, function () {
            instance.state.isShown = true;
            invokeHook('onShown', [instance]);
          });
        }
      };

      mount();
    }

    function hide() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));
      } // Early bail-out


      var isAlreadyHidden = !instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);

      if (isAlreadyHidden || isDestroyed || isDisabled) {
        return;
      }

      invokeHook('onHide', [instance], false);

      if (instance.props.onHide(instance) === false) {
        return;
      }

      instance.state.isVisible = false;
      instance.state.isShown = false;
      ignoreOnFirstUpdate = false;
      isVisibleFromClick = false;

      if (getIsDefaultRenderFn()) {
        popper.style.visibility = 'hidden';
      }

      cleanupInteractiveMouseListeners();
      removeDocumentPress();
      handleStyles(true);

      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),
            box = _getDefaultTemplateCh4.box,
            content = _getDefaultTemplateCh4.content;

        if (instance.props.animation) {
          setTransitionDuration([box, content], duration);
          setVisibilityState([box, content], 'hidden');
        }
      }

      handleAriaContentAttribute();
      handleAriaExpandedAttribute();

      if (instance.props.animation) {
        if (getIsDefaultRenderFn()) {
          onTransitionedOut(duration, instance.unmount);
        }
      } else {
        instance.unmount();
      }
    }

    function hideWithInteractivity(event) {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hideWithInteractivity'));
      }

      getDocument().addEventListener('mousemove', debouncedOnMouseMove);
      pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
      debouncedOnMouseMove(event);
    }

    function unmount() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('unmount'));
      }

      if (instance.state.isVisible) {
        instance.hide();
      }

      if (!instance.state.isMounted) {
        return;
      }

      destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
      // tree by default. This seems mainly for interactive tippies, but we should
      // find a workaround if possible

      getNestedPopperTree().forEach(function (nestedPopper) {
        nestedPopper._tippy.unmount();
      });

      if (popper.parentNode) {
        popper.parentNode.removeChild(popper);
      }

      mountedInstances = mountedInstances.filter(function (i) {
        return i !== instance;
      });
      instance.state.isMounted = false;
      invokeHook('onHidden', [instance]);
    }

    function destroy() {
      /* istanbul ignore else */
      {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));
      }

      if (instance.state.isDestroyed) {
        return;
      }

      instance.clearDelayTimeouts();
      instance.unmount();
      removeListeners();
      delete reference._tippy;
      instance.state.isDestroyed = true;
      invokeHook('onDestroy', [instance]);
    }
  }

  function tippy(targets, optionalProps) {
    if (optionalProps === void 0) {
      optionalProps = {};
    }

    var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
    /* istanbul ignore else */

    {
      validateTargets(targets);
      validateProps(optionalProps, plugins);
    }

    bindGlobalEventListeners();
    var passedProps = Object.assign({}, optionalProps, {
      plugins: plugins
    });
    var elements = getArrayOfElements(targets);
    /* istanbul ignore else */

    {
      var isSingleContentElement = isElement$1(passedProps.content);
      var isMoreThanOneReferenceElement = elements.length > 1;
      warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ['tippy() was passed an Element as the `content` prop, but more than', 'one tippy instance was created by this invocation. This means the', 'content element will only be appended to the last tippy instance.', '\n\n', 'Instead, pass the .innerHTML of the element, or use a function that', 'returns a cloned version of the element instead.', '\n\n', '1) content: element.innerHTML\n', '2) content: () => element.cloneNode(true)'].join(' '));
    }

    var instances = elements.reduce(function (acc, reference) {
      var instance = reference && createTippy(reference, passedProps);

      if (instance) {
        acc.push(instance);
      }

      return acc;
    }, []);
    return isElement$1(targets) ? instances[0] : instances;
  }

  tippy.defaultProps = defaultProps;
  tippy.setDefaultProps = setDefaultProps;
  tippy.currentInput = currentInput;

  // every time the popper is destroyed (i.e. a new target), removing the styles
  // and causing transitions to break for singletons when the console is open, but
  // most notably for non-transform styles being used, `gpuAcceleration: false`.

  var applyStylesModifier = Object.assign({}, applyStyles$1, {
    effect: function effect(_ref) {
      var state = _ref.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      } // intentionally return no cleanup function
      // return () => { ... }

    }
  });

  var mouseCoords = {
    clientX: 0,
    clientY: 0
  };
  var activeInstances = [];

  function storeMouseCoords(_ref) {
    var clientX = _ref.clientX,
        clientY = _ref.clientY;
    mouseCoords = {
      clientX: clientX,
      clientY: clientY
    };
  }

  function addMouseCoordsListener(doc) {
    doc.addEventListener('mousemove', storeMouseCoords);
  }

  function removeMouseCoordsListener(doc) {
    doc.removeEventListener('mousemove', storeMouseCoords);
  }

  var followCursor = {
    name: 'followCursor',
    defaultValue: false,
    fn: function fn(instance) {
      var reference = instance.reference;
      var doc = getOwnerDocument(instance.props.triggerTarget || reference);
      var isInternalUpdate = false;
      var wasFocusEvent = false;
      var isUnmounted = true;
      var prevProps = instance.props;

      function getIsInitialBehavior() {
        return instance.props.followCursor === 'initial' && instance.state.isVisible;
      }

      function addListener() {
        doc.addEventListener('mousemove', onMouseMove);
      }

      function removeListener() {
        doc.removeEventListener('mousemove', onMouseMove);
      }

      function unsetGetReferenceClientRect() {
        isInternalUpdate = true;
        instance.setProps({
          getReferenceClientRect: null
        });
        isInternalUpdate = false;
      }

      function onMouseMove(event) {
        // If the instance is interactive, avoid updating the position unless it's
        // over the reference element
        var isCursorOverReference = event.target ? reference.contains(event.target) : true;
        var followCursor = instance.props.followCursor;
        var clientX = event.clientX,
            clientY = event.clientY;
        var rect = reference.getBoundingClientRect();
        var relativeX = clientX - rect.left;
        var relativeY = clientY - rect.top;

        if (isCursorOverReference || !instance.props.interactive) {
          instance.setProps({
            // @ts-ignore - unneeded DOMRect properties
            getReferenceClientRect: function getReferenceClientRect() {
              var rect = reference.getBoundingClientRect();
              var x = clientX;
              var y = clientY;

              if (followCursor === 'initial') {
                x = rect.left + relativeX;
                y = rect.top + relativeY;
              }

              var top = followCursor === 'horizontal' ? rect.top : y;
              var right = followCursor === 'vertical' ? rect.right : x;
              var bottom = followCursor === 'horizontal' ? rect.bottom : y;
              var left = followCursor === 'vertical' ? rect.left : x;
              return {
                width: right - left,
                height: bottom - top,
                top: top,
                right: right,
                bottom: bottom,
                left: left
              };
            }
          });
        }
      }

      function create() {
        if (instance.props.followCursor) {
          activeInstances.push({
            instance: instance,
            doc: doc
          });
          addMouseCoordsListener(doc);
        }
      }

      function destroy() {
        activeInstances = activeInstances.filter(function (data) {
          return data.instance !== instance;
        });

        if (activeInstances.filter(function (data) {
          return data.doc === doc;
        }).length === 0) {
          removeMouseCoordsListener(doc);
        }
      }

      return {
        onCreate: create,
        onDestroy: destroy,
        onBeforeUpdate: function onBeforeUpdate() {
          prevProps = instance.props;
        },
        onAfterUpdate: function onAfterUpdate(_, _ref2) {
          var followCursor = _ref2.followCursor;

          if (isInternalUpdate) {
            return;
          }

          if (followCursor !== undefined && prevProps.followCursor !== followCursor) {
            destroy();

            if (followCursor) {
              create();

              if (instance.state.isMounted && !wasFocusEvent && !getIsInitialBehavior()) {
                addListener();
              }
            } else {
              removeListener();
              unsetGetReferenceClientRect();
            }
          }
        },
        onMount: function onMount() {
          if (instance.props.followCursor && !wasFocusEvent) {
            if (isUnmounted) {
              onMouseMove(mouseCoords);
              isUnmounted = false;
            }

            if (!getIsInitialBehavior()) {
              addListener();
            }
          }
        },
        onTrigger: function onTrigger(_, event) {
          if (isMouseEvent(event)) {
            mouseCoords = {
              clientX: event.clientX,
              clientY: event.clientY
            };
          }

          wasFocusEvent = event.type === 'focus';
        },
        onHidden: function onHidden() {
          if (instance.props.followCursor) {
            unsetGetReferenceClientRect();
            removeListener();
            isUnmounted = true;
          }
        }
      };
    }
  };

  tippy.setDefaultProps({
    render: render
  });

  var DEFAULT_DISTANCE_OPTIONS = {
    showTotalDistance: false,
    showDashDistance: true,
    showWhen: ['normal', 'active'],
    format: function format(meters) {
      if (meters >= 1000) {
        return +(meters / 1000).toFixed(2) + 'km';
      } else {
        return +meters.toFixed(2) + 'm';
      }
    }
  };
  var DEFAULT_AREA_OPTIONS = {
    showWhen: ['normal', 'active'],
    format: function format(squareMeters) {
      return squareMeters > 1000000 ? "".concat(+(squareMeters / 1000000).toFixed(2), "km\xB2") : "".concat(+squareMeters.toFixed(2), "m\xB2");
    }
  };
  var DEFAULT_HISTORY_CONFIG = {
    maxSize: 100
  };
  var DEFAULT_KEYBOARD_CONFIG = {
    remove: ['del', 'backspace'],
    revert: ['command+z', 'ctrl+z'],
    redo: ['command+shift+z', 'ctrl+shift+z']
  };
  var DEFAULT_POPUP_CONFIG = {
    allowHTML: true,
    followCursor: true,
    placement: 'bottom-start',
    offset: [-10, 20],
    plugins: [followCursor],
    trigger: 'manual',
    hideOnClick: false,
    theme: 'light'
  };
  var DEFAULT_ADSORB_CONFIG = {
    data: 'drawData',
    pointAdsorbPixel: 12,
    lineAdsorbPixel: 10
  };
  var DEFAULT_DRAG_OPTIONS = {
    dotDuration: 100,
    dotDistance: 30
  };

  /**
   * Drawer事件枚举
   */
  (function (DrawEvent) {
    DrawEvent["Init"] = "init";
    DrawEvent["Destroy"] = "destroy";
    DrawEvent["Enable"] = "enable";
    DrawEvent["Disable"] = "disable";
    DrawEvent["Add"] = "add";
    DrawEvent["Edit"] = "edit";
    DrawEvent["Remove"] = "remove";
    DrawEvent["Clear"] = "clear";
    DrawEvent["Change"] = "change";
    DrawEvent["DragStart"] = "dragStart";
    DrawEvent["Dragging"] = "dragging";
    DrawEvent["DragEnd"] = "dragEnd";
    DrawEvent["Select"] = "select";
    DrawEvent["AddNode"] = "addNode";
    DrawEvent["RemoveNode"] = "removeNode";
  })(exports.DrawEvent || (exports.DrawEvent = {}));
  (function (SourceEvent) {
    SourceEvent["Change"] = "change";
    SourceEvent["Update"] = "update";
  })(exports.SourceEvent || (exports.SourceEvent = {}));
  (function (RenderEvent) {
    RenderEvent["Click"] = "click";
    RenderEvent["UnClick"] = "unclick";
    RenderEvent["Dragstart"] = "dragstart";
    RenderEvent["Mousemove"] = "mousemove";
    RenderEvent["Mouseout"] = "mouseout";
    RenderEvent["Dragging"] = "dragging";
    RenderEvent["Dragend"] = "dragend";
    RenderEvent["DblClick"] = "dblClick";
    RenderEvent["Contextmenu"] = "contextmenu";
  })(exports.RenderEvent || (exports.RenderEvent = {}));
  (function (LayerEvent) {
    LayerEvent["Mousedown"] = "mousedown";
    LayerEvent["Mouseup"] = "mouseup";
    LayerEvent["Click"] = "click";
    LayerEvent["UnClick"] = "unclick";
    LayerEvent["Dblclick"] = "dblclick";
    LayerEvent["Mousemove"] = "mousemove";
    LayerEvent["Mouseover"] = "mouseover";
    LayerEvent["Mouseenter"] = "mouseenter";
    LayerEvent["Mouseleave"] = "mouseleave";
    LayerEvent["Mouseout"] = "mouseout";
    LayerEvent["Contextmenu"] = "contextmenu";
  })(exports.LayerEvent || (exports.LayerEvent = {}));
  (function (SceneEvent) {
    SceneEvent["Loaded"] = "loaded";
    SceneEvent["MapMove"] = "mapmove";
    SceneEvent["MoveStart"] = "movestart";
    SceneEvent["MoveEnd"] = "moveend";
    SceneEvent["ZoomChange"] = "zoomchange";
    SceneEvent["ZoomStart"] = "zoomstart";
    SceneEvent["ZoomEnd"] = "zoomend";
    SceneEvent["Click"] = "click";
    SceneEvent["Dblclick"] = "dblclick";
    SceneEvent["Mousemove"] = "mousemove";
    SceneEvent["Mousewheel"] = "mousewheel";
    SceneEvent["Mouseover"] = "mouseover";
    SceneEvent["Mouseout"] = "mouseout";
    SceneEvent["Mouseup"] = "mouseup";
    SceneEvent["Mousedown"] = "mousedown";
    SceneEvent["Contextmenu"] = "contextmenu";
    SceneEvent["Dragstart"] = "dragstart";
    SceneEvent["Dragging"] = "dragging";
    SceneEvent["Dragend"] = "dragend";
  })(exports.SceneEvent || (exports.SceneEvent = {}));
  (function (ControlEvent) {
    ControlEvent["DrawChange"] = "drawchange";
    ControlEvent["DataChange"] = "datachange";
    ControlEvent["DrawSelect"] = "drawselect";
    ControlEvent["DrawClear"] = "drawclear";
  })(exports.ControlEvent || (exports.ControlEvent = {}));

  function _arrayLikeToArray(r, a) {
    (null == a || a > r.length) && (a = r.length);
    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
    return n;
  }
  function _arrayWithHoles(r) {
    if (Array.isArray(r)) return r;
  }
  function _arrayWithoutHoles(r) {
    if (Array.isArray(r)) return _arrayLikeToArray(r);
  }
  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  function _callSuper(t, o, e) {
    return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
  }
  function _classCallCheck(a, n) {
    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
  }
  function _defineProperties(e, r) {
    for (var t = 0; t < r.length; t++) {
      var o = r[t];
      o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
    }
  }
  function _createClass(e, r, t) {
    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }
  function _createForOfIteratorHelper(r, e) {
    var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (!t) {
      if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
        t && (r = t);
        var n = 0,
          F = function () {};
        return {
          s: F,
          n: function () {
            return n >= r.length ? {
              done: !0
            } : {
              done: !1,
              value: r[n++]
            };
          },
          e: function (r) {
            throw r;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o,
      a = !0,
      u = !1;
    return {
      s: function () {
        t = t.call(r);
      },
      n: function () {
        var r = t.next();
        return a = r.done, r;
      },
      e: function (r) {
        u = !0, o = r;
      },
      f: function () {
        try {
          a || null == t.return || t.return();
        } finally {
          if (u) throw o;
        }
      }
    };
  }
  function _defineProperty(e, r, t) {
    return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
      value: t,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[r] = t, e;
  }
  function _get() {
    return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) {
      var p = _superPropBase(e, t);
      if (p) {
        var n = Object.getOwnPropertyDescriptor(p, t);
        return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value;
      }
    }, _get.apply(null, arguments);
  }
  function _getPrototypeOf(t) {
    return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
      return t.__proto__ || Object.getPrototypeOf(t);
    }, _getPrototypeOf(t);
  }
  function _inherits(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        writable: !0,
        configurable: !0
      }
    }), Object.defineProperty(t, "prototype", {
      writable: !1
    }), e && _setPrototypeOf(t, e);
  }
  function _isNativeReflectConstruct() {
    try {
      var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    } catch (t) {}
    return (_isNativeReflectConstruct = function () {
      return !!t;
    })();
  }
  function _iterableToArray(r) {
    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
  }
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e,
        n,
        i,
        u,
        a = [],
        f = !0,
        o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) return;
          f = !1;
        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
      } catch (r) {
        o = !0, n = r;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
        } finally {
          if (o) throw n;
        }
      }
      return a;
    }
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function (r) {
        return Object.getOwnPropertyDescriptor(e, r).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r = 1; r < arguments.length; r++) {
      var t = null != arguments[r] ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
        _defineProperty(e, r, t[r]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
        Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
      });
    }
    return e;
  }
  function _possibleConstructorReturn(t, e) {
    if (e && ("object" == typeof e || "function" == typeof e)) return e;
    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(t);
  }
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
      return t.__proto__ = e, t;
    }, _setPrototypeOf(t, e);
  }
  function _slicedToArray(r, e) {
    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
  }
  function _superPropBase(t, o) {
    for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t)););
    return t;
  }
  function _toConsumableArray(r) {
    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
  }
  function _toPrimitive(t, r) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t);
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _typeof(o) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
      return typeof o;
    } : function (o) {
      return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
  }
  function _unsupportedIterableToArray(r, a) {
    if (r) {
      if ("string" == typeof r) return _arrayLikeToArray(r, a);
      var t = {}.toString.call(r).slice(8, -1);
      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
    }
  }

  /**
   * @module helpers
   */
  /**
   * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.
   *
   * @memberof helpers
   * @type {number}
   */
  var earthRadius = 6371008.8;
  /**
   * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.
   *
   * @memberof helpers
   * @type {Object}
   */
  var factors = {
      centimeters: earthRadius * 100,
      centimetres: earthRadius * 100,
      degrees: earthRadius / 111325,
      feet: earthRadius * 3.28084,
      inches: earthRadius * 39.37,
      kilometers: earthRadius / 1000,
      kilometres: earthRadius / 1000,
      meters: earthRadius,
      metres: earthRadius,
      miles: earthRadius / 1609.344,
      millimeters: earthRadius * 1000,
      millimetres: earthRadius * 1000,
      nauticalmiles: earthRadius / 1852,
      radians: 1,
      yards: earthRadius * 1.0936,
  };
  /**
   * Units of measurement factors based on 1 meter.
   *
   * @memberof helpers
   * @type {Object}
   */
  var unitsFactors = {
      centimeters: 100,
      centimetres: 100,
      degrees: 1 / 111325,
      feet: 3.28084,
      inches: 39.37,
      kilometers: 1 / 1000,
      kilometres: 1 / 1000,
      meters: 1,
      metres: 1,
      miles: 1 / 1609.344,
      millimeters: 1000,
      millimetres: 1000,
      nauticalmiles: 1 / 1852,
      radians: 1 / earthRadius,
      yards: 1.0936133,
  };
  /**
   * Area of measurement factors based on 1 square meter.
   *
   * @memberof helpers
   * @type {Object}
   */
  var areaFactors = {
      acres: 0.000247105,
      centimeters: 10000,
      centimetres: 10000,
      feet: 10.763910417,
      hectares: 0.0001,
      inches: 1550.003100006,
      kilometers: 0.000001,
      kilometres: 0.000001,
      meters: 1,
      metres: 1,
      miles: 3.86e-7,
      millimeters: 1000000,
      millimetres: 1000000,
      yards: 1.195990046,
  };
  /**
   * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.
   *
   * @name feature
   * @param {Geometry} geometry input geometry
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature} a GeoJSON Feature
   * @example
   * var geometry = {
   *   "type": "Point",
   *   "coordinates": [110, 50]
   * };
   *
   * var feature = turf.feature(geometry);
   *
   * //=feature
   */
  function feature(geom, properties, options) {
      if (options === void 0) { options = {}; }
      var feat = { type: "Feature" };
      if (options.id === 0 || options.id) {
          feat.id = options.id;
      }
      if (options.bbox) {
          feat.bbox = options.bbox;
      }
      feat.properties = properties || {};
      feat.geometry = geom;
      return feat;
  }
  /**
   * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.
   * For GeometryCollection type use `helpers.geometryCollection`
   *
   * @name geometry
   * @param {string} type Geometry Type
   * @param {Array<any>} coordinates Coordinates
   * @param {Object} [options={}] Optional Parameters
   * @returns {Geometry} a GeoJSON Geometry
   * @example
   * var type = "Point";
   * var coordinates = [110, 50];
   * var geometry = turf.geometry(type, coordinates);
   * // => geometry
   */
  function geometry(type, coordinates, _options) {
      switch (type) {
          case "Point":
              return point(coordinates).geometry;
          case "LineString":
              return lineString(coordinates).geometry;
          case "Polygon":
              return polygon(coordinates).geometry;
          case "MultiPoint":
              return multiPoint(coordinates).geometry;
          case "MultiLineString":
              return multiLineString(coordinates).geometry;
          case "MultiPolygon":
              return multiPolygon(coordinates).geometry;
          default:
              throw new Error(type + " is invalid");
      }
  }
  /**
   * Creates a {@link Point} {@link Feature} from a Position.
   *
   * @name point
   * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<Point>} a Point feature
   * @example
   * var point = turf.point([-75.343, 39.984]);
   *
   * //=point
   */
  function point(coordinates, properties, options) {
      if (options === void 0) { options = {}; }
      if (!coordinates) {
          throw new Error("coordinates is required");
      }
      if (!Array.isArray(coordinates)) {
          throw new Error("coordinates must be an Array");
      }
      if (coordinates.length < 2) {
          throw new Error("coordinates must be at least 2 numbers long");
      }
      if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {
          throw new Error("coordinates must contain numbers");
      }
      var geom = {
          type: "Point",
          coordinates: coordinates,
      };
      return feature(geom, properties, options);
  }
  /**
   * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.
   *
   * @name points
   * @param {Array<Array<number>>} coordinates an array of Points
   * @param {Object} [properties={}] Translate these properties to each Feature
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]
   * associated with the FeatureCollection
   * @param {string|number} [options.id] Identifier associated with the FeatureCollection
   * @returns {FeatureCollection<Point>} Point Feature
   * @example
   * var points = turf.points([
   *   [-75, 39],
   *   [-80, 45],
   *   [-78, 50]
   * ]);
   *
   * //=points
   */
  function points(coordinates, properties, options) {
      if (options === void 0) { options = {}; }
      return featureCollection(coordinates.map(function (coords) {
          return point(coords, properties);
      }), options);
  }
  /**
   * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.
   *
   * @name polygon
   * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<Polygon>} Polygon Feature
   * @example
   * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });
   *
   * //=polygon
   */
  function polygon(coordinates, properties, options) {
      if (options === void 0) { options = {}; }
      for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {
          var ring = coordinates_1[_i];
          if (ring.length < 4) {
              throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");
          }
          for (var j = 0; j < ring[ring.length - 1].length; j++) {
              // Check if first point of Polygon contains two numbers
              if (ring[ring.length - 1][j] !== ring[0][j]) {
                  throw new Error("First and last Position are not equivalent.");
              }
          }
      }
      var geom = {
          type: "Polygon",
          coordinates: coordinates,
      };
      return feature(geom, properties, options);
  }
  /**
   * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.
   *
   * @name polygons
   * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the FeatureCollection
   * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection
   * @example
   * var polygons = turf.polygons([
   *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],
   *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],
   * ]);
   *
   * //=polygons
   */
  function polygons(coordinates, properties, options) {
      if (options === void 0) { options = {}; }
      return featureCollection(coordinates.map(function (coords) {
          return polygon(coords, properties);
      }), options);
  }
  /**
   * Creates a {@link LineString} {@link Feature} from an Array of Positions.
   *
   * @name lineString
   * @param {Array<Array<number>>} coordinates an array of Positions
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<LineString>} LineString Feature
   * @example
   * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});
   * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});
   *
   * //=linestring1
   * //=linestring2
   */
  function lineString(coordinates, properties, options) {
      if (options === void 0) { options = {}; }
      if (coordinates.length < 2) {
          throw new Error("coordinates must be an array of two or more positions");
      }
      var geom = {
          type: "LineString",
          coordinates: coordinates,
      };
      return feature(geom, properties, options);
  }
  /**
   * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.
   *
   * @name lineStrings
   * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]
   * associated with the FeatureCollection
   * @param {string|number} [options.id] Identifier associated with the FeatureCollection
   * @returns {FeatureCollection<LineString>} LineString FeatureCollection
   * @example
   * var linestrings = turf.lineStrings([
   *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],
   *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]
   * ]);
   *
   * //=linestrings
   */
  function lineStrings(coordinates, properties, options) {
      if (options === void 0) { options = {}; }
      return featureCollection(coordinates.map(function (coords) {
          return lineString(coords, properties);
      }), options);
  }
  /**
   * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.
   *
   * @name featureCollection
   * @param {Feature[]} features input features
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {FeatureCollection} FeatureCollection of Features
   * @example
   * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});
   * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});
   * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});
   *
   * var collection = turf.featureCollection([
   *   locationA,
   *   locationB,
   *   locationC
   * ]);
   *
   * //=collection
   */
  function featureCollection(features, options) {
      if (options === void 0) { options = {}; }
      var fc = { type: "FeatureCollection" };
      if (options.id) {
          fc.id = options.id;
      }
      if (options.bbox) {
          fc.bbox = options.bbox;
      }
      fc.features = features;
      return fc;
  }
  /**
   * Creates a {@link Feature<MultiLineString>} based on a
   * coordinate array. Properties can be added optionally.
   *
   * @name multiLineString
   * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<MultiLineString>} a MultiLineString feature
   * @throws {Error} if no coordinates are passed
   * @example
   * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);
   *
   * //=multiLine
   */
  function multiLineString(coordinates, properties, options) {
      if (options === void 0) { options = {}; }
      var geom = {
          type: "MultiLineString",
          coordinates: coordinates,
      };
      return feature(geom, properties, options);
  }
  /**
   * Creates a {@link Feature<MultiPoint>} based on a
   * coordinate array. Properties can be added optionally.
   *
   * @name multiPoint
   * @param {Array<Array<number>>} coordinates an array of Positions
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<MultiPoint>} a MultiPoint feature
   * @throws {Error} if no coordinates are passed
   * @example
   * var multiPt = turf.multiPoint([[0,0],[10,10]]);
   *
   * //=multiPt
   */
  function multiPoint(coordinates, properties, options) {
      if (options === void 0) { options = {}; }
      var geom = {
          type: "MultiPoint",
          coordinates: coordinates,
      };
      return feature(geom, properties, options);
  }
  /**
   * Creates a {@link Feature<MultiPolygon>} based on a
   * coordinate array. Properties can be added optionally.
   *
   * @name multiPolygon
   * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<MultiPolygon>} a multipolygon feature
   * @throws {Error} if no coordinates are passed
   * @example
   * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);
   *
   * //=multiPoly
   *
   */
  function multiPolygon(coordinates, properties, options) {
      if (options === void 0) { options = {}; }
      var geom = {
          type: "MultiPolygon",
          coordinates: coordinates,
      };
      return feature(geom, properties, options);
  }
  /**
   * Creates a {@link Feature<GeometryCollection>} based on a
   * coordinate array. Properties can be added optionally.
   *
   * @name geometryCollection
   * @param {Array<Geometry>} geometries an array of GeoJSON Geometries
   * @param {Object} [properties={}] an Object of key-value pairs to add as properties
   * @param {Object} [options={}] Optional Parameters
   * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature
   * @param {string|number} [options.id] Identifier associated with the Feature
   * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature
   * @example
   * var pt = turf.geometry("Point", [100, 0]);
   * var line = turf.geometry("LineString", [[101, 0], [102, 1]]);
   * var collection = turf.geometryCollection([pt, line]);
   *
   * // => collection
   */
  function geometryCollection(geometries, properties, options) {
      if (options === void 0) { options = {}; }
      var geom = {
          type: "GeometryCollection",
          geometries: geometries,
      };
      return feature(geom, properties, options);
  }
  /**
   * Round number to precision
   *
   * @param {number} num Number
   * @param {number} [precision=0] Precision
   * @returns {number} rounded number
   * @example
   * turf.round(120.4321)
   * //=120
   *
   * turf.round(120.4321, 2)
   * //=120.43
   */
  function round$1(num, precision) {
      if (precision === void 0) { precision = 0; }
      if (precision && !(precision >= 0)) {
          throw new Error("precision must be a positive number");
      }
      var multiplier = Math.pow(10, precision || 0);
      return Math.round(num * multiplier) / multiplier;
  }
  /**
   * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.
   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
   *
   * @name radiansToLength
   * @param {number} radians in radians across the sphere
   * @param {string} [units="kilometers"] can be degrees, radians, miles, inches, yards, metres,
   * meters, kilometres, kilometers.
   * @returns {number} distance
   */
  function radiansToLength(radians, units) {
      if (units === void 0) { units = "kilometers"; }
      var factor = factors[units];
      if (!factor) {
          throw new Error(units + " units is invalid");
      }
      return radians * factor;
  }
  /**
   * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians
   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
   *
   * @name lengthToRadians
   * @param {number} distance in real units
   * @param {string} [units="kilometers"] can be degrees, radians, miles, inches, yards, metres,
   * meters, kilometres, kilometers.
   * @returns {number} radians
   */
  function lengthToRadians(distance, units) {
      if (units === void 0) { units = "kilometers"; }
      var factor = factors[units];
      if (!factor) {
          throw new Error(units + " units is invalid");
      }
      return distance / factor;
  }
  /**
   * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees
   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet
   *
   * @name lengthToDegrees
   * @param {number} distance in real units
   * @param {string} [units="kilometers"] can be degrees, radians, miles, inches, yards, metres,
   * meters, kilometres, kilometers.
   * @returns {number} degrees
   */
  function lengthToDegrees(distance, units) {
      return radiansToDegrees(lengthToRadians(distance, units));
  }
  /**
   * Converts any bearing angle from the north line direction (positive clockwise)
   * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line
   *
   * @name bearingToAzimuth
   * @param {number} bearing angle, between -180 and +180 degrees
   * @returns {number} angle between 0 and 360 degrees
   */
  function bearingToAzimuth(bearing) {
      var angle = bearing % 360;
      if (angle < 0) {
          angle += 360;
      }
      return angle;
  }
  /**
   * Converts an angle in radians to degrees
   *
   * @name radiansToDegrees
   * @param {number} radians angle in radians
   * @returns {number} degrees between 0 and 360 degrees
   */
  function radiansToDegrees(radians) {
      var degrees = radians % (2 * Math.PI);
      return (degrees * 180) / Math.PI;
  }
  /**
   * Converts an angle in degrees to radians
   *
   * @name degreesToRadians
   * @param {number} degrees angle between 0 and 360 degrees
   * @returns {number} angle in radians
   */
  function degreesToRadians(degrees) {
      var radians = degrees % 360;
      return (radians * Math.PI) / 180;
  }
  /**
   * Converts a length to the requested unit.
   * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet
   *
   * @param {number} length to be converted
   * @param {Units} [originalUnit="kilometers"] of the length
   * @param {Units} [finalUnit="kilometers"] returned unit
   * @returns {number} the converted length
   */
  function convertLength(length, originalUnit, finalUnit) {
      if (originalUnit === void 0) { originalUnit = "kilometers"; }
      if (finalUnit === void 0) { finalUnit = "kilometers"; }
      if (!(length >= 0)) {
          throw new Error("length must be a positive number");
      }
      return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);
  }
  /**
   * Converts a area to the requested unit.
   * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares
   * @param {number} area to be converted
   * @param {Units} [originalUnit="meters"] of the distance
   * @param {Units} [finalUnit="kilometers"] returned unit
   * @returns {number} the converted area
   */
  function convertArea(area, originalUnit, finalUnit) {
      if (originalUnit === void 0) { originalUnit = "meters"; }
      if (finalUnit === void 0) { finalUnit = "kilometers"; }
      if (!(area >= 0)) {
          throw new Error("area must be a positive number");
      }
      var startFactor = areaFactors[originalUnit];
      if (!startFactor) {
          throw new Error("invalid original units");
      }
      var finalFactor = areaFactors[finalUnit];
      if (!finalFactor) {
          throw new Error("invalid final units");
      }
      return (area / startFactor) * finalFactor;
  }
  /**
   * isNumber
   *
   * @param {*} num Number to validate
   * @returns {boolean} true/false
   * @example
   * turf.isNumber(123)
   * //=true
   * turf.isNumber('foo')
   * //=false
   */
  function isNumber(num) {
      return !isNaN(num) && num !== null && !Array.isArray(num);
  }
  /**
   * isObject
   *
   * @param {*} input variable to validate
   * @returns {boolean} true/false
   * @example
   * turf.isObject({elevation: 10})
   * //=true
   * turf.isObject('foo')
   * //=false
   */
  function isObject(input) {
      return !!input && input.constructor === Object;
  }
  /**
   * Validate BBox
   *
   * @private
   * @param {Array<number>} bbox BBox to validate
   * @returns {void}
   * @throws Error if BBox is not valid
   * @example
   * validateBBox([-180, -40, 110, 50])
   * //=OK
   * validateBBox([-180, -40])
   * //=Error
   * validateBBox('Foo')
   * //=Error
   * validateBBox(5)
   * //=Error
   * validateBBox(null)
   * //=Error
   * validateBBox(undefined)
   * //=Error
   */
  function validateBBox(bbox) {
      if (!bbox) {
          throw new Error("bbox is required");
      }
      if (!Array.isArray(bbox)) {
          throw new Error("bbox must be an Array");
      }
      if (bbox.length !== 4 && bbox.length !== 6) {
          throw new Error("bbox must be an Array of 4 or 6 numbers");
      }
      bbox.forEach(function (num) {
          if (!isNumber(num)) {
              throw new Error("bbox must only contain numbers");
          }
      });
  }
  /**
   * Validate Id
   *
   * @private
   * @param {string|number} id Id to validate
   * @returns {void}
   * @throws Error if Id is not valid
   * @example
   * validateId([-180, -40, 110, 50])
   * //=Error
   * validateId([-180, -40])
   * //=Error
   * validateId('Foo')
   * //=OK
   * validateId(5)
   * //=OK
   * validateId(null)
   * //=Error
   * validateId(undefined)
   * //=Error
   */
  function validateId(id) {
      if (!id) {
          throw new Error("id is required");
      }
      if (["string", "number"].indexOf(typeof id) === -1) {
          throw new Error("id must be a number or a string");
      }
  }

  var es = /*#__PURE__*/Object.freeze({
    __proto__: null,
    earthRadius: earthRadius,
    factors: factors,
    unitsFactors: unitsFactors,
    areaFactors: areaFactors,
    feature: feature,
    geometry: geometry,
    point: point,
    points: points,
    polygon: polygon,
    polygons: polygons,
    lineString: lineString,
    lineStrings: lineStrings,
    featureCollection: featureCollection,
    multiLineString: multiLineString,
    multiPoint: multiPoint,
    multiPolygon: multiPolygon,
    geometryCollection: geometryCollection,
    round: round$1,
    radiansToLength: radiansToLength,
    lengthToRadians: lengthToRadians,
    lengthToDegrees: lengthToDegrees,
    bearingToAzimuth: bearingToAzimuth,
    radiansToDegrees: radiansToDegrees,
    degreesToRadians: degreesToRadians,
    convertLength: convertLength,
    convertArea: convertArea,
    isNumber: isNumber,
    isObject: isObject,
    validateBBox: validateBBox,
    validateId: validateId
  });

  /**
   * Callback for coordEach
   *
   * @callback coordEachCallback
   * @param {Array<number>} currentCoord The current coordinate being processed.
   * @param {number} coordIndex The current index of the coordinate being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   */

  /**
   * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()
   *
   * @name coordEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)
   * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {"foo": "bar"}),
   *   turf.point([36, 53], {"hello": "world"})
   * ]);
   *
   * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=currentCoord
   *   //=coordIndex
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   * });
   */
  function coordEach(geojson, callback, excludeWrapCoord) {
    // Handles null Geometry -- Skips this GeoJSON
    if (geojson === null) return;
    var j,
      k,
      l,
      geometry,
      stopG,
      coords,
      geometryMaybeCollection,
      wrapShrink = 0,
      coordIndex = 0,
      isGeometryCollection,
      type = geojson.type,
      isFeatureCollection = type === "FeatureCollection",
      isFeature = type === "Feature",
      stop = isFeatureCollection ? geojson.features.length : 1;

    // This logic may look a little weird. The reason why it is that way
    // is because it's trying to be fast. GeoJSON supports multiple kinds
    // of objects at its root: FeatureCollection, Features, Geometries.
    // This function has the responsibility of handling all of them, and that
    // means that some of the `for` loops you see below actually just don't apply
    // to certain inputs. For instance, if you give this just a
    // Point geometry, then both loops are short-circuited and all we do
    // is gradually rename the input until it's called 'geometry'.
    //
    // This also aims to allocate as few resources as possible: just a
    // few numbers and booleans, rather than any temporary arrays as would
    // be required with the normalization approach.
    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
      geometryMaybeCollection = isFeatureCollection
        ? geojson.features[featureIndex].geometry
        : isFeature
        ? geojson.geometry
        : geojson;
      isGeometryCollection = geometryMaybeCollection
        ? geometryMaybeCollection.type === "GeometryCollection"
        : false;
      stopG = isGeometryCollection
        ? geometryMaybeCollection.geometries.length
        : 1;

      for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
        var multiFeatureIndex = 0;
        var geometryIndex = 0;
        geometry = isGeometryCollection
          ? geometryMaybeCollection.geometries[geomIndex]
          : geometryMaybeCollection;

        // Handles null Geometry -- Skips this geometry
        if (geometry === null) continue;
        coords = geometry.coordinates;
        var geomType = geometry.type;

        wrapShrink =
          excludeWrapCoord &&
          (geomType === "Polygon" || geomType === "MultiPolygon")
            ? 1
            : 0;

        switch (geomType) {
          case null:
            break;
          case "Point":
            if (
              callback(
                coords,
                coordIndex,
                featureIndex,
                multiFeatureIndex,
                geometryIndex
              ) === false
            )
              return false;
            coordIndex++;
            multiFeatureIndex++;
            break;
          case "LineString":
          case "MultiPoint":
            for (j = 0; j < coords.length; j++) {
              if (
                callback(
                  coords[j],
                  coordIndex,
                  featureIndex,
                  multiFeatureIndex,
                  geometryIndex
                ) === false
              )
                return false;
              coordIndex++;
              if (geomType === "MultiPoint") multiFeatureIndex++;
            }
            if (geomType === "LineString") multiFeatureIndex++;
            break;
          case "Polygon":
          case "MultiLineString":
            for (j = 0; j < coords.length; j++) {
              for (k = 0; k < coords[j].length - wrapShrink; k++) {
                if (
                  callback(
                    coords[j][k],
                    coordIndex,
                    featureIndex,
                    multiFeatureIndex,
                    geometryIndex
                  ) === false
                )
                  return false;
                coordIndex++;
              }
              if (geomType === "MultiLineString") multiFeatureIndex++;
              if (geomType === "Polygon") geometryIndex++;
            }
            if (geomType === "Polygon") multiFeatureIndex++;
            break;
          case "MultiPolygon":
            for (j = 0; j < coords.length; j++) {
              geometryIndex = 0;
              for (k = 0; k < coords[j].length; k++) {
                for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                  if (
                    callback(
                      coords[j][k][l],
                      coordIndex,
                      featureIndex,
                      multiFeatureIndex,
                      geometryIndex
                    ) === false
                  )
                    return false;
                  coordIndex++;
                }
                geometryIndex++;
              }
              multiFeatureIndex++;
            }
            break;
          case "GeometryCollection":
            for (j = 0; j < geometry.geometries.length; j++)
              if (
                coordEach(geometry.geometries[j], callback, excludeWrapCoord) ===
                false
              )
                return false;
            break;
          default:
            throw new Error("Unknown Geometry Type");
        }
      }
    }
  }

  /**
   * Callback for coordReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback coordReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Array<number>} currentCoord The current coordinate being processed.
   * @param {number} coordIndex The current index of the coordinate being processed.
   * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   */

  /**
   * Reduce coordinates in any GeoJSON object, similar to Array.reduce()
   *
   * @name coordReduce
   * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {"foo": "bar"}),
   *   turf.point([36, 53], {"hello": "world"})
   * ]);
   *
   * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=previousValue
   *   //=currentCoord
   *   //=coordIndex
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   *   return currentCoord;
   * });
   */
  function coordReduce(geojson, callback, initialValue, excludeWrapCoord) {
    var previousValue = initialValue;
    coordEach(
      geojson,
      function (
        currentCoord,
        coordIndex,
        featureIndex,
        multiFeatureIndex,
        geometryIndex
      ) {
        if (coordIndex === 0 && initialValue === undefined)
          previousValue = currentCoord;
        else
          previousValue = callback(
            previousValue,
            currentCoord,
            coordIndex,
            featureIndex,
            multiFeatureIndex,
            geometryIndex
          );
      },
      excludeWrapCoord
    );
    return previousValue;
  }

  /**
   * Callback for propEach
   *
   * @callback propEachCallback
   * @param {Object} currentProperties The current Properties being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Iterate over properties in any GeoJSON object, similar to Array.forEach()
   *
   * @name propEach
   * @param {FeatureCollection|Feature} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentProperties, featureIndex)
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.propEach(features, function (currentProperties, featureIndex) {
   *   //=currentProperties
   *   //=featureIndex
   * });
   */
  function propEach(geojson, callback) {
    var i;
    switch (geojson.type) {
      case "FeatureCollection":
        for (i = 0; i < geojson.features.length; i++) {
          if (callback(geojson.features[i].properties, i) === false) break;
        }
        break;
      case "Feature":
        callback(geojson.properties, 0);
        break;
    }
  }

  /**
   * Callback for propReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback propReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {*} currentProperties The current Properties being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Reduce properties in any GeoJSON object into a single value,
   * similar to how Array.reduce works. However, in this case we lazily run
   * the reduction, so an array of all properties is unnecessary.
   *
   * @name propReduce
   * @param {FeatureCollection|Feature} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {
   *   //=previousValue
   *   //=currentProperties
   *   //=featureIndex
   *   return currentProperties
   * });
   */
  function propReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    propEach(geojson, function (currentProperties, featureIndex) {
      if (featureIndex === 0 && initialValue === undefined)
        previousValue = currentProperties;
      else
        previousValue = callback(previousValue, currentProperties, featureIndex);
    });
    return previousValue;
  }

  /**
   * Callback for featureEach
   *
   * @callback featureEachCallback
   * @param {Feature<any>} currentFeature The current Feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Iterate over features in any GeoJSON object, similar to
   * Array.forEach.
   *
   * @name featureEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentFeature, featureIndex)
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {foo: 'bar'}),
   *   turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.featureEach(features, function (currentFeature, featureIndex) {
   *   //=currentFeature
   *   //=featureIndex
   * });
   */
  function featureEach(geojson, callback) {
    if (geojson.type === "Feature") {
      callback(geojson, 0);
    } else if (geojson.type === "FeatureCollection") {
      for (var i = 0; i < geojson.features.length; i++) {
        if (callback(geojson.features[i], i) === false) break;
      }
    }
  }

  /**
   * Callback for featureReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback featureReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature} currentFeature The current Feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   */

  /**
   * Reduce features in any GeoJSON object, similar to Array.reduce().
   *
   * @name featureReduce
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {"foo": "bar"}),
   *   turf.point([36, 53], {"hello": "world"})
   * ]);
   *
   * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {
   *   //=previousValue
   *   //=currentFeature
   *   //=featureIndex
   *   return currentFeature
   * });
   */
  function featureReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    featureEach(geojson, function (currentFeature, featureIndex) {
      if (featureIndex === 0 && initialValue === undefined)
        previousValue = currentFeature;
      else previousValue = callback(previousValue, currentFeature, featureIndex);
    });
    return previousValue;
  }

  /**
   * Get all coordinates from any GeoJSON object.
   *
   * @name coordAll
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @returns {Array<Array<number>>} coordinate position array
   * @example
   * var features = turf.featureCollection([
   *   turf.point([26, 37], {foo: 'bar'}),
   *   turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * var coords = turf.coordAll(features);
   * //= [[26, 37], [36, 53]]
   */
  function coordAll(geojson) {
    var coords = [];
    coordEach(geojson, function (coord) {
      coords.push(coord);
    });
    return coords;
  }

  /**
   * Callback for geomEach
   *
   * @callback geomEachCallback
   * @param {Geometry} currentGeometry The current Geometry being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {Object} featureProperties The current Feature Properties being processed.
   * @param {Array<number>} featureBBox The current Feature BBox being processed.
   * @param {number|string} featureId The current Feature Id being processed.
   */

  /**
   * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()
   *
   * @name geomEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
   * @returns {void}
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
   *   //=currentGeometry
   *   //=featureIndex
   *   //=featureProperties
   *   //=featureBBox
   *   //=featureId
   * });
   */
  function geomEach(geojson, callback) {
    var i,
      j,
      g,
      geometry,
      stopG,
      geometryMaybeCollection,
      isGeometryCollection,
      featureProperties,
      featureBBox,
      featureId,
      featureIndex = 0,
      isFeatureCollection = geojson.type === "FeatureCollection",
      isFeature = geojson.type === "Feature",
      stop = isFeatureCollection ? geojson.features.length : 1;

    // This logic may look a little weird. The reason why it is that way
    // is because it's trying to be fast. GeoJSON supports multiple kinds
    // of objects at its root: FeatureCollection, Features, Geometries.
    // This function has the responsibility of handling all of them, and that
    // means that some of the `for` loops you see below actually just don't apply
    // to certain inputs. For instance, if you give this just a
    // Point geometry, then both loops are short-circuited and all we do
    // is gradually rename the input until it's called 'geometry'.
    //
    // This also aims to allocate as few resources as possible: just a
    // few numbers and booleans, rather than any temporary arrays as would
    // be required with the normalization approach.
    for (i = 0; i < stop; i++) {
      geometryMaybeCollection = isFeatureCollection
        ? geojson.features[i].geometry
        : isFeature
        ? geojson.geometry
        : geojson;
      featureProperties = isFeatureCollection
        ? geojson.features[i].properties
        : isFeature
        ? geojson.properties
        : {};
      featureBBox = isFeatureCollection
        ? geojson.features[i].bbox
        : isFeature
        ? geojson.bbox
        : undefined;
      featureId = isFeatureCollection
        ? geojson.features[i].id
        : isFeature
        ? geojson.id
        : undefined;
      isGeometryCollection = geometryMaybeCollection
        ? geometryMaybeCollection.type === "GeometryCollection"
        : false;
      stopG = isGeometryCollection
        ? geometryMaybeCollection.geometries.length
        : 1;

      for (g = 0; g < stopG; g++) {
        geometry = isGeometryCollection
          ? geometryMaybeCollection.geometries[g]
          : geometryMaybeCollection;

        // Handle null Geometry
        if (geometry === null) {
          if (
            callback(
              null,
              featureIndex,
              featureProperties,
              featureBBox,
              featureId
            ) === false
          )
            return false;
          continue;
        }
        switch (geometry.type) {
          case "Point":
          case "LineString":
          case "MultiPoint":
          case "Polygon":
          case "MultiLineString":
          case "MultiPolygon": {
            if (
              callback(
                geometry,
                featureIndex,
                featureProperties,
                featureBBox,
                featureId
              ) === false
            )
              return false;
            break;
          }
          case "GeometryCollection": {
            for (j = 0; j < geometry.geometries.length; j++) {
              if (
                callback(
                  geometry.geometries[j],
                  featureIndex,
                  featureProperties,
                  featureBBox,
                  featureId
                ) === false
              )
                return false;
            }
            break;
          }
          default:
            throw new Error("Unknown Geometry Type");
        }
      }
      // Only increase `featureIndex` per each feature
      featureIndex++;
    }
  }

  /**
   * Callback for geomReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback geomReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Geometry} currentGeometry The current Geometry being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {Object} featureProperties The current Feature Properties being processed.
   * @param {Array<number>} featureBBox The current Feature BBox being processed.
   * @param {number|string} featureId The current Feature Id being processed.
   */

  /**
   * Reduce geometry in any GeoJSON object, similar to Array.reduce().
   *
   * @name geomReduce
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.point([36, 53], {hello: 'world'})
   * ]);
   *
   * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
   *   //=previousValue
   *   //=currentGeometry
   *   //=featureIndex
   *   //=featureProperties
   *   //=featureBBox
   *   //=featureId
   *   return currentGeometry
   * });
   */
  function geomReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    geomEach(
      geojson,
      function (
        currentGeometry,
        featureIndex,
        featureProperties,
        featureBBox,
        featureId
      ) {
        if (featureIndex === 0 && initialValue === undefined)
          previousValue = currentGeometry;
        else
          previousValue = callback(
            previousValue,
            currentGeometry,
            featureIndex,
            featureProperties,
            featureBBox,
            featureId
          );
      }
    );
    return previousValue;
  }

  /**
   * Callback for flattenEach
   *
   * @callback flattenEachCallback
   * @param {Feature} currentFeature The current flattened feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   */

  /**
   * Iterate over flattened features in any GeoJSON object, similar to
   * Array.forEach.
   *
   * @name flattenEach
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
   * ]);
   *
   * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {
   *   //=currentFeature
   *   //=featureIndex
   *   //=multiFeatureIndex
   * });
   */
  function flattenEach(geojson, callback) {
    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {
      // Callback for single geometry
      var type = geometry === null ? null : geometry.type;
      switch (type) {
        case null:
        case "Point":
        case "LineString":
        case "Polygon":
          if (
            callback(
              feature(geometry, properties, { bbox: bbox, id: id }),
              featureIndex,
              0
            ) === false
          )
            return false;
          return;
      }

      var geomType;

      // Callback for multi-geometry
      switch (type) {
        case "MultiPoint":
          geomType = "Point";
          break;
        case "MultiLineString":
          geomType = "LineString";
          break;
        case "MultiPolygon":
          geomType = "Polygon";
          break;
      }

      for (
        var multiFeatureIndex = 0;
        multiFeatureIndex < geometry.coordinates.length;
        multiFeatureIndex++
      ) {
        var coordinate = geometry.coordinates[multiFeatureIndex];
        var geom = {
          type: geomType,
          coordinates: coordinate,
        };
        if (
          callback(feature(geom, properties), featureIndex, multiFeatureIndex) ===
          false
        )
          return false;
      }
    });
  }

  /**
   * Callback for flattenReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback flattenReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature} currentFeature The current Feature being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   */

  /**
   * Reduce flattened features in any GeoJSON object, similar to Array.reduce().
   *
   * @name flattenReduce
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object
   * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var features = turf.featureCollection([
   *     turf.point([26, 37], {foo: 'bar'}),
   *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})
   * ]);
   *
   * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {
   *   //=previousValue
   *   //=currentFeature
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   return currentFeature
   * });
   */
  function flattenReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    flattenEach(
      geojson,
      function (currentFeature, featureIndex, multiFeatureIndex) {
        if (
          featureIndex === 0 &&
          multiFeatureIndex === 0 &&
          initialValue === undefined
        )
          previousValue = currentFeature;
        else
          previousValue = callback(
            previousValue,
            currentFeature,
            featureIndex,
            multiFeatureIndex
          );
      }
    );
    return previousValue;
  }

  /**
   * Callback for segmentEach
   *
   * @callback segmentEachCallback
   * @param {Feature<LineString>} currentSegment The current Segment being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   * @param {number} segmentIndex The current index of the Segment being processed.
   * @returns {void}
   */

  /**
   * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()
   * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
   * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)
   * @returns {void}
   * @example
   * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
   *
   * // Iterate over GeoJSON by 2-vertex segments
   * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
   *   //=currentSegment
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   *   //=segmentIndex
   * });
   *
   * // Calculate the total number of segments
   * var total = 0;
   * turf.segmentEach(polygon, function () {
   *     total++;
   * });
   */
  function segmentEach(geojson, callback) {
    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
      var segmentIndex = 0;

      // Exclude null Geometries
      if (!feature.geometry) return;
      // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
      var type = feature.geometry.type;
      if (type === "Point" || type === "MultiPoint") return;

      // Generate 2-vertex line segments
      var previousCoords;
      var previousFeatureIndex = 0;
      var previousMultiIndex = 0;
      var prevGeomIndex = 0;
      if (
        coordEach(
          feature,
          function (
            currentCoord,
            coordIndex,
            featureIndexCoord,
            multiPartIndexCoord,
            geometryIndex
          ) {
            // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`
            if (
              previousCoords === undefined ||
              featureIndex > previousFeatureIndex ||
              multiPartIndexCoord > previousMultiIndex ||
              geometryIndex > prevGeomIndex
            ) {
              previousCoords = currentCoord;
              previousFeatureIndex = featureIndex;
              previousMultiIndex = multiPartIndexCoord;
              prevGeomIndex = geometryIndex;
              segmentIndex = 0;
              return;
            }
            var currentSegment = lineString(
              [previousCoords, currentCoord],
              feature.properties
            );
            if (
              callback(
                currentSegment,
                featureIndex,
                multiFeatureIndex,
                geometryIndex,
                segmentIndex
              ) === false
            )
              return false;
            segmentIndex++;
            previousCoords = currentCoord;
          }
        ) === false
      )
        return false;
    });
  }

  /**
   * Callback for segmentReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback segmentReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature<LineString>} currentSegment The current Segment being processed.
   * @param {number} featureIndex The current index of the Feature being processed.
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.
   * @param {number} geometryIndex The current index of the Geometry being processed.
   * @param {number} segmentIndex The current index of the Segment being processed.
   */

  /**
   * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()
   * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON
   * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {void}
   * @example
   * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
   *
   * // Iterate over GeoJSON by 2-vertex segments
   * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
   *   //= previousSegment
   *   //= currentSegment
   *   //= featureIndex
   *   //= multiFeatureIndex
   *   //= geometryIndex
   *   //= segmentIndex
   *   return currentSegment
   * });
   *
   * // Calculate the total number of segments
   * var initialValue = 0
   * var total = turf.segmentReduce(polygon, function (previousValue) {
   *     previousValue++;
   *     return previousValue;
   * }, initialValue);
   */
  function segmentReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    var started = false;
    segmentEach(
      geojson,
      function (
        currentSegment,
        featureIndex,
        multiFeatureIndex,
        geometryIndex,
        segmentIndex
      ) {
        if (started === false && initialValue === undefined)
          previousValue = currentSegment;
        else
          previousValue = callback(
            previousValue,
            currentSegment,
            featureIndex,
            multiFeatureIndex,
            geometryIndex,
            segmentIndex
          );
        started = true;
      }
    );
    return previousValue;
  }

  /**
   * Callback for lineEach
   *
   * @callback lineEachCallback
   * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed
   * @param {number} featureIndex The current index of the Feature being processed
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
   * @param {number} geometryIndex The current index of the Geometry being processed
   */

  /**
   * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,
   * similar to Array.forEach.
   *
   * @name lineEach
   * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
   * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)
   * @example
   * var multiLine = turf.multiLineString([
   *   [[26, 37], [35, 45]],
   *   [[36, 53], [38, 50], [41, 55]]
   * ]);
   *
   * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=currentLine
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   * });
   */
  function lineEach(geojson, callback) {
    // validation
    if (!geojson) throw new Error("geojson is required");

    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {
      if (feature.geometry === null) return;
      var type = feature.geometry.type;
      var coords = feature.geometry.coordinates;
      switch (type) {
        case "LineString":
          if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false)
            return false;
          break;
        case "Polygon":
          for (
            var geometryIndex = 0;
            geometryIndex < coords.length;
            geometryIndex++
          ) {
            if (
              callback(
                lineString(coords[geometryIndex], feature.properties),
                featureIndex,
                multiFeatureIndex,
                geometryIndex
              ) === false
            )
              return false;
          }
          break;
      }
    });
  }

  /**
   * Callback for lineReduce
   *
   * The first time the callback function is called, the values provided as arguments depend
   * on whether the reduce method has an initialValue argument.
   *
   * If an initialValue is provided to the reduce method:
   *  - The previousValue argument is initialValue.
   *  - The currentValue argument is the value of the first element present in the array.
   *
   * If an initialValue is not provided:
   *  - The previousValue argument is the value of the first element present in the array.
   *  - The currentValue argument is the value of the second element present in the array.
   *
   * @callback lineReduceCallback
   * @param {*} previousValue The accumulated value previously returned in the last invocation
   * of the callback, or initialValue, if supplied.
   * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.
   * @param {number} featureIndex The current index of the Feature being processed
   * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed
   * @param {number} geometryIndex The current index of the Geometry being processed
   */

  /**
   * Reduce features in any GeoJSON object, similar to Array.reduce().
   *
   * @name lineReduce
   * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object
   * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)
   * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.
   * @returns {*} The value that results from the reduction.
   * @example
   * var multiPoly = turf.multiPolygon([
   *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),
   *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])
   * ]);
   *
   * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
   *   //=previousValue
   *   //=currentLine
   *   //=featureIndex
   *   //=multiFeatureIndex
   *   //=geometryIndex
   *   return currentLine
   * });
   */
  function lineReduce(geojson, callback, initialValue) {
    var previousValue = initialValue;
    lineEach(
      geojson,
      function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
        if (featureIndex === 0 && initialValue === undefined)
          previousValue = currentLine;
        else
          previousValue = callback(
            previousValue,
            currentLine,
            featureIndex,
            multiFeatureIndex,
            geometryIndex
          );
      }
    );
    return previousValue;
  }

  /**
   * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.
   *
   * Negative indexes are permitted.
   * Point & MultiPoint will always return null.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.featureIndex=0] Feature Index
   * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
   * @param {number} [options.geometryIndex=0] Geometry Index
   * @param {number} [options.segmentIndex=0] Segment Index
   * @param {Object} [options.properties={}] Translate Properties to output LineString
   * @param {BBox} [options.bbox={}] Translate BBox to output LineString
   * @param {number|string} [options.id={}] Translate Id to output LineString
   * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString
   * @example
   * var multiLine = turf.multiLineString([
   *     [[10, 10], [50, 30], [30, 40]],
   *     [[-10, -10], [-50, -30], [-30, -40]]
   * ]);
   *
   * // First Segment (defaults are 0)
   * turf.findSegment(multiLine);
   * // => Feature<LineString<[[10, 10], [50, 30]]>>
   *
   * // First Segment of 2nd Multi Feature
   * turf.findSegment(multiLine, {multiFeatureIndex: 1});
   * // => Feature<LineString<[[-10, -10], [-50, -30]]>>
   *
   * // Last Segment of Last Multi Feature
   * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});
   * // => Feature<LineString<[[-50, -30], [-30, -40]]>>
   */
  function findSegment(geojson, options) {
    // Optional Parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var featureIndex = options.featureIndex || 0;
    var multiFeatureIndex = options.multiFeatureIndex || 0;
    var geometryIndex = options.geometryIndex || 0;
    var segmentIndex = options.segmentIndex || 0;

    // Find FeatureIndex
    var properties = options.properties;
    var geometry;

    switch (geojson.type) {
      case "FeatureCollection":
        if (featureIndex < 0)
          featureIndex = geojson.features.length + featureIndex;
        properties = properties || geojson.features[featureIndex].properties;
        geometry = geojson.features[featureIndex].geometry;
        break;
      case "Feature":
        properties = properties || geojson.properties;
        geometry = geojson.geometry;
        break;
      case "Point":
      case "MultiPoint":
        return null;
      case "LineString":
      case "Polygon":
      case "MultiLineString":
      case "MultiPolygon":
        geometry = geojson;
        break;
      default:
        throw new Error("geojson is invalid");
    }

    // Find SegmentIndex
    if (geometry === null) return null;
    var coords = geometry.coordinates;
    switch (geometry.type) {
      case "Point":
      case "MultiPoint":
        return null;
      case "LineString":
        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;
        return lineString(
          [coords[segmentIndex], coords[segmentIndex + 1]],
          properties,
          options
        );
      case "Polygon":
        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
        if (segmentIndex < 0)
          segmentIndex = coords[geometryIndex].length + segmentIndex - 1;
        return lineString(
          [
            coords[geometryIndex][segmentIndex],
            coords[geometryIndex][segmentIndex + 1],
          ],
          properties,
          options
        );
      case "MultiLineString":
        if (multiFeatureIndex < 0)
          multiFeatureIndex = coords.length + multiFeatureIndex;
        if (segmentIndex < 0)
          segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;
        return lineString(
          [
            coords[multiFeatureIndex][segmentIndex],
            coords[multiFeatureIndex][segmentIndex + 1],
          ],
          properties,
          options
        );
      case "MultiPolygon":
        if (multiFeatureIndex < 0)
          multiFeatureIndex = coords.length + multiFeatureIndex;
        if (geometryIndex < 0)
          geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
        if (segmentIndex < 0)
          segmentIndex =
            coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;
        return lineString(
          [
            coords[multiFeatureIndex][geometryIndex][segmentIndex],
            coords[multiFeatureIndex][geometryIndex][segmentIndex + 1],
          ],
          properties,
          options
        );
    }
    throw new Error("geojson is invalid");
  }

  /**
   * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.
   *
   * Negative indexes are permitted.
   *
   * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.featureIndex=0] Feature Index
   * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index
   * @param {number} [options.geometryIndex=0] Geometry Index
   * @param {number} [options.coordIndex=0] Coord Index
   * @param {Object} [options.properties={}] Translate Properties to output Point
   * @param {BBox} [options.bbox={}] Translate BBox to output Point
   * @param {number|string} [options.id={}] Translate Id to output Point
   * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point
   * @example
   * var multiLine = turf.multiLineString([
   *     [[10, 10], [50, 30], [30, 40]],
   *     [[-10, -10], [-50, -30], [-30, -40]]
   * ]);
   *
   * // First Segment (defaults are 0)
   * turf.findPoint(multiLine);
   * // => Feature<Point<[10, 10]>>
   *
   * // First Segment of the 2nd Multi-Feature
   * turf.findPoint(multiLine, {multiFeatureIndex: 1});
   * // => Feature<Point<[-10, -10]>>
   *
   * // Last Segment of last Multi-Feature
   * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});
   * // => Feature<Point<[-30, -40]>>
   */
  function findPoint(geojson, options) {
    // Optional Parameters
    options = options || {};
    if (!isObject(options)) throw new Error("options is invalid");
    var featureIndex = options.featureIndex || 0;
    var multiFeatureIndex = options.multiFeatureIndex || 0;
    var geometryIndex = options.geometryIndex || 0;
    var coordIndex = options.coordIndex || 0;

    // Find FeatureIndex
    var properties = options.properties;
    var geometry;

    switch (geojson.type) {
      case "FeatureCollection":
        if (featureIndex < 0)
          featureIndex = geojson.features.length + featureIndex;
        properties = properties || geojson.features[featureIndex].properties;
        geometry = geojson.features[featureIndex].geometry;
        break;
      case "Feature":
        properties = properties || geojson.properties;
        geometry = geojson.geometry;
        break;
      case "Point":
      case "MultiPoint":
        return null;
      case "LineString":
      case "Polygon":
      case "MultiLineString":
      case "MultiPolygon":
        geometry = geojson;
        break;
      default:
        throw new Error("geojson is invalid");
    }

    // Find Coord Index
    if (geometry === null) return null;
    var coords = geometry.coordinates;
    switch (geometry.type) {
      case "Point":
        return point(coords, properties, options);
      case "MultiPoint":
        if (multiFeatureIndex < 0)
          multiFeatureIndex = coords.length + multiFeatureIndex;
        return point(coords[multiFeatureIndex], properties, options);
      case "LineString":
        if (coordIndex < 0) coordIndex = coords.length + coordIndex;
        return point(coords[coordIndex], properties, options);
      case "Polygon":
        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;
        if (coordIndex < 0)
          coordIndex = coords[geometryIndex].length + coordIndex;
        return point(coords[geometryIndex][coordIndex], properties, options);
      case "MultiLineString":
        if (multiFeatureIndex < 0)
          multiFeatureIndex = coords.length + multiFeatureIndex;
        if (coordIndex < 0)
          coordIndex = coords[multiFeatureIndex].length + coordIndex;
        return point(coords[multiFeatureIndex][coordIndex], properties, options);
      case "MultiPolygon":
        if (multiFeatureIndex < 0)
          multiFeatureIndex = coords.length + multiFeatureIndex;
        if (geometryIndex < 0)
          geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
        if (coordIndex < 0)
          coordIndex =
            coords[multiFeatureIndex][geometryIndex].length - coordIndex;
        return point(
          coords[multiFeatureIndex][geometryIndex][coordIndex],
          properties,
          options
        );
    }
    throw new Error("geojson is invalid");
  }

  var es$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    coordAll: coordAll,
    coordEach: coordEach,
    coordReduce: coordReduce,
    featureEach: featureEach,
    featureReduce: featureReduce,
    findPoint: findPoint,
    findSegment: findSegment,
    flattenEach: flattenEach,
    flattenReduce: flattenReduce,
    geomEach: geomEach,
    geomReduce: geomReduce,
    lineEach: lineEach,
    lineReduce: lineReduce,
    propEach: propEach,
    propReduce: propReduce,
    segmentEach: segmentEach,
    segmentReduce: segmentReduce
  });

  /**
   * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.
   *
   * @name bbox
   * @param {GeoJSON} geojson any GeoJSON object
   * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order
   * @example
   * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);
   * var bbox = turf.bbox(line);
   * var bboxPolygon = turf.bboxPolygon(bbox);
   *
   * //addToMap
   * var addToMap = [line, bboxPolygon]
   */
  function bbox(geojson) {
      var result = [Infinity, Infinity, -Infinity, -Infinity];
      coordEach(geojson, function (coord) {
          if (result[0] > coord[0]) {
              result[0] = coord[0];
          }
          if (result[1] > coord[1]) {
              result[1] = coord[1];
          }
          if (result[2] < coord[0]) {
              result[2] = coord[0];
          }
          if (result[3] < coord[1]) {
              result[3] = coord[1];
          }
      });
      return result;
  }
  bbox["default"] = bbox;

  /**
   * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.
   *
   * @name getCoord
   * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers
   * @returns {Array<number>} coordinates
   * @example
   * var pt = turf.point([10, 10]);
   *
   * var coord = turf.getCoord(pt);
   * //= [10, 10]
   */
  function getCoord(coord) {
      if (!coord) {
          throw new Error("coord is required");
      }
      if (!Array.isArray(coord)) {
          if (coord.type === "Feature" &&
              coord.geometry !== null &&
              coord.geometry.type === "Point") {
              return coord.geometry.coordinates;
          }
          if (coord.type === "Point") {
              return coord.coordinates;
          }
      }
      if (Array.isArray(coord) &&
          coord.length >= 2 &&
          !Array.isArray(coord[0]) &&
          !Array.isArray(coord[1])) {
          return coord;
      }
      throw new Error("coord must be GeoJSON Point or an Array of numbers");
  }
  /**
   * Unwrap coordinates from a Feature, Geometry Object or an Array
   *
   * @name getCoords
   * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array
   * @returns {Array<any>} coordinates
   * @example
   * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);
   *
   * var coords = turf.getCoords(poly);
   * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]
   */
  function getCoords(coords) {
      if (Array.isArray(coords)) {
          return coords;
      }
      // Feature
      if (coords.type === "Feature") {
          if (coords.geometry !== null) {
              return coords.geometry.coordinates;
          }
      }
      else {
          // Geometry
          if (coords.coordinates) {
              return coords.coordinates;
          }
      }
      throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array");
  }
  /**
   * Get Geometry from Feature or Geometry Object
   *
   * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object
   * @returns {Geometry|null} GeoJSON Geometry Object
   * @throws {Error} if geojson is not a Feature or Geometry Object
   * @example
   * var point = {
   *   "type": "Feature",
   *   "properties": {},
   *   "geometry": {
   *     "type": "Point",
   *     "coordinates": [110, 40]
   *   }
   * }
   * var geom = turf.getGeom(point)
   * //={"type": "Point", "coordinates": [110, 40]}
   */
  function getGeom(geojson) {
      if (geojson.type === "Feature") {
          return geojson.geometry;
      }
      return geojson;
  }
  /**
   * Get GeoJSON object's type, Geometry type is prioritize.
   *
   * @param {GeoJSON} geojson GeoJSON object
   * @param {string} [name="geojson"] name of the variable to display in error message (unused)
   * @returns {string} GeoJSON type
   * @example
   * var point = {
   *   "type": "Feature",
   *   "properties": {},
   *   "geometry": {
   *     "type": "Point",
   *     "coordinates": [110, 40]
   *   }
   * }
   * var geom = turf.getType(point)
   * //="Point"
   */
  function getType(geojson, _name) {
      if (geojson.type === "FeatureCollection") {
          return "FeatureCollection";
      }
      if (geojson.type === "GeometryCollection") {
          return "GeometryCollection";
      }
      if (geojson.type === "Feature" && geojson.geometry !== null) {
          return geojson.geometry.type;
      }
      return geojson.type;
  }

  function quickselect(arr, k, left, right, compare) {
      quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);
  }

  function quickselectStep(arr, k, left, right, compare) {

      while (right > left) {
          if (right - left > 600) {
              var n = right - left + 1;
              var m = k - left + 1;
              var z = Math.log(n);
              var s = 0.5 * Math.exp(2 * z / 3);
              var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
              var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
              var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
              quickselectStep(arr, k, newLeft, newRight, compare);
          }

          var t = arr[k];
          var i = left;
          var j = right;

          swap(arr, left, k);
          if (compare(arr[right], t) > 0) swap(arr, left, right);

          while (i < j) {
              swap(arr, i, j);
              i++;
              j--;
              while (compare(arr[i], t) < 0) i++;
              while (compare(arr[j], t) > 0) j--;
          }

          if (compare(arr[left], t) === 0) swap(arr, left, j);
          else {
              j++;
              swap(arr, j, right);
          }

          if (j <= k) left = j + 1;
          if (k <= j) right = j - 1;
      }
  }

  function swap(arr, i, j) {
      var tmp = arr[i];
      arr[i] = arr[j];
      arr[j] = tmp;
  }

  function defaultCompare(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
  }

  class RBush {
      constructor(maxEntries = 9) {
          // max entries in a node is 9 by default; min node fill is 40% for best performance
          this._maxEntries = Math.max(4, maxEntries);
          this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));
          this.clear();
      }

      all() {
          return this._all(this.data, []);
      }

      search(bbox) {
          let node = this.data;
          const result = [];

          if (!intersects(bbox, node)) return result;

          const toBBox = this.toBBox;
          const nodesToSearch = [];

          while (node) {
              for (let i = 0; i < node.children.length; i++) {
                  const child = node.children[i];
                  const childBBox = node.leaf ? toBBox(child) : child;

                  if (intersects(bbox, childBBox)) {
                      if (node.leaf) result.push(child);
                      else if (contains$1(bbox, childBBox)) this._all(child, result);
                      else nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return result;
      }

      collides(bbox) {
          let node = this.data;

          if (!intersects(bbox, node)) return false;

          const nodesToSearch = [];
          while (node) {
              for (let i = 0; i < node.children.length; i++) {
                  const child = node.children[i];
                  const childBBox = node.leaf ? this.toBBox(child) : child;

                  if (intersects(bbox, childBBox)) {
                      if (node.leaf || contains$1(bbox, childBBox)) return true;
                      nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return false;
      }

      load(data) {
          if (!(data && data.length)) return this;

          if (data.length < this._minEntries) {
              for (let i = 0; i < data.length; i++) {
                  this.insert(data[i]);
              }
              return this;
          }

          // recursively build the tree with the given data from scratch using OMT algorithm
          let node = this._build(data.slice(), 0, data.length - 1, 0);

          if (!this.data.children.length) {
              // save as is if tree is empty
              this.data = node;

          } else if (this.data.height === node.height) {
              // split root if trees have the same height
              this._splitRoot(this.data, node);

          } else {
              if (this.data.height < node.height) {
                  // swap trees if inserted one is bigger
                  const tmpNode = this.data;
                  this.data = node;
                  node = tmpNode;
              }

              // insert the small tree into the large tree at appropriate level
              this._insert(node, this.data.height - node.height - 1, true);
          }

          return this;
      }

      insert(item) {
          if (item) this._insert(item, this.data.height - 1);
          return this;
      }

      clear() {
          this.data = createNode([]);
          return this;
      }

      remove(item, equalsFn) {
          if (!item) return this;

          let node = this.data;
          const bbox = this.toBBox(item);
          const path = [];
          const indexes = [];
          let i, parent, goingUp;

          // depth-first iterative tree traversal
          while (node || path.length) {

              if (!node) { // go up
                  node = path.pop();
                  parent = path[path.length - 1];
                  i = indexes.pop();
                  goingUp = true;
              }

              if (node.leaf) { // check current node
                  const index = findItem(item, node.children, equalsFn);

                  if (index !== -1) {
                      // item found, remove the item and condense tree upwards
                      node.children.splice(index, 1);
                      path.push(node);
                      this._condense(path);
                      return this;
                  }
              }

              if (!goingUp && !node.leaf && contains$1(node, bbox)) { // go down
                  path.push(node);
                  indexes.push(i);
                  i = 0;
                  parent = node;
                  node = node.children[0];

              } else if (parent) { // go right
                  i++;
                  node = parent.children[i];
                  goingUp = false;

              } else node = null; // nothing found
          }

          return this;
      }

      toBBox(item) { return item; }

      compareMinX(a, b) { return a.minX - b.minX; }
      compareMinY(a, b) { return a.minY - b.minY; }

      toJSON() { return this.data; }

      fromJSON(data) {
          this.data = data;
          return this;
      }

      _all(node, result) {
          const nodesToSearch = [];
          while (node) {
              if (node.leaf) result.push(...node.children);
              else nodesToSearch.push(...node.children);

              node = nodesToSearch.pop();
          }
          return result;
      }

      _build(items, left, right, height) {

          const N = right - left + 1;
          let M = this._maxEntries;
          let node;

          if (N <= M) {
              // reached leaf level; return leaf
              node = createNode(items.slice(left, right + 1));
              calcBBox(node, this.toBBox);
              return node;
          }

          if (!height) {
              // target height of the bulk-loaded tree
              height = Math.ceil(Math.log(N) / Math.log(M));

              // target number of root entries to maximize storage utilization
              M = Math.ceil(N / Math.pow(M, height - 1));
          }

          node = createNode([]);
          node.leaf = false;
          node.height = height;

          // split the items into M mostly square tiles

          const N2 = Math.ceil(N / M);
          const N1 = N2 * Math.ceil(Math.sqrt(M));

          multiSelect(items, left, right, N1, this.compareMinX);

          for (let i = left; i <= right; i += N1) {

              const right2 = Math.min(i + N1 - 1, right);

              multiSelect(items, i, right2, N2, this.compareMinY);

              for (let j = i; j <= right2; j += N2) {

                  const right3 = Math.min(j + N2 - 1, right2);

                  // pack each entry recursively
                  node.children.push(this._build(items, j, right3, height - 1));
              }
          }

          calcBBox(node, this.toBBox);

          return node;
      }

      _chooseSubtree(bbox, node, level, path) {
          while (true) {
              path.push(node);

              if (node.leaf || path.length - 1 === level) break;

              let minArea = Infinity;
              let minEnlargement = Infinity;
              let targetNode;

              for (let i = 0; i < node.children.length; i++) {
                  const child = node.children[i];
                  const area = bboxArea(child);
                  const enlargement = enlargedArea(bbox, child) - area;

                  // choose entry with the least area enlargement
                  if (enlargement < minEnlargement) {
                      minEnlargement = enlargement;
                      minArea = area < minArea ? area : minArea;
                      targetNode = child;

                  } else if (enlargement === minEnlargement) {
                      // otherwise choose one with the smallest area
                      if (area < minArea) {
                          minArea = area;
                          targetNode = child;
                      }
                  }
              }

              node = targetNode || node.children[0];
          }

          return node;
      }

      _insert(item, level, isNode) {
          const bbox = isNode ? item : this.toBBox(item);
          const insertPath = [];

          // find the best node for accommodating the item, saving all nodes along the path too
          const node = this._chooseSubtree(bbox, this.data, level, insertPath);

          // put the item into the node
          node.children.push(item);
          extend(node, bbox);

          // split on node overflow; propagate upwards if necessary
          while (level >= 0) {
              if (insertPath[level].children.length > this._maxEntries) {
                  this._split(insertPath, level);
                  level--;
              } else break;
          }

          // adjust bboxes along the insertion path
          this._adjustParentBBoxes(bbox, insertPath, level);
      }

      // split overflowed node into two
      _split(insertPath, level) {
          const node = insertPath[level];
          const M = node.children.length;
          const m = this._minEntries;

          this._chooseSplitAxis(node, m, M);

          const splitIndex = this._chooseSplitIndex(node, m, M);

          const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
          newNode.height = node.height;
          newNode.leaf = node.leaf;

          calcBBox(node, this.toBBox);
          calcBBox(newNode, this.toBBox);

          if (level) insertPath[level - 1].children.push(newNode);
          else this._splitRoot(node, newNode);
      }

      _splitRoot(node, newNode) {
          // split root node
          this.data = createNode([node, newNode]);
          this.data.height = node.height + 1;
          this.data.leaf = false;
          calcBBox(this.data, this.toBBox);
      }

      _chooseSplitIndex(node, m, M) {
          let index;
          let minOverlap = Infinity;
          let minArea = Infinity;

          for (let i = m; i <= M - m; i++) {
              const bbox1 = distBBox(node, 0, i, this.toBBox);
              const bbox2 = distBBox(node, i, M, this.toBBox);

              const overlap = intersectionArea(bbox1, bbox2);
              const area = bboxArea(bbox1) + bboxArea(bbox2);

              // choose distribution with minimum overlap
              if (overlap < minOverlap) {
                  minOverlap = overlap;
                  index = i;

                  minArea = area < minArea ? area : minArea;

              } else if (overlap === minOverlap) {
                  // otherwise choose distribution with minimum area
                  if (area < minArea) {
                      minArea = area;
                      index = i;
                  }
              }
          }

          return index || M - m;
      }

      // sorts node children by the best axis for split
      _chooseSplitAxis(node, m, M) {
          const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;
          const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;
          const xMargin = this._allDistMargin(node, m, M, compareMinX);
          const yMargin = this._allDistMargin(node, m, M, compareMinY);

          // if total distributions margin value is minimal for x, sort by minX,
          // otherwise it's already sorted by minY
          if (xMargin < yMargin) node.children.sort(compareMinX);
      }

      // total margin of all possible split distributions where each node is at least m full
      _allDistMargin(node, m, M, compare) {
          node.children.sort(compare);

          const toBBox = this.toBBox;
          const leftBBox = distBBox(node, 0, m, toBBox);
          const rightBBox = distBBox(node, M - m, M, toBBox);
          let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);

          for (let i = m; i < M - m; i++) {
              const child = node.children[i];
              extend(leftBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin(leftBBox);
          }

          for (let i = M - m - 1; i >= m; i--) {
              const child = node.children[i];
              extend(rightBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin(rightBBox);
          }

          return margin;
      }

      _adjustParentBBoxes(bbox, path, level) {
          // adjust bboxes along the given tree path
          for (let i = level; i >= 0; i--) {
              extend(path[i], bbox);
          }
      }

      _condense(path) {
          // go through the path, removing empty nodes and updating bboxes
          for (let i = path.length - 1, siblings; i >= 0; i--) {
              if (path[i].children.length === 0) {
                  if (i > 0) {
                      siblings = path[i - 1].children;
                      siblings.splice(siblings.indexOf(path[i]), 1);

                  } else this.clear();

              } else calcBBox(path[i], this.toBBox);
          }
      }
  }

  function findItem(item, items, equalsFn) {
      if (!equalsFn) return items.indexOf(item);

      for (let i = 0; i < items.length; i++) {
          if (equalsFn(item, items[i])) return i;
      }
      return -1;
  }

  // calculate node's bbox from bboxes of its children
  function calcBBox(node, toBBox) {
      distBBox(node, 0, node.children.length, toBBox, node);
  }

  // min bounding rectangle of node children from k to p-1
  function distBBox(node, k, p, toBBox, destNode) {
      if (!destNode) destNode = createNode(null);
      destNode.minX = Infinity;
      destNode.minY = Infinity;
      destNode.maxX = -Infinity;
      destNode.maxY = -Infinity;

      for (let i = k; i < p; i++) {
          const child = node.children[i];
          extend(destNode, node.leaf ? toBBox(child) : child);
      }

      return destNode;
  }

  function extend(a, b) {
      a.minX = Math.min(a.minX, b.minX);
      a.minY = Math.min(a.minY, b.minY);
      a.maxX = Math.max(a.maxX, b.maxX);
      a.maxY = Math.max(a.maxY, b.maxY);
      return a;
  }

  function compareNodeMinX(a, b) { return a.minX - b.minX; }
  function compareNodeMinY(a, b) { return a.minY - b.minY; }

  function bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }
  function bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }

  function enlargedArea(a, b) {
      return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
             (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
  }

  function intersectionArea(a, b) {
      const minX = Math.max(a.minX, b.minX);
      const minY = Math.max(a.minY, b.minY);
      const maxX = Math.min(a.maxX, b.maxX);
      const maxY = Math.min(a.maxY, b.maxY);

      return Math.max(0, maxX - minX) *
             Math.max(0, maxY - minY);
  }

  function contains$1(a, b) {
      return a.minX <= b.minX &&
             a.minY <= b.minY &&
             b.maxX <= a.maxX &&
             b.maxY <= a.maxY;
  }

  function intersects(a, b) {
      return b.minX <= a.maxX &&
             b.minY <= a.maxY &&
             b.maxX >= a.minX &&
             b.maxY >= a.minY;
  }

  function createNode(children) {
      return {
          children,
          height: 1,
          leaf: true,
          minX: Infinity,
          minY: Infinity,
          maxX: -Infinity,
          maxY: -Infinity
      };
  }

  // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
  // combines selection algorithm with binary divide & conquer approach

  function multiSelect(arr, left, right, n, compare) {
      const stack = [left, right];

      while (stack.length) {
          right = stack.pop();
          left = stack.pop();

          if (right - left <= n) continue;

          const mid = left + Math.ceil((right - left) / n / 2) * n;
          quickselect(arr, mid, left, right, compare);

          stack.push(left, mid, mid, right);
      }
  }

  var rbush = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': RBush
  });

  class TinyQueue {
      constructor(data = [], compare = defaultCompare$1) {
          this.data = data;
          this.length = this.data.length;
          this.compare = compare;

          if (this.length > 0) {
              for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);
          }
      }

      push(item) {
          this.data.push(item);
          this.length++;
          this._up(this.length - 1);
      }

      pop() {
          if (this.length === 0) return undefined;

          const top = this.data[0];
          const bottom = this.data.pop();
          this.length--;

          if (this.length > 0) {
              this.data[0] = bottom;
              this._down(0);
          }

          return top;
      }

      peek() {
          return this.data[0];
      }

      _up(pos) {
          const {data, compare} = this;
          const item = data[pos];

          while (pos > 0) {
              const parent = (pos - 1) >> 1;
              const current = data[parent];
              if (compare(item, current) >= 0) break;
              data[pos] = current;
              pos = parent;
          }

          data[pos] = item;
      }

      _down(pos) {
          const {data, compare} = this;
          const halfLength = this.length >> 1;
          const item = data[pos];

          while (pos < halfLength) {
              let left = (pos << 1) + 1;
              let best = data[left];
              const right = left + 1;

              if (right < this.length && compare(data[right], best) < 0) {
                  left = right;
                  best = data[right];
              }
              if (compare(best, item) >= 0) break;

              data[pos] = best;
              pos = left;
          }

          data[pos] = item;
      }
  }

  function defaultCompare$1(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
  }

  var tinyqueue = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': TinyQueue
  });

  var flat = function pointInPolygonFlat (point, vs, start, end) {
      var x = point[0], y = point[1];
      var inside = false;
      if (start === undefined) start = 0;
      if (end === undefined) end = vs.length;
      var len = (end-start)/2;
      for (var i = 0, j = len - 1; i < len; j = i++) {
          var xi = vs[start+i*2+0], yi = vs[start+i*2+1];
          var xj = vs[start+j*2+0], yj = vs[start+j*2+1];
          var intersect = ((yi > y) !== (yj > y))
              && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
          if (intersect) inside = !inside;
      }
      return inside;
  };

  // ray-casting algorithm based on
  // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html

  var nested = function pointInPolygonNested (point, vs, start, end) {
      var x = point[0], y = point[1];
      var inside = false;
      if (start === undefined) start = 0;
      if (end === undefined) end = vs.length;
      var len = end - start;
      for (var i = 0, j = len - 1; i < len; j = i++) {
          var xi = vs[i+start][0], yi = vs[i+start][1];
          var xj = vs[j+start][0], yj = vs[j+start][1];
          var intersect = ((yi > y) !== (yj > y))
              && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
          if (intersect) inside = !inside;
      }
      return inside;
  };

  var pointInPolygon = function pointInPolygon (point, vs, start, end) {
      if (vs.length > 0 && Array.isArray(vs[0])) {
          return nested(point, vs, start, end);
      } else {
          return flat(point, vs, start, end);
      }
  };
  var nested$1 = nested;
  var flat$1 = flat;
  pointInPolygon.nested = nested$1;
  pointInPolygon.flat = flat$1;

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, basedir, module) {
  	return module = {
  		path: basedir,
  		exports: {},
  		require: function (path, base) {
  			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
  		}
  	}, fn(module, module.exports), module.exports;
  }

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
  }

  var orient2d_min = createCommonjsModule(function (module, exports) {
  !function(t,e){e(exports);}(commonjsGlobal,function(t){const e=134217729,n=33306690738754706e-32;function r(t,e,n,r,o){let f,i,u,c,s=e[0],a=r[0],d=0,l=0;a>s==a>-s?(f=s,s=e[++d]):(f=a,a=r[++l]);let p=0;if(d<t&&l<n)for(a>s==a>-s?(u=f-((i=s+f)-s),s=e[++d]):(u=f-((i=a+f)-a),a=r[++l]),f=i,0!==u&&(o[p++]=u);d<t&&l<n;)a>s==a>-s?(u=f-((i=f+s)-(c=i-f))+(s-c),s=e[++d]):(u=f-((i=f+a)-(c=i-f))+(a-c),a=r[++l]),f=i,0!==u&&(o[p++]=u);for(;d<t;)u=f-((i=f+s)-(c=i-f))+(s-c),s=e[++d],f=i,0!==u&&(o[p++]=u);for(;l<n;)u=f-((i=f+a)-(c=i-f))+(a-c),a=r[++l],f=i,0!==u&&(o[p++]=u);return 0===f&&0!==p||(o[p++]=f),p}function o(t){return new Float64Array(t)}const f=33306690738754716e-32,i=22204460492503146e-32,u=11093356479670487e-47,c=o(4),s=o(8),a=o(12),d=o(16),l=o(4);t.orient2d=function(t,o,p,b,y,h){const M=(o-h)*(p-y),x=(t-y)*(b-h),j=M-x;if(0===M||0===x||M>0!=x>0)return j;const m=Math.abs(M+x);return Math.abs(j)>=f*m?j:-function(t,o,f,p,b,y,h){let M,x,j,m,_,v,w,A,F,O,P,g,k,q,z,B,C,D;const E=t-b,G=f-b,H=o-y,I=p-y;_=(z=(A=E-(w=(v=e*E)-(v-E)))*(O=I-(F=(v=e*I)-(v-I)))-((q=E*I)-w*F-A*F-w*O))-(P=z-(C=(A=H-(w=(v=e*H)-(v-H)))*(O=G-(F=(v=e*G)-(v-G)))-((B=H*G)-w*F-A*F-w*O))),c[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),c[1]=k-(P+_)+(_-B),_=(D=g+P)-g,c[2]=g-(D-_)+(P-_),c[3]=D;let J=function(t,e){let n=e[0];for(let r=1;r<t;r++)n+=e[r];return n}(4,c),K=i*h;if(J>=K||-J>=K)return J;if(M=t-(E+(_=t-E))+(_-b),j=f-(G+(_=f-G))+(_-b),x=o-(H+(_=o-H))+(_-y),m=p-(I+(_=p-I))+(_-y),0===M&&0===x&&0===j&&0===m)return J;if(K=u*h+n*Math.abs(J),(J+=E*m+I*M-(H*j+G*x))>=K||-J>=K)return J;_=(z=(A=M-(w=(v=e*M)-(v-M)))*(O=I-(F=(v=e*I)-(v-I)))-((q=M*I)-w*F-A*F-w*O))-(P=z-(C=(A=x-(w=(v=e*x)-(v-x)))*(O=G-(F=(v=e*G)-(v-G)))-((B=x*G)-w*F-A*F-w*O))),l[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),l[1]=k-(P+_)+(_-B),_=(D=g+P)-g,l[2]=g-(D-_)+(P-_),l[3]=D;const L=r(4,c,4,l,s);_=(z=(A=E-(w=(v=e*E)-(v-E)))*(O=m-(F=(v=e*m)-(v-m)))-((q=E*m)-w*F-A*F-w*O))-(P=z-(C=(A=H-(w=(v=e*H)-(v-H)))*(O=j-(F=(v=e*j)-(v-j)))-((B=H*j)-w*F-A*F-w*O))),l[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),l[1]=k-(P+_)+(_-B),_=(D=g+P)-g,l[2]=g-(D-_)+(P-_),l[3]=D;const N=r(L,s,4,l,a);_=(z=(A=M-(w=(v=e*M)-(v-M)))*(O=m-(F=(v=e*m)-(v-m)))-((q=M*m)-w*F-A*F-w*O))-(P=z-(C=(A=x-(w=(v=e*x)-(v-x)))*(O=j-(F=(v=e*j)-(v-j)))-((B=x*j)-w*F-A*F-w*O))),l[0]=z-(P+_)+(_-C),_=(k=q-((g=q+P)-(_=g-q))+(P-_))-(P=k-B),l[1]=k-(P+_)+(_-B),_=(D=g+P)-g,l[2]=g-(D-_)+(P-_),l[3]=D;const Q=r(N,a,4,l,d);return d[Q-1]}(t,o,p,b,y,h,m)},t.orient2dfast=function(t,e,n,r,o,f){return (e-f)*(n-o)-(t-o)*(r-f)},Object.defineProperty(t,"__esModule",{value:!0});});
  });

  var RBush$1 = /*@__PURE__*/getAugmentedNamespace(rbush);

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(tinyqueue);

  var Queue = require$$0;

  var orient = orient2d_min.orient2d;

  // Fix for require issue in webpack https://github.com/mapbox/concaveman/issues/18
  if (Queue.default) {
      Queue = Queue.default;
  }

  var concaveman_1 = concaveman;
  var _default = concaveman;

  function concaveman(points, concavity, lengthThreshold) {
      // a relative measure of concavity; higher value means simpler hull
      concavity = Math.max(0, concavity === undefined ? 2 : concavity);

      // when a segment goes below this length threshold, it won't be drilled down further
      lengthThreshold = lengthThreshold || 0;

      // start with a convex hull of the points
      var hull = fastConvexHull(points);

      // index the points with an R-tree
      var tree = new RBush$1(16);
      tree.toBBox = function (a) {
          return {
              minX: a[0],
              minY: a[1],
              maxX: a[0],
              maxY: a[1]
          };
      };
      tree.compareMinX = function (a, b) { return a[0] - b[0]; };
      tree.compareMinY = function (a, b) { return a[1] - b[1]; };

      tree.load(points);

      // turn the convex hull into a linked list and populate the initial edge queue with the nodes
      var queue = [];
      for (var i = 0, last; i < hull.length; i++) {
          var p = hull[i];
          tree.remove(p);
          last = insertNode(p, last);
          queue.push(last);
      }

      // index the segments with an R-tree (for intersection checks)
      var segTree = new RBush$1(16);
      for (i = 0; i < queue.length; i++) segTree.insert(updateBBox(queue[i]));

      var sqConcavity = concavity * concavity;
      var sqLenThreshold = lengthThreshold * lengthThreshold;

      // process edges one by one
      while (queue.length) {
          var node = queue.shift();
          var a = node.p;
          var b = node.next.p;

          // skip the edge if it's already short enough
          var sqLen = getSqDist(a, b);
          if (sqLen < sqLenThreshold) continue;

          var maxSqLen = sqLen / sqConcavity;

          // find the best connection point for the current edge to flex inward to
          p = findCandidate(tree, node.prev.p, a, b, node.next.next.p, maxSqLen, segTree);

          // if we found a connection and it satisfies our concavity measure
          if (p && Math.min(getSqDist(p, a), getSqDist(p, b)) <= maxSqLen) {
              // connect the edge endpoints through this point and add 2 new edges to the queue
              queue.push(node);
              queue.push(insertNode(p, node));

              // update point and segment indexes
              tree.remove(p);
              segTree.remove(node);
              segTree.insert(updateBBox(node));
              segTree.insert(updateBBox(node.next));
          }
      }

      // convert the resulting hull linked list to an array of points
      node = last;
      var concave = [];
      do {
          concave.push(node.p);
          node = node.next;
      } while (node !== last);

      concave.push(node.p);

      return concave;
  }

  function findCandidate(tree, a, b, c, d, maxDist, segTree) {
      var queue = new Queue([], compareDist);
      var node = tree.data;

      // search through the point R-tree with a depth-first search using a priority queue
      // in the order of distance to the edge (b, c)
      while (node) {
          for (var i = 0; i < node.children.length; i++) {
              var child = node.children[i];

              var dist = node.leaf ? sqSegDist(child, b, c) : sqSegBoxDist(b, c, child);
              if (dist > maxDist) continue; // skip the node if it's farther than we ever need

              queue.push({
                  node: child,
                  dist: dist
              });
          }

          while (queue.length && !queue.peek().node.children) {
              var item = queue.pop();
              var p = item.node;

              // skip all points that are as close to adjacent edges (a,b) and (c,d),
              // and points that would introduce self-intersections when connected
              var d0 = sqSegDist(p, a, b);
              var d1 = sqSegDist(p, c, d);
              if (item.dist < d0 && item.dist < d1 &&
                  noIntersections(b, p, segTree) &&
                  noIntersections(c, p, segTree)) return p;
          }

          node = queue.pop();
          if (node) node = node.node;
      }

      return null;
  }

  function compareDist(a, b) {
      return a.dist - b.dist;
  }

  // square distance from a segment bounding box to the given one
  function sqSegBoxDist(a, b, bbox) {
      if (inside(a, bbox) || inside(b, bbox)) return 0;
      var d1 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.maxX, bbox.minY);
      if (d1 === 0) return 0;
      var d2 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.minY, bbox.minX, bbox.maxY);
      if (d2 === 0) return 0;
      var d3 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.maxX, bbox.minY, bbox.maxX, bbox.maxY);
      if (d3 === 0) return 0;
      var d4 = sqSegSegDist(a[0], a[1], b[0], b[1], bbox.minX, bbox.maxY, bbox.maxX, bbox.maxY);
      if (d4 === 0) return 0;
      return Math.min(d1, d2, d3, d4);
  }

  function inside(a, bbox) {
      return a[0] >= bbox.minX &&
             a[0] <= bbox.maxX &&
             a[1] >= bbox.minY &&
             a[1] <= bbox.maxY;
  }

  // check if the edge (a,b) doesn't intersect any other edges
  function noIntersections(a, b, segTree) {
      var minX = Math.min(a[0], b[0]);
      var minY = Math.min(a[1], b[1]);
      var maxX = Math.max(a[0], b[0]);
      var maxY = Math.max(a[1], b[1]);

      var edges = segTree.search({minX: minX, minY: minY, maxX: maxX, maxY: maxY});
      for (var i = 0; i < edges.length; i++) {
          if (intersects$1(edges[i].p, edges[i].next.p, a, b)) return false;
      }
      return true;
  }

  function cross(p1, p2, p3) {
      return orient(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
  }

  // check if the edges (p1,q1) and (p2,q2) intersect
  function intersects$1(p1, q1, p2, q2) {
      return p1 !== q2 && q1 !== p2 &&
          cross(p1, q1, p2) > 0 !== cross(p1, q1, q2) > 0 &&
          cross(p2, q2, p1) > 0 !== cross(p2, q2, q1) > 0;
  }

  // update the bounding box of a node's edge
  function updateBBox(node) {
      var p1 = node.p;
      var p2 = node.next.p;
      node.minX = Math.min(p1[0], p2[0]);
      node.minY = Math.min(p1[1], p2[1]);
      node.maxX = Math.max(p1[0], p2[0]);
      node.maxY = Math.max(p1[1], p2[1]);
      return node;
  }

  // speed up convex hull by filtering out points inside quadrilateral formed by 4 extreme points
  function fastConvexHull(points) {
      var left = points[0];
      var top = points[0];
      var right = points[0];
      var bottom = points[0];

      // find the leftmost, rightmost, topmost and bottommost points
      for (var i = 0; i < points.length; i++) {
          var p = points[i];
          if (p[0] < left[0]) left = p;
          if (p[0] > right[0]) right = p;
          if (p[1] < top[1]) top = p;
          if (p[1] > bottom[1]) bottom = p;
      }

      // filter out points that are inside the resulting quadrilateral
      var cull = [left, top, right, bottom];
      var filtered = cull.slice();
      for (i = 0; i < points.length; i++) {
          if (!pointInPolygon(points[i], cull)) filtered.push(points[i]);
      }

      // get convex hull around the filtered points
      return convexHull(filtered);
  }

  // create a new node in a doubly linked list
  function insertNode(p, prev) {
      var node = {
          p: p,
          prev: null,
          next: null,
          minX: 0,
          minY: 0,
          maxX: 0,
          maxY: 0
      };

      if (!prev) {
          node.prev = node;
          node.next = node;

      } else {
          node.next = prev.next;
          node.prev = prev;
          prev.next.prev = node;
          prev.next = node;
      }
      return node;
  }

  // square distance between 2 points
  function getSqDist(p1, p2) {

      var dx = p1[0] - p2[0],
          dy = p1[1] - p2[1];

      return dx * dx + dy * dy;
  }

  // square distance from a point to a segment
  function sqSegDist(p, p1, p2) {

      var x = p1[0],
          y = p1[1],
          dx = p2[0] - x,
          dy = p2[1] - y;

      if (dx !== 0 || dy !== 0) {

          var t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);

          if (t > 1) {
              x = p2[0];
              y = p2[1];

          } else if (t > 0) {
              x += dx * t;
              y += dy * t;
          }
      }

      dx = p[0] - x;
      dy = p[1] - y;

      return dx * dx + dy * dy;
  }

  // segment to segment distance, ported from http://geomalgorithms.com/a07-_distance.html by Dan Sunday
  function sqSegSegDist(x0, y0, x1, y1, x2, y2, x3, y3) {
      var ux = x1 - x0;
      var uy = y1 - y0;
      var vx = x3 - x2;
      var vy = y3 - y2;
      var wx = x0 - x2;
      var wy = y0 - y2;
      var a = ux * ux + uy * uy;
      var b = ux * vx + uy * vy;
      var c = vx * vx + vy * vy;
      var d = ux * wx + uy * wy;
      var e = vx * wx + vy * wy;
      var D = a * c - b * b;

      var sc, sN, tc, tN;
      var sD = D;
      var tD = D;

      if (D === 0) {
          sN = 0;
          sD = 1;
          tN = e;
          tD = c;
      } else {
          sN = b * e - c * d;
          tN = a * e - b * d;
          if (sN < 0) {
              sN = 0;
              tN = e;
              tD = c;
          } else if (sN > sD) {
              sN = sD;
              tN = e + b;
              tD = c;
          }
      }

      if (tN < 0.0) {
          tN = 0.0;
          if (-d < 0.0) sN = 0.0;
          else if (-d > a) sN = sD;
          else {
              sN = -d;
              sD = a;
          }
      } else if (tN > tD) {
          tN = tD;
          if ((-d + b) < 0.0) sN = 0;
          else if (-d + b > a) sN = sD;
          else {
              sN = -d + b;
              sD = a;
          }
      }

      sc = sN === 0 ? 0 : sN / sD;
      tc = tN === 0 ? 0 : tN / tD;

      var cx = (1 - sc) * x0 + sc * x1;
      var cy = (1 - sc) * y0 + sc * y1;
      var cx2 = (1 - tc) * x2 + tc * x3;
      var cy2 = (1 - tc) * y2 + tc * y3;
      var dx = cx2 - cx;
      var dy = cy2 - cy;

      return dx * dx + dy * dy;
  }

  function compareByX(a, b) {
      return a[0] === b[0] ? a[1] - b[1] : a[0] - b[0];
  }

  function convexHull(points) {
      points.sort(compareByX);

      var lower = [];
      for (var i = 0; i < points.length; i++) {
          while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], points[i]) <= 0) {
              lower.pop();
          }
          lower.push(points[i]);
      }

      var upper = [];
      for (var ii = points.length - 1; ii >= 0; ii--) {
          while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], points[ii]) <= 0) {
              upper.pop();
          }
          upper.push(points[ii]);
      }

      upper.pop();
      lower.pop();
      return lower.concat(upper);
  }
  concaveman_1.default = _default;

  /**
   * Takes a {@link Feature} or a {@link FeatureCollection} and returns a convex hull {@link Polygon}.
   *
   * Internally this uses
   * the [convex-hull](https://github.com/mikolalysenko/convex-hull) module that implements a
   * [monotone chain hull](http://en.wikibooks.org/wiki/Algorithm_Implementation/Geometry/Convex_hull/Monotone_chain).
   *
   * @name convex
   * @param {GeoJSON} geojson input Feature or FeatureCollection
   * @param {Object} [options={}] Optional parameters
   * @param {number} [options.concavity=Infinity] 1 - thin shape. Infinity - convex hull.
   * @param {Object} [options.properties={}] Translate Properties to Feature
   * @returns {Feature<Polygon>} a convex hull
   * @example
   * var points = turf.featureCollection([
   *   turf.point([10.195312, 43.755225]),
   *   turf.point([10.404052, 43.8424511]),
   *   turf.point([10.579833, 43.659924]),
   *   turf.point([10.360107, 43.516688]),
   *   turf.point([10.14038, 43.588348]),
   *   turf.point([10.195312, 43.755225])
   * ]);
   *
   * var hull = turf.convex(points);
   *
   * //addToMap
   * var addToMap = [points, hull]
   */
  function convex(geojson, options) {
      if (options === void 0) { options = {}; }
      // Default parameters
      options.concavity = options.concavity || Infinity;
      // Container
      var points = [];
      // Convert all points to flat 2D coordinate Array
      coordEach(geojson, function (coord) {
          points.push([coord[0], coord[1]]);
      });
      if (!points.length) {
          return null;
      }
      var convexHull = concaveman_1(points, options.concavity);
      // Convex hull should have at least 3 different vertices in order to create a valid polygon
      if (convexHull.length > 3) {
          return polygon([convexHull]);
      }
      return null;
  }

  //http://en.wikipedia.org/wiki/Haversine_formula
  //http://www.movable-type.co.uk/scripts/latlong.html
  /**
   * Calculates the distance between two {@link Point|points} in degrees, radians, miles, or kilometers.
   * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.
   *
   * @name distance
   * @param {Coord | Point} from origin point or coordinate
   * @param {Coord | Point} to destination point or coordinate
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers
   * @returns {number} distance between the two points
   * @example
   * var from = turf.point([-75.343, 39.984]);
   * var to = turf.point([-75.534, 39.123]);
   * var options = {units: 'miles'};
   *
   * var distance = turf.distance(from, to, options);
   *
   * //addToMap
   * var addToMap = [from, to];
   * from.properties.distance = distance;
   * to.properties.distance = distance;
   */
  function distance(from, to, options) {
      if (options === void 0) { options = {}; }
      var coordinates1 = getCoord(from);
      var coordinates2 = getCoord(to);
      var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);
      var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);
      var lat1 = degreesToRadians(coordinates1[1]);
      var lat2 = degreesToRadians(coordinates2[1]);
      var a = Math.pow(Math.sin(dLat / 2), 2) +
          Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);
      return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);
  }

  /**
   * Takes a bbox and returns an equivalent {@link Polygon|polygon}.
   *
   * @name bboxPolygon
   * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order
   * @param {Object} [options={}] Optional parameters
   * @param {Properties} [options.properties={}] Translate properties to Polygon
   * @param {string|number} [options.id={}] Translate Id to Polygon
   * @returns {Feature<Polygon>} a Polygon representation of the bounding box
   * @example
   * var bbox = [0, 0, 10, 10];
   *
   * var poly = turf.bboxPolygon(bbox);
   *
   * //addToMap
   * var addToMap = [poly]
   */
  function bboxPolygon(bbox, options) {
      if (options === void 0) { options = {}; }
      // Convert BBox positions to Numbers
      // No performance loss for including Number()
      // https://github.com/Turfjs/turf/issues/1119
      var west = Number(bbox[0]);
      var south = Number(bbox[1]);
      var east = Number(bbox[2]);
      var north = Number(bbox[3]);
      if (bbox.length === 6) {
          throw new Error("@turf/bbox-polygon does not support BBox with 6 positions");
      }
      var lowLeft = [west, south];
      var topLeft = [west, north];
      var topRight = [east, north];
      var lowRight = [east, south];
      return polygon([[lowLeft, lowRight, topRight, topLeft, lowLeft]], options.properties, { bbox: bbox, id: options.id });
  }

  /**
   * Takes any number of features and returns a rectangular {@link Polygon} that encompasses all vertices.
   *
   * @name envelope
   * @param {GeoJSON} geojson input features
   * @returns {Feature<Polygon>} a rectangular Polygon feature that encompasses all vertices
   * @example
   * var features = turf.featureCollection([
   *   turf.point([-75.343, 39.984], {"name": "Location A"}),
   *   turf.point([-75.833, 39.284], {"name": "Location B"}),
   *   turf.point([-75.534, 39.123], {"name": "Location C"})
   * ]);
   *
   * var enveloped = turf.envelope(features);
   *
   * //addToMap
   * var addToMap = [features, enveloped];
   */
  function envelope(geojson) {
    return bboxPolygon(bbox(geojson));
  }

  // http://en.wikipedia.org/wiki/Haversine_formula
  /**
   * Takes a {@link Point} and calculates the location of a destination point given a distance in
   * degrees, radians, miles, or kilometers; and bearing in degrees.
   * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.
   *
   * @name destination
   * @param {Coord} origin starting point
   * @param {number} distance distance from the origin point
   * @param {number} bearing ranging from -180 to 180
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians
   * @param {Object} [options.properties={}] Translate properties to Point
   * @returns {Feature<Point>} destination point
   * @example
   * var point = turf.point([-75.343, 39.984]);
   * var distance = 50;
   * var bearing = 90;
   * var options = {units: 'miles'};
   *
   * var destination = turf.destination(point, distance, bearing, options);
   *
   * //addToMap
   * var addToMap = [point, destination]
   * destination.properties['marker-color'] = '#f00';
   * point.properties['marker-color'] = '#0f0';
   */
  function destination(origin, distance, bearing, options) {
      if (options === void 0) { options = {}; }
      // Handle input
      var coordinates1 = getCoord(origin);
      var longitude1 = degreesToRadians(coordinates1[0]);
      var latitude1 = degreesToRadians(coordinates1[1]);
      var bearingRad = degreesToRadians(bearing);
      var radians = lengthToRadians(distance, options.units);
      // Main
      var latitude2 = Math.asin(Math.sin(latitude1) * Math.cos(radians) +
          Math.cos(latitude1) * Math.sin(radians) * Math.cos(bearingRad));
      var longitude2 = longitude1 +
          Math.atan2(Math.sin(bearingRad) * Math.sin(radians) * Math.cos(latitude1), Math.cos(radians) - Math.sin(latitude1) * Math.sin(latitude2));
      var lng = radiansToDegrees(longitude2);
      var lat = radiansToDegrees(latitude2);
      return point([lng, lat], options.properties);
  }

  // http://en.wikipedia.org/wiki/Haversine_formula
  // http://www.movable-type.co.uk/scripts/latlong.html
  /**
   * Takes two {@link Point|points} and finds the geographic bearing between them,
   * i.e. the angle measured in degrees from the north line (0 degrees)
   *
   * @name bearing
   * @param {Coord} start starting Point
   * @param {Coord} end ending Point
   * @param {Object} [options={}] Optional parameters
   * @param {boolean} [options.final=false] calculates the final bearing if true
   * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)
   * @example
   * var point1 = turf.point([-75.343, 39.984]);
   * var point2 = turf.point([-75.534, 39.123]);
   *
   * var bearing = turf.bearing(point1, point2);
   *
   * //addToMap
   * var addToMap = [point1, point2]
   * point1.properties['marker-color'] = '#f00'
   * point2.properties['marker-color'] = '#0f0'
   * point1.properties.bearing = bearing
   */
  function bearing(start, end, options) {
      if (options === void 0) { options = {}; }
      // Reverse calculation
      if (options.final === true) {
          return calculateFinalBearing(start, end);
      }
      var coordinates1 = getCoord(start);
      var coordinates2 = getCoord(end);
      var lon1 = degreesToRadians(coordinates1[0]);
      var lon2 = degreesToRadians(coordinates2[0]);
      var lat1 = degreesToRadians(coordinates1[1]);
      var lat2 = degreesToRadians(coordinates2[1]);
      var a = Math.sin(lon2 - lon1) * Math.cos(lat2);
      var b = Math.cos(lat1) * Math.sin(lat2) -
          Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);
      return radiansToDegrees(Math.atan2(a, b));
  }
  /**
   * Calculates Final Bearing
   *
   * @private
   * @param {Coord} start starting Point
   * @param {Coord} end ending Point
   * @returns {number} bearing
   */
  function calculateFinalBearing(start, end) {
      // Swap start & end
      var bear = bearing(end, start);
      bear = (bear + 180) % 360;
      return bear;
  }

  /**
   * Takes a {@link Feature} or {@link FeatureCollection} and returns the absolute center point of all features.
   *
   * @name center
   * @param {GeoJSON} geojson GeoJSON to be centered
   * @param {Object} [options={}] Optional parameters
   * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point
   * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point
   * @param {Object} [options.id={}] Translate GeoJSON Id to Point
   * @returns {Feature<Point>} a Point feature at the absolute center point of all input features
   * @example
   * var features = turf.points([
   *   [-97.522259, 35.4691],
   *   [-97.502754, 35.463455],
   *   [-97.508269, 35.463245]
   * ]);
   *
   * var center = turf.center(features);
   *
   * //addToMap
   * var addToMap = [features, center]
   * center.properties['marker-size'] = 'large';
   * center.properties['marker-color'] = '#000';
   */
  function center(geojson, options) {
      if (options === void 0) { options = {}; }
      var ext = bbox(geojson);
      var x = (ext[0] + ext[2]) / 2;
      var y = (ext[1] + ext[3]) / 2;
      return point([x, y], options.properties, options);
  }

  /**
   * Takes one or more features and calculates the centroid using the mean of all vertices.
   * This lessens the effect of small islands and artifacts when calculating the centroid of a set of polygons.
   *
   * @name centroid
   * @param {GeoJSON} geojson GeoJSON to be centered
   * @param {Object} [options={}] Optional Parameters
   * @param {Object} [options.properties={}] an Object that is used as the {@link Feature}'s properties
   * @returns {Feature<Point>} the centroid of the input features
   * @example
   * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
   *
   * var centroid = turf.centroid(polygon);
   *
   * //addToMap
   * var addToMap = [polygon, centroid]
   */
  function centroid(geojson, options) {
      if (options === void 0) { options = {}; }
      var xSum = 0;
      var ySum = 0;
      var len = 0;
      coordEach(geojson, function (coord) {
          xSum += coord[0];
          ySum += coord[1];
          len++;
      }, true);
      return point([xSum / len, ySum / len], options.properties);
  }

  /**
   * Takes any {@link Feature} or a {@link FeatureCollection} and returns its [center of mass](https://en.wikipedia.org/wiki/Center_of_mass) using this formula: [Centroid of Polygon](https://en.wikipedia.org/wiki/Centroid#Centroid_of_polygon).
   *
   * @name centerOfMass
   * @param {GeoJSON} geojson GeoJSON to be centered
   * @param {Object} [options={}] Optional Parameters
   * @param {Object} [options.properties={}] Translate Properties to Feature
   * @returns {Feature<Point>} the center of mass
   * @example
   * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);
   *
   * var center = turf.centerOfMass(polygon);
   *
   * //addToMap
   * var addToMap = [polygon, center]
   */
  function centerOfMass(geojson, options) {
      if (options === void 0) { options = {}; }
      switch (getType(geojson)) {
          case "Point":
              return point(getCoord(geojson), options.properties);
          case "Polygon":
              var coords = [];
              coordEach(geojson, function (coord) {
                  coords.push(coord);
              });
              // First, we neutralize the feature (set it around coordinates [0,0]) to prevent rounding errors
              // We take any point to translate all the points around 0
              var centre = centroid(geojson, { properties: options.properties });
              var translation = centre.geometry.coordinates;
              var sx = 0;
              var sy = 0;
              var sArea = 0;
              var i, pi, pj, xi, xj, yi, yj, a;
              var neutralizedPoints = coords.map(function (point) {
                  return [point[0] - translation[0], point[1] - translation[1]];
              });
              for (i = 0; i < coords.length - 1; i++) {
                  // pi is the current point
                  pi = neutralizedPoints[i];
                  xi = pi[0];
                  yi = pi[1];
                  // pj is the next point (pi+1)
                  pj = neutralizedPoints[i + 1];
                  xj = pj[0];
                  yj = pj[1];
                  // a is the common factor to compute the signed area and the final coordinates
                  a = xi * yj - xj * yi;
                  // sArea is the sum used to compute the signed area
                  sArea += a;
                  // sx and sy are the sums used to compute the final coordinates
                  sx += (xi + xj) * a;
                  sy += (yi + yj) * a;
              }
              // Shape has no area: fallback on turf.centroid
              if (sArea === 0) {
                  return centre;
              }
              else {
                  // Compute the signed area, and factorize 1/6A
                  var area = sArea * 0.5;
                  var areaFactor = 1 / (6 * area);
                  // Compute the final coordinates, adding back the values that have been neutralized
                  return point([translation[0] + areaFactor * sx, translation[1] + areaFactor * sy], options.properties);
              }
          default:
              // Not a polygon: Compute the convex hull and work with that
              var hull = convex(geojson);
              if (hull)
                  return centerOfMass(hull, { properties: options.properties });
              // Hull is empty: fallback on the centroid
              else
                  return centroid(geojson, { properties: options.properties });
      }
  }

  /**
   * Creates a {@link FeatureCollection} of 2-vertex {@link LineString} segments from a
   * {@link LineString|(Multi)LineString} or {@link Polygon|(Multi)Polygon}.
   *
   * @name lineSegment
   * @param {GeoJSON} geojson GeoJSON Polygon or LineString
   * @returns {FeatureCollection<LineString>} 2-vertex line segments
   * @example
   * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);
   * var segments = turf.lineSegment(polygon);
   *
   * //addToMap
   * var addToMap = [polygon, segments]
   */
  function lineSegment(geojson) {
      if (!geojson) {
          throw new Error("geojson is required");
      }
      var results = [];
      flattenEach(geojson, function (feature) {
          lineSegmentFeature(feature, results);
      });
      return featureCollection(results);
  }
  /**
   * Line Segment
   *
   * @private
   * @param {Feature<LineString|Polygon>} geojson Line or polygon feature
   * @param {Array} results push to results
   * @returns {void}
   */
  function lineSegmentFeature(geojson, results) {
      var coords = [];
      var geometry = geojson.geometry;
      if (geometry !== null) {
          switch (geometry.type) {
              case "Polygon":
                  coords = getCoords(geometry);
                  break;
              case "LineString":
                  coords = [getCoords(geometry)];
          }
          coords.forEach(function (coord) {
              var segments = createSegments(coord, geojson.properties);
              segments.forEach(function (segment) {
                  segment.id = results.length;
                  results.push(segment);
              });
          });
      }
  }
  /**
   * Create Segments from LineString coordinates
   *
   * @private
   * @param {Array<Array<number>>} coords LineString coordinates
   * @param {*} properties GeoJSON properties
   * @returns {Array<Feature<LineString>>} line segments
   */
  function createSegments(coords, properties) {
      var segments = [];
      coords.reduce(function (previousCoords, currentCoords) {
          var segment = lineString([previousCoords, currentCoords], properties);
          segment.bbox = bbox$1(previousCoords, currentCoords);
          segments.push(segment);
          return currentCoords;
      });
      return segments;
  }
  /**
   * Create BBox between two coordinates (faster than @turf/bbox)
   *
   * @private
   * @param {Array<number>} coords1 Point coordinate
   * @param {Array<number>} coords2 Point coordinate
   * @returns {BBox} [west, south, east, north]
   */
  function bbox$1(coords1, coords2) {
      var x1 = coords1[0];
      var y1 = coords1[1];
      var x2 = coords2[0];
      var y2 = coords2[1];
      var west = x1 < x2 ? x1 : x2;
      var south = y1 < y2 ? y1 : y2;
      var east = x1 > x2 ? x1 : x2;
      var north = y1 > y2 ? y1 : y2;
      return [west, south, east, north];
  }

  class RBush$2 {
      constructor(maxEntries = 9) {
          // max entries in a node is 9 by default; min node fill is 40% for best performance
          this._maxEntries = Math.max(4, maxEntries);
          this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));
          this.clear();
      }

      all() {
          return this._all(this.data, []);
      }

      search(bbox) {
          let node = this.data;
          const result = [];

          if (!intersects$2(bbox, node)) return result;

          const toBBox = this.toBBox;
          const nodesToSearch = [];

          while (node) {
              for (let i = 0; i < node.children.length; i++) {
                  const child = node.children[i];
                  const childBBox = node.leaf ? toBBox(child) : child;

                  if (intersects$2(bbox, childBBox)) {
                      if (node.leaf) result.push(child);
                      else if (contains$2(bbox, childBBox)) this._all(child, result);
                      else nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return result;
      }

      collides(bbox) {
          let node = this.data;

          if (!intersects$2(bbox, node)) return false;

          const nodesToSearch = [];
          while (node) {
              for (let i = 0; i < node.children.length; i++) {
                  const child = node.children[i];
                  const childBBox = node.leaf ? this.toBBox(child) : child;

                  if (intersects$2(bbox, childBBox)) {
                      if (node.leaf || contains$2(bbox, childBBox)) return true;
                      nodesToSearch.push(child);
                  }
              }
              node = nodesToSearch.pop();
          }

          return false;
      }

      load(data) {
          if (!(data && data.length)) return this;

          if (data.length < this._minEntries) {
              for (let i = 0; i < data.length; i++) {
                  this.insert(data[i]);
              }
              return this;
          }

          // recursively build the tree with the given data from scratch using OMT algorithm
          let node = this._build(data.slice(), 0, data.length - 1, 0);

          if (!this.data.children.length) {
              // save as is if tree is empty
              this.data = node;

          } else if (this.data.height === node.height) {
              // split root if trees have the same height
              this._splitRoot(this.data, node);

          } else {
              if (this.data.height < node.height) {
                  // swap trees if inserted one is bigger
                  const tmpNode = this.data;
                  this.data = node;
                  node = tmpNode;
              }

              // insert the small tree into the large tree at appropriate level
              this._insert(node, this.data.height - node.height - 1, true);
          }

          return this;
      }

      insert(item) {
          if (item) this._insert(item, this.data.height - 1);
          return this;
      }

      clear() {
          this.data = createNode$1([]);
          return this;
      }

      remove(item, equalsFn) {
          if (!item) return this;

          let node = this.data;
          const bbox = this.toBBox(item);
          const path = [];
          const indexes = [];
          let i, parent, goingUp;

          // depth-first iterative tree traversal
          while (node || path.length) {

              if (!node) { // go up
                  node = path.pop();
                  parent = path[path.length - 1];
                  i = indexes.pop();
                  goingUp = true;
              }

              if (node.leaf) { // check current node
                  const index = findItem$1(item, node.children, equalsFn);

                  if (index !== -1) {
                      // item found, remove the item and condense tree upwards
                      node.children.splice(index, 1);
                      path.push(node);
                      this._condense(path);
                      return this;
                  }
              }

              if (!goingUp && !node.leaf && contains$2(node, bbox)) { // go down
                  path.push(node);
                  indexes.push(i);
                  i = 0;
                  parent = node;
                  node = node.children[0];

              } else if (parent) { // go right
                  i++;
                  node = parent.children[i];
                  goingUp = false;

              } else node = null; // nothing found
          }

          return this;
      }

      toBBox(item) { return item; }

      compareMinX(a, b) { return a.minX - b.minX; }
      compareMinY(a, b) { return a.minY - b.minY; }

      toJSON() { return this.data; }

      fromJSON(data) {
          this.data = data;
          return this;
      }

      _all(node, result) {
          const nodesToSearch = [];
          while (node) {
              if (node.leaf) result.push(...node.children);
              else nodesToSearch.push(...node.children);

              node = nodesToSearch.pop();
          }
          return result;
      }

      _build(items, left, right, height) {

          const N = right - left + 1;
          let M = this._maxEntries;
          let node;

          if (N <= M) {
              // reached leaf level; return leaf
              node = createNode$1(items.slice(left, right + 1));
              calcBBox$1(node, this.toBBox);
              return node;
          }

          if (!height) {
              // target height of the bulk-loaded tree
              height = Math.ceil(Math.log(N) / Math.log(M));

              // target number of root entries to maximize storage utilization
              M = Math.ceil(N / Math.pow(M, height - 1));
          }

          node = createNode$1([]);
          node.leaf = false;
          node.height = height;

          // split the items into M mostly square tiles

          const N2 = Math.ceil(N / M);
          const N1 = N2 * Math.ceil(Math.sqrt(M));

          multiSelect$1(items, left, right, N1, this.compareMinX);

          for (let i = left; i <= right; i += N1) {

              const right2 = Math.min(i + N1 - 1, right);

              multiSelect$1(items, i, right2, N2, this.compareMinY);

              for (let j = i; j <= right2; j += N2) {

                  const right3 = Math.min(j + N2 - 1, right2);

                  // pack each entry recursively
                  node.children.push(this._build(items, j, right3, height - 1));
              }
          }

          calcBBox$1(node, this.toBBox);

          return node;
      }

      _chooseSubtree(bbox, node, level, path) {
          while (true) {
              path.push(node);

              if (node.leaf || path.length - 1 === level) break;

              let minArea = Infinity;
              let minEnlargement = Infinity;
              let targetNode;

              for (let i = 0; i < node.children.length; i++) {
                  const child = node.children[i];
                  const area = bboxArea$1(child);
                  const enlargement = enlargedArea$1(bbox, child) - area;

                  // choose entry with the least area enlargement
                  if (enlargement < minEnlargement) {
                      minEnlargement = enlargement;
                      minArea = area < minArea ? area : minArea;
                      targetNode = child;

                  } else if (enlargement === minEnlargement) {
                      // otherwise choose one with the smallest area
                      if (area < minArea) {
                          minArea = area;
                          targetNode = child;
                      }
                  }
              }

              node = targetNode || node.children[0];
          }

          return node;
      }

      _insert(item, level, isNode) {
          const bbox = isNode ? item : this.toBBox(item);
          const insertPath = [];

          // find the best node for accommodating the item, saving all nodes along the path too
          const node = this._chooseSubtree(bbox, this.data, level, insertPath);

          // put the item into the node
          node.children.push(item);
          extend$1(node, bbox);

          // split on node overflow; propagate upwards if necessary
          while (level >= 0) {
              if (insertPath[level].children.length > this._maxEntries) {
                  this._split(insertPath, level);
                  level--;
              } else break;
          }

          // adjust bboxes along the insertion path
          this._adjustParentBBoxes(bbox, insertPath, level);
      }

      // split overflowed node into two
      _split(insertPath, level) {
          const node = insertPath[level];
          const M = node.children.length;
          const m = this._minEntries;

          this._chooseSplitAxis(node, m, M);

          const splitIndex = this._chooseSplitIndex(node, m, M);

          const newNode = createNode$1(node.children.splice(splitIndex, node.children.length - splitIndex));
          newNode.height = node.height;
          newNode.leaf = node.leaf;

          calcBBox$1(node, this.toBBox);
          calcBBox$1(newNode, this.toBBox);

          if (level) insertPath[level - 1].children.push(newNode);
          else this._splitRoot(node, newNode);
      }

      _splitRoot(node, newNode) {
          // split root node
          this.data = createNode$1([node, newNode]);
          this.data.height = node.height + 1;
          this.data.leaf = false;
          calcBBox$1(this.data, this.toBBox);
      }

      _chooseSplitIndex(node, m, M) {
          let index;
          let minOverlap = Infinity;
          let minArea = Infinity;

          for (let i = m; i <= M - m; i++) {
              const bbox1 = distBBox$1(node, 0, i, this.toBBox);
              const bbox2 = distBBox$1(node, i, M, this.toBBox);

              const overlap = intersectionArea$1(bbox1, bbox2);
              const area = bboxArea$1(bbox1) + bboxArea$1(bbox2);

              // choose distribution with minimum overlap
              if (overlap < minOverlap) {
                  minOverlap = overlap;
                  index = i;

                  minArea = area < minArea ? area : minArea;

              } else if (overlap === minOverlap) {
                  // otherwise choose distribution with minimum area
                  if (area < minArea) {
                      minArea = area;
                      index = i;
                  }
              }
          }

          return index || M - m;
      }

      // sorts node children by the best axis for split
      _chooseSplitAxis(node, m, M) {
          const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX$1;
          const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY$1;
          const xMargin = this._allDistMargin(node, m, M, compareMinX);
          const yMargin = this._allDistMargin(node, m, M, compareMinY);

          // if total distributions margin value is minimal for x, sort by minX,
          // otherwise it's already sorted by minY
          if (xMargin < yMargin) node.children.sort(compareMinX);
      }

      // total margin of all possible split distributions where each node is at least m full
      _allDistMargin(node, m, M, compare) {
          node.children.sort(compare);

          const toBBox = this.toBBox;
          const leftBBox = distBBox$1(node, 0, m, toBBox);
          const rightBBox = distBBox$1(node, M - m, M, toBBox);
          let margin = bboxMargin$1(leftBBox) + bboxMargin$1(rightBBox);

          for (let i = m; i < M - m; i++) {
              const child = node.children[i];
              extend$1(leftBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin$1(leftBBox);
          }

          for (let i = M - m - 1; i >= m; i--) {
              const child = node.children[i];
              extend$1(rightBBox, node.leaf ? toBBox(child) : child);
              margin += bboxMargin$1(rightBBox);
          }

          return margin;
      }

      _adjustParentBBoxes(bbox, path, level) {
          // adjust bboxes along the given tree path
          for (let i = level; i >= 0; i--) {
              extend$1(path[i], bbox);
          }
      }

      _condense(path) {
          // go through the path, removing empty nodes and updating bboxes
          for (let i = path.length - 1, siblings; i >= 0; i--) {
              if (path[i].children.length === 0) {
                  if (i > 0) {
                      siblings = path[i - 1].children;
                      siblings.splice(siblings.indexOf(path[i]), 1);

                  } else this.clear();

              } else calcBBox$1(path[i], this.toBBox);
          }
      }
  }

  function findItem$1(item, items, equalsFn) {
      if (!equalsFn) return items.indexOf(item);

      for (let i = 0; i < items.length; i++) {
          if (equalsFn(item, items[i])) return i;
      }
      return -1;
  }

  // calculate node's bbox from bboxes of its children
  function calcBBox$1(node, toBBox) {
      distBBox$1(node, 0, node.children.length, toBBox, node);
  }

  // min bounding rectangle of node children from k to p-1
  function distBBox$1(node, k, p, toBBox, destNode) {
      if (!destNode) destNode = createNode$1(null);
      destNode.minX = Infinity;
      destNode.minY = Infinity;
      destNode.maxX = -Infinity;
      destNode.maxY = -Infinity;

      for (let i = k; i < p; i++) {
          const child = node.children[i];
          extend$1(destNode, node.leaf ? toBBox(child) : child);
      }

      return destNode;
  }

  function extend$1(a, b) {
      a.minX = Math.min(a.minX, b.minX);
      a.minY = Math.min(a.minY, b.minY);
      a.maxX = Math.max(a.maxX, b.maxX);
      a.maxY = Math.max(a.maxY, b.maxY);
      return a;
  }

  function compareNodeMinX$1(a, b) { return a.minX - b.minX; }
  function compareNodeMinY$1(a, b) { return a.minY - b.minY; }

  function bboxArea$1(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }
  function bboxMargin$1(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }

  function enlargedArea$1(a, b) {
      return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
             (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
  }

  function intersectionArea$1(a, b) {
      const minX = Math.max(a.minX, b.minX);
      const minY = Math.max(a.minY, b.minY);
      const maxX = Math.min(a.maxX, b.maxX);
      const maxY = Math.min(a.maxY, b.maxY);

      return Math.max(0, maxX - minX) *
             Math.max(0, maxY - minY);
  }

  function contains$2(a, b) {
      return a.minX <= b.minX &&
             a.minY <= b.minY &&
             b.maxX <= a.maxX &&
             b.maxY <= a.maxY;
  }

  function intersects$2(a, b) {
      return b.minX <= a.maxX &&
             b.minY <= a.maxY &&
             b.maxX >= a.minX &&
             b.maxY >= a.minY;
  }

  function createNode$1(children) {
      return {
          children,
          height: 1,
          leaf: true,
          minX: Infinity,
          minY: Infinity,
          maxX: -Infinity,
          maxY: -Infinity
      };
  }

  // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
  // combines selection algorithm with binary divide & conquer approach

  function multiSelect$1(arr, left, right, n, compare) {
      const stack = [left, right];

      while (stack.length) {
          right = stack.pop();
          left = stack.pop();

          if (right - left <= n) continue;

          const mid = left + Math.ceil((right - left) / n / 2) * n;
          quickselect(arr, mid, left, right, compare);

          stack.push(left, mid, mid, right);
      }
  }

  var rbush$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': RBush$2
  });

  var toStr = Object.prototype.toString;

  var isArguments = function isArguments(value) {
  	var str = toStr.call(value);
  	var isArgs = str === '[object Arguments]';
  	if (!isArgs) {
  		isArgs = str !== '[object Array]' &&
  			value !== null &&
  			typeof value === 'object' &&
  			typeof value.length === 'number' &&
  			value.length >= 0 &&
  			toStr.call(value.callee) === '[object Function]';
  	}
  	return isArgs;
  };

  var keysShim;
  if (!Object.keys) {
  	// modified from https://github.com/es-shims/es5-shim
  	var has = Object.prototype.hasOwnProperty;
  	var toStr$1 = Object.prototype.toString;
  	var isArgs = isArguments; // eslint-disable-line global-require
  	var isEnumerable = Object.prototype.propertyIsEnumerable;
  	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
  	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
  	var dontEnums = [
  		'toString',
  		'toLocaleString',
  		'valueOf',
  		'hasOwnProperty',
  		'isPrototypeOf',
  		'propertyIsEnumerable',
  		'constructor'
  	];
  	var equalsConstructorPrototype = function (o) {
  		var ctor = o.constructor;
  		return ctor && ctor.prototype === o;
  	};
  	var excludedKeys = {
  		$applicationCache: true,
  		$console: true,
  		$external: true,
  		$frame: true,
  		$frameElement: true,
  		$frames: true,
  		$innerHeight: true,
  		$innerWidth: true,
  		$onmozfullscreenchange: true,
  		$onmozfullscreenerror: true,
  		$outerHeight: true,
  		$outerWidth: true,
  		$pageXOffset: true,
  		$pageYOffset: true,
  		$parent: true,
  		$scrollLeft: true,
  		$scrollTop: true,
  		$scrollX: true,
  		$scrollY: true,
  		$self: true,
  		$webkitIndexedDB: true,
  		$webkitStorageInfo: true,
  		$window: true
  	};
  	var hasAutomationEqualityBug = (function () {
  		/* global window */
  		if (typeof window === 'undefined') { return false; }
  		for (var k in window) {
  			try {
  				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
  					try {
  						equalsConstructorPrototype(window[k]);
  					} catch (e) {
  						return true;
  					}
  				}
  			} catch (e) {
  				return true;
  			}
  		}
  		return false;
  	}());
  	var equalsConstructorPrototypeIfNotBuggy = function (o) {
  		/* global window */
  		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
  			return equalsConstructorPrototype(o);
  		}
  		try {
  			return equalsConstructorPrototype(o);
  		} catch (e) {
  			return false;
  		}
  	};

  	keysShim = function keys(object) {
  		var isObject = object !== null && typeof object === 'object';
  		var isFunction = toStr$1.call(object) === '[object Function]';
  		var isArguments = isArgs(object);
  		var isString = isObject && toStr$1.call(object) === '[object String]';
  		var theKeys = [];

  		if (!isObject && !isFunction && !isArguments) {
  			throw new TypeError('Object.keys called on a non-object');
  		}

  		var skipProto = hasProtoEnumBug && isFunction;
  		if (isString && object.length > 0 && !has.call(object, 0)) {
  			for (var i = 0; i < object.length; ++i) {
  				theKeys.push(String(i));
  			}
  		}

  		if (isArguments && object.length > 0) {
  			for (var j = 0; j < object.length; ++j) {
  				theKeys.push(String(j));
  			}
  		} else {
  			for (var name in object) {
  				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
  					theKeys.push(String(name));
  				}
  			}
  		}

  		if (hasDontEnumBug) {
  			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

  			for (var k = 0; k < dontEnums.length; ++k) {
  				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
  					theKeys.push(dontEnums[k]);
  				}
  			}
  		}
  		return theKeys;
  	};
  }
  var implementation = keysShim;

  var slice = Array.prototype.slice;


  var origKeys = Object.keys;
  var keysShim$1 = origKeys ? function keys(o) { return origKeys(o); } : implementation;

  var originalKeys = Object.keys;

  keysShim$1.shim = function shimObjectKeys() {
  	if (Object.keys) {
  		var keysWorksWithArguments = (function () {
  			// Safari 5.0 bug
  			var args = Object.keys(arguments);
  			return args && args.length === arguments.length;
  		}(1, 2));
  		if (!keysWorksWithArguments) {
  			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
  				if (isArguments(object)) {
  					return originalKeys(slice.call(object));
  				}
  				return originalKeys(object);
  			};
  		}
  	} else {
  		Object.keys = keysShim$1;
  	}
  	return Object.keys || keysShim$1;
  };

  var objectKeys = keysShim$1;

  /** @type {import('.')} */
  var esErrors = Error;

  /** @type {import('./eval')} */
  var _eval = EvalError;

  /** @type {import('./range')} */
  var range = RangeError;

  /** @type {import('./ref')} */
  var ref = ReferenceError;

  /** @type {import('./syntax')} */
  var syntax = SyntaxError;

  /** @type {import('./type')} */
  var type = TypeError;

  /** @type {import('./uri')} */
  var uri = URIError;

  /* eslint complexity: [2, 18], max-statements: [2, 33] */
  var shams = function hasSymbols() {
  	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
  	if (typeof Symbol.iterator === 'symbol') { return true; }

  	var obj = {};
  	var sym = Symbol('test');
  	var symObj = Object(sym);
  	if (typeof sym === 'string') { return false; }

  	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
  	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

  	// temp disabled per https://github.com/ljharb/object.assign/issues/17
  	// if (sym instanceof Symbol) { return false; }
  	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
  	// if (!(symObj instanceof Symbol)) { return false; }

  	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
  	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

  	var symVal = 42;
  	obj[sym] = symVal;
  	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
  	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

  	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

  	var syms = Object.getOwnPropertySymbols(obj);
  	if (syms.length !== 1 || syms[0] !== sym) { return false; }

  	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

  	if (typeof Object.getOwnPropertyDescriptor === 'function') {
  		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
  		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
  	}

  	return true;
  };

  var origSymbol = typeof Symbol !== 'undefined' && Symbol;


  var hasSymbols = function hasNativeSymbols() {
  	if (typeof origSymbol !== 'function') { return false; }
  	if (typeof Symbol !== 'function') { return false; }
  	if (typeof origSymbol('foo') !== 'symbol') { return false; }
  	if (typeof Symbol('bar') !== 'symbol') { return false; }

  	return shams();
  };

  var test = {
  	__proto__: null,
  	foo: {}
  };

  var $Object = Object;

  /** @type {import('.')} */
  var hasProto = function hasProto() {
  	// @ts-expect-error: TS errors on an inherited property for some reason
  	return { __proto__: test }.foo === test.foo
  		&& !(test instanceof $Object);
  };

  /* eslint no-invalid-this: 1 */

  var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
  var toStr$2 = Object.prototype.toString;
  var max$1 = Math.max;
  var funcType = '[object Function]';

  var concatty = function concatty(a, b) {
      var arr = [];

      for (var i = 0; i < a.length; i += 1) {
          arr[i] = a[i];
      }
      for (var j = 0; j < b.length; j += 1) {
          arr[j + a.length] = b[j];
      }

      return arr;
  };

  var slicy = function slicy(arrLike, offset) {
      var arr = [];
      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
          arr[j] = arrLike[i];
      }
      return arr;
  };

  var joiny = function (arr, joiner) {
      var str = '';
      for (var i = 0; i < arr.length; i += 1) {
          str += arr[i];
          if (i + 1 < arr.length) {
              str += joiner;
          }
      }
      return str;
  };

  var implementation$1 = function bind(that) {
      var target = this;
      if (typeof target !== 'function' || toStr$2.apply(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);

      var bound;
      var binder = function () {
          if (this instanceof bound) {
              var result = target.apply(
                  this,
                  concatty(args, arguments)
              );
              if (Object(result) === result) {
                  return result;
              }
              return this;
          }
          return target.apply(
              that,
              concatty(args, arguments)
          );

      };

      var boundLength = max$1(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
          boundArgs[i] = '$' + i;
      }

      bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

      if (target.prototype) {
          var Empty = function Empty() {};
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
      }

      return bound;
  };

  var functionBind = Function.prototype.bind || implementation$1;

  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;


  /** @type {import('.')} */
  var hasown = functionBind.call(call, $hasOwn);

  var undefined$1;









  var $Function = Function;

  // eslint-disable-next-line consistent-return
  var getEvalledConstructor = function (expressionSyntax) {
  	try {
  		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
  	} catch (e) {}
  };

  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
  	try {
  		$gOPD({}, '');
  	} catch (e) {
  		$gOPD = null; // this is IE 8, which has a broken gOPD
  	}
  }

  var throwTypeError = function () {
  	throw new type();
  };
  var ThrowTypeError = $gOPD
  	? (function () {
  		try {
  			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
  			arguments.callee; // IE 8 does not throw here
  			return throwTypeError;
  		} catch (calleeThrows) {
  			try {
  				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
  				return $gOPD(arguments, 'callee').get;
  			} catch (gOPDthrows) {
  				return throwTypeError;
  			}
  		}
  	}())
  	: throwTypeError;

  var hasSymbols$1 = hasSymbols();
  var hasProto$1 = hasProto();

  var getProto = Object.getPrototypeOf || (
  	hasProto$1
  		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
  		: null
  );

  var needsEval = {};

  var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined$1 : getProto(Uint8Array);

  var INTRINSICS = {
  	__proto__: null,
  	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined$1 : AggregateError,
  	'%Array%': Array,
  	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined$1 : ArrayBuffer,
  	'%ArrayIteratorPrototype%': hasSymbols$1 && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
  	'%AsyncFromSyncIteratorPrototype%': undefined$1,
  	'%AsyncFunction%': needsEval,
  	'%AsyncGenerator%': needsEval,
  	'%AsyncGeneratorFunction%': needsEval,
  	'%AsyncIteratorPrototype%': needsEval,
  	'%Atomics%': typeof Atomics === 'undefined' ? undefined$1 : Atomics,
  	'%BigInt%': typeof BigInt === 'undefined' ? undefined$1 : BigInt,
  	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined$1 : BigInt64Array,
  	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined$1 : BigUint64Array,
  	'%Boolean%': Boolean,
  	'%DataView%': typeof DataView === 'undefined' ? undefined$1 : DataView,
  	'%Date%': Date,
  	'%decodeURI%': decodeURI,
  	'%decodeURIComponent%': decodeURIComponent,
  	'%encodeURI%': encodeURI,
  	'%encodeURIComponent%': encodeURIComponent,
  	'%Error%': esErrors,
  	'%eval%': eval, // eslint-disable-line no-eval
  	'%EvalError%': _eval,
  	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined$1 : Float32Array,
  	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined$1 : Float64Array,
  	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined$1 : FinalizationRegistry,
  	'%Function%': $Function,
  	'%GeneratorFunction%': needsEval,
  	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined$1 : Int8Array,
  	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined$1 : Int16Array,
  	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined$1 : Int32Array,
  	'%isFinite%': isFinite,
  	'%isNaN%': isNaN,
  	'%IteratorPrototype%': hasSymbols$1 && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
  	'%JSON%': typeof JSON === 'object' ? JSON : undefined$1,
  	'%Map%': typeof Map === 'undefined' ? undefined$1 : Map,
  	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols$1 || !getProto ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
  	'%Math%': Math,
  	'%Number%': Number,
  	'%Object%': Object,
  	'%parseFloat%': parseFloat,
  	'%parseInt%': parseInt,
  	'%Promise%': typeof Promise === 'undefined' ? undefined$1 : Promise,
  	'%Proxy%': typeof Proxy === 'undefined' ? undefined$1 : Proxy,
  	'%RangeError%': range,
  	'%ReferenceError%': ref,
  	'%Reflect%': typeof Reflect === 'undefined' ? undefined$1 : Reflect,
  	'%RegExp%': RegExp,
  	'%Set%': typeof Set === 'undefined' ? undefined$1 : Set,
  	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols$1 || !getProto ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
  	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined$1 : SharedArrayBuffer,
  	'%String%': String,
  	'%StringIteratorPrototype%': hasSymbols$1 && getProto ? getProto(''[Symbol.iterator]()) : undefined$1,
  	'%Symbol%': hasSymbols$1 ? Symbol : undefined$1,
  	'%SyntaxError%': syntax,
  	'%ThrowTypeError%': ThrowTypeError,
  	'%TypedArray%': TypedArray,
  	'%TypeError%': type,
  	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined$1 : Uint8Array,
  	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined$1 : Uint8ClampedArray,
  	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined$1 : Uint16Array,
  	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined$1 : Uint32Array,
  	'%URIError%': uri,
  	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined$1 : WeakMap,
  	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined$1 : WeakRef,
  	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined$1 : WeakSet
  };

  if (getProto) {
  	try {
  		null.error; // eslint-disable-line no-unused-expressions
  	} catch (e) {
  		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
  		var errorProto = getProto(getProto(e));
  		INTRINSICS['%Error.prototype%'] = errorProto;
  	}
  }

  var doEval = function doEval(name) {
  	var value;
  	if (name === '%AsyncFunction%') {
  		value = getEvalledConstructor('async function () {}');
  	} else if (name === '%GeneratorFunction%') {
  		value = getEvalledConstructor('function* () {}');
  	} else if (name === '%AsyncGeneratorFunction%') {
  		value = getEvalledConstructor('async function* () {}');
  	} else if (name === '%AsyncGenerator%') {
  		var fn = doEval('%AsyncGeneratorFunction%');
  		if (fn) {
  			value = fn.prototype;
  		}
  	} else if (name === '%AsyncIteratorPrototype%') {
  		var gen = doEval('%AsyncGenerator%');
  		if (gen && getProto) {
  			value = getProto(gen.prototype);
  		}
  	}

  	INTRINSICS[name] = value;

  	return value;
  };

  var LEGACY_ALIASES = {
  	__proto__: null,
  	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
  	'%ArrayPrototype%': ['Array', 'prototype'],
  	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
  	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
  	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
  	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
  	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
  	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
  	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
  	'%BooleanPrototype%': ['Boolean', 'prototype'],
  	'%DataViewPrototype%': ['DataView', 'prototype'],
  	'%DatePrototype%': ['Date', 'prototype'],
  	'%ErrorPrototype%': ['Error', 'prototype'],
  	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
  	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
  	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
  	'%FunctionPrototype%': ['Function', 'prototype'],
  	'%Generator%': ['GeneratorFunction', 'prototype'],
  	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
  	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
  	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
  	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
  	'%JSONParse%': ['JSON', 'parse'],
  	'%JSONStringify%': ['JSON', 'stringify'],
  	'%MapPrototype%': ['Map', 'prototype'],
  	'%NumberPrototype%': ['Number', 'prototype'],
  	'%ObjectPrototype%': ['Object', 'prototype'],
  	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
  	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
  	'%PromisePrototype%': ['Promise', 'prototype'],
  	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
  	'%Promise_all%': ['Promise', 'all'],
  	'%Promise_reject%': ['Promise', 'reject'],
  	'%Promise_resolve%': ['Promise', 'resolve'],
  	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
  	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
  	'%RegExpPrototype%': ['RegExp', 'prototype'],
  	'%SetPrototype%': ['Set', 'prototype'],
  	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
  	'%StringPrototype%': ['String', 'prototype'],
  	'%SymbolPrototype%': ['Symbol', 'prototype'],
  	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
  	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
  	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
  	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
  	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
  	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
  	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
  	'%URIErrorPrototype%': ['URIError', 'prototype'],
  	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
  	'%WeakSetPrototype%': ['WeakSet', 'prototype']
  };



  var $concat = functionBind.call(Function.call, Array.prototype.concat);
  var $spliceApply = functionBind.call(Function.apply, Array.prototype.splice);
  var $replace = functionBind.call(Function.call, String.prototype.replace);
  var $strSlice = functionBind.call(Function.call, String.prototype.slice);
  var $exec = functionBind.call(Function.call, RegExp.prototype.exec);

  /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
  var stringToPath = function stringToPath(string) {
  	var first = $strSlice(string, 0, 1);
  	var last = $strSlice(string, -1);
  	if (first === '%' && last !== '%') {
  		throw new syntax('invalid intrinsic syntax, expected closing `%`');
  	} else if (last === '%' && first !== '%') {
  		throw new syntax('invalid intrinsic syntax, expected opening `%`');
  	}
  	var result = [];
  	$replace(string, rePropName, function (match, number, quote, subString) {
  		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
  	});
  	return result;
  };
  /* end adaptation */

  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
  	var intrinsicName = name;
  	var alias;
  	if (hasown(LEGACY_ALIASES, intrinsicName)) {
  		alias = LEGACY_ALIASES[intrinsicName];
  		intrinsicName = '%' + alias[0] + '%';
  	}

  	if (hasown(INTRINSICS, intrinsicName)) {
  		var value = INTRINSICS[intrinsicName];
  		if (value === needsEval) {
  			value = doEval(intrinsicName);
  		}
  		if (typeof value === 'undefined' && !allowMissing) {
  			throw new type('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
  		}

  		return {
  			alias: alias,
  			name: intrinsicName,
  			value: value
  		};
  	}

  	throw new syntax('intrinsic ' + name + ' does not exist!');
  };

  var getIntrinsic = function GetIntrinsic(name, allowMissing) {
  	if (typeof name !== 'string' || name.length === 0) {
  		throw new type('intrinsic name must be a non-empty string');
  	}
  	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
  		throw new type('"allowMissing" argument must be a boolean');
  	}

  	if ($exec(/^%?[^%]*%?$/, name) === null) {
  		throw new syntax('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
  	}
  	var parts = stringToPath(name);
  	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

  	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
  	var intrinsicRealName = intrinsic.name;
  	var value = intrinsic.value;
  	var skipFurtherCaching = false;

  	var alias = intrinsic.alias;
  	if (alias) {
  		intrinsicBaseName = alias[0];
  		$spliceApply(parts, $concat([0, 1], alias));
  	}

  	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
  		var part = parts[i];
  		var first = $strSlice(part, 0, 1);
  		var last = $strSlice(part, -1);
  		if (
  			(
  				(first === '"' || first === "'" || first === '`')
  				|| (last === '"' || last === "'" || last === '`')
  			)
  			&& first !== last
  		) {
  			throw new syntax('property names with quotes must have matching quotes');
  		}
  		if (part === 'constructor' || !isOwn) {
  			skipFurtherCaching = true;
  		}

  		intrinsicBaseName += '.' + part;
  		intrinsicRealName = '%' + intrinsicBaseName + '%';

  		if (hasown(INTRINSICS, intrinsicRealName)) {
  			value = INTRINSICS[intrinsicRealName];
  		} else if (value != null) {
  			if (!(part in value)) {
  				if (!allowMissing) {
  					throw new type('base intrinsic for ' + name + ' exists, but the property is not available.');
  				}
  				return void undefined$1;
  			}
  			if ($gOPD && (i + 1) >= parts.length) {
  				var desc = $gOPD(value, part);
  				isOwn = !!desc;

  				// By convention, when a data property is converted to an accessor
  				// property to emulate a data property that does not suffer from
  				// the override mistake, that accessor's getter is marked with
  				// an `originalValue` property. Here, when we detect this, we
  				// uphold the illusion by pretending to see that original data
  				// property, i.e., returning the value rather than the getter
  				// itself.
  				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
  					value = desc.get;
  				} else {
  					value = value[part];
  				}
  			} else {
  				isOwn = hasown(value, part);
  				value = value[part];
  			}

  			if (isOwn && !skipFurtherCaching) {
  				INTRINSICS[intrinsicRealName] = value;
  			}
  		}
  	}
  	return value;
  };

  /** @type {import('.')} */
  var $defineProperty = getIntrinsic('%Object.defineProperty%', true) || false;
  if ($defineProperty) {
  	try {
  		$defineProperty({}, 'a', { value: 1 });
  	} catch (e) {
  		// IE 8 has a broken defineProperty
  		$defineProperty = false;
  	}
  }

  var esDefineProperty = $defineProperty;

  var $gOPD$1 = getIntrinsic('%Object.getOwnPropertyDescriptor%', true);

  if ($gOPD$1) {
  	try {
  		$gOPD$1([], 'length');
  	} catch (e) {
  		// IE 8 has a broken gOPD
  		$gOPD$1 = null;
  	}
  }

  var gopd = $gOPD$1;

  /** @type {import('.')} */
  var defineDataProperty = function defineDataProperty(
  	obj,
  	property,
  	value
  ) {
  	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
  		throw new type('`obj` must be an object or a function`');
  	}
  	if (typeof property !== 'string' && typeof property !== 'symbol') {
  		throw new type('`property` must be a string or a symbol`');
  	}
  	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
  		throw new type('`nonEnumerable`, if provided, must be a boolean or null');
  	}
  	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
  		throw new type('`nonWritable`, if provided, must be a boolean or null');
  	}
  	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
  		throw new type('`nonConfigurable`, if provided, must be a boolean or null');
  	}
  	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
  		throw new type('`loose`, if provided, must be a boolean');
  	}

  	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
  	var nonWritable = arguments.length > 4 ? arguments[4] : null;
  	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
  	var loose = arguments.length > 6 ? arguments[6] : false;

  	/* @type {false | TypedPropertyDescriptor<unknown>} */
  	var desc = !!gopd && gopd(obj, property);

  	if (esDefineProperty) {
  		esDefineProperty(obj, property, {
  			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
  			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
  			value: value,
  			writable: nonWritable === null && desc ? desc.writable : !nonWritable
  		});
  	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
  		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
  		obj[property] = value; // eslint-disable-line no-param-reassign
  	} else {
  		throw new syntax('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
  	}
  };

  var hasPropertyDescriptors = function hasPropertyDescriptors() {
  	return !!esDefineProperty;
  };

  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
  	// node v0.6 has a bug where array lengths can be Set but not Defined
  	if (!esDefineProperty) {
  		return null;
  	}
  	try {
  		return esDefineProperty([], 'length', { value: 1 }).length !== 1;
  	} catch (e) {
  		// In Firefox 4-22, defining length on an array throws an exception.
  		return true;
  	}
  };

  var hasPropertyDescriptors_1 = hasPropertyDescriptors;

  var hasSymbols$2 = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

  var toStr$3 = Object.prototype.toString;
  var concat = Array.prototype.concat;


  var isFunction = function (fn) {
  	return typeof fn === 'function' && toStr$3.call(fn) === '[object Function]';
  };

  var supportsDescriptors = hasPropertyDescriptors_1();

  var defineProperty = function (object, name, value, predicate) {
  	if (name in object) {
  		if (predicate === true) {
  			if (object[name] === value) {
  				return;
  			}
  		} else if (!isFunction(predicate) || !predicate()) {
  			return;
  		}
  	}

  	if (supportsDescriptors) {
  		defineDataProperty(object, name, value, true);
  	} else {
  		defineDataProperty(object, name, value);
  	}
  };

  var defineProperties = function (object, map) {
  	var predicates = arguments.length > 2 ? arguments[2] : {};
  	var props = objectKeys(map);
  	if (hasSymbols$2) {
  		props = concat.call(props, Object.getOwnPropertySymbols(map));
  	}
  	for (var i = 0; i < props.length; i += 1) {
  		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  	}
  };

  defineProperties.supportsDescriptors = !!supportsDescriptors;

  var defineProperties_1 = defineProperties;

  var hasDescriptors = hasPropertyDescriptors_1();



  var $floor = getIntrinsic('%Math.floor%');

  /** @type {import('.')} */
  var setFunctionLength = function setFunctionLength(fn, length) {
  	if (typeof fn !== 'function') {
  		throw new type('`fn` is not a function');
  	}
  	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
  		throw new type('`length` must be a positive 32-bit integer');
  	}

  	var loose = arguments.length > 2 && !!arguments[2];

  	var functionLengthIsConfigurable = true;
  	var functionLengthIsWritable = true;
  	if ('length' in fn && gopd) {
  		var desc = gopd(fn, 'length');
  		if (desc && !desc.configurable) {
  			functionLengthIsConfigurable = false;
  		}
  		if (desc && !desc.writable) {
  			functionLengthIsWritable = false;
  		}
  	}

  	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
  		if (hasDescriptors) {
  			defineDataProperty(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
  		} else {
  			defineDataProperty(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
  		}
  	}
  	return fn;
  };

  var callBind = createCommonjsModule(function (module) {






  var $apply = getIntrinsic('%Function.prototype.apply%');
  var $call = getIntrinsic('%Function.prototype.call%');
  var $reflectApply = getIntrinsic('%Reflect.apply%', true) || functionBind.call($call, $apply);


  var $max = getIntrinsic('%Math.max%');

  module.exports = function callBind(originalFunction) {
  	if (typeof originalFunction !== 'function') {
  		throw new type('a function is required');
  	}
  	var func = $reflectApply(functionBind, $call, arguments);
  	return setFunctionLength(
  		func,
  		1 + $max(0, originalFunction.length - (arguments.length - 1)),
  		true
  	);
  };

  var applyBind = function applyBind() {
  	return $reflectApply(functionBind, $apply, arguments);
  };

  if (esDefineProperty) {
  	esDefineProperty(module.exports, 'apply', { value: applyBind });
  } else {
  	module.exports.apply = applyBind;
  }
  });

  var $indexOf = callBind(getIntrinsic('String.prototype.indexOf'));

  var callBound = function callBoundIntrinsic(name, allowMissing) {
  	var intrinsic = getIntrinsic(name, !!allowMissing);
  	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
  		return callBind(intrinsic);
  	}
  	return intrinsic;
  };

  // modified from https://github.com/es-shims/es6-shim

  var hasSymbols$3 = shams();

  var toObject = Object;
  var $push = callBound('Array.prototype.push');
  var $propIsEnumerable = callBound('Object.prototype.propertyIsEnumerable');
  var originalGetSymbols = hasSymbols$3 ? Object.getOwnPropertySymbols : null;

  // eslint-disable-next-line no-unused-vars
  var implementation$2 = function assign(target, source1) {
  	if (target == null) { throw new TypeError('target must be an object'); }
  	var to = toObject(target); // step 1
  	if (arguments.length === 1) {
  		return to; // step 2
  	}
  	for (var s = 1; s < arguments.length; ++s) {
  		var from = toObject(arguments[s]); // step 3.a.i

  		// step 3.a.ii:
  		var keys = objectKeys(from);
  		var getSymbols = hasSymbols$3 && (Object.getOwnPropertySymbols || originalGetSymbols);
  		if (getSymbols) {
  			var syms = getSymbols(from);
  			for (var j = 0; j < syms.length; ++j) {
  				var key = syms[j];
  				if ($propIsEnumerable(from, key)) {
  					$push(keys, key);
  				}
  			}
  		}

  		// step 3.a.iii:
  		for (var i = 0; i < keys.length; ++i) {
  			var nextKey = keys[i];
  			if ($propIsEnumerable(from, nextKey)) { // step 3.a.iii.2
  				var propValue = from[nextKey]; // step 3.a.iii.2.a
  				to[nextKey] = propValue; // step 3.a.iii.2.b
  			}
  		}
  	}

  	return to; // step 4
  };

  var lacksProperEnumerationOrder = function () {
  	if (!Object.assign) {
  		return false;
  	}
  	/*
  	 * v8, specifically in node 4.x, has a bug with incorrect property enumeration order
  	 * note: this does not detect the bug unless there's 20 characters
  	 */
  	var str = 'abcdefghijklmnopqrst';
  	var letters = str.split('');
  	var map = {};
  	for (var i = 0; i < letters.length; ++i) {
  		map[letters[i]] = letters[i];
  	}
  	var obj = Object.assign({}, map);
  	var actual = '';
  	for (var k in obj) {
  		actual += k;
  	}
  	return str !== actual;
  };

  var assignHasPendingExceptions = function () {
  	if (!Object.assign || !Object.preventExtensions) {
  		return false;
  	}
  	/*
  	 * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
  	 * which is 72% slower than our shim, and Firefox 40's native implementation.
  	 */
  	var thrower = Object.preventExtensions({ 1: 2 });
  	try {
  		Object.assign(thrower, 'xy');
  	} catch (e) {
  		return thrower[1] === 'y';
  	}
  	return false;
  };

  var polyfill = function getPolyfill() {
  	if (!Object.assign) {
  		return implementation$2;
  	}
  	if (lacksProperEnumerationOrder()) {
  		return implementation$2;
  	}
  	if (assignHasPendingExceptions()) {
  		return implementation$2;
  	}
  	return Object.assign;
  };

  var shim = function shimAssign() {
  	var polyfill$1 = polyfill();
  	defineProperties_1(
  		Object,
  		{ assign: polyfill$1 },
  		{ assign: function () { return Object.assign !== polyfill$1; } }
  	);
  	return polyfill$1;
  };

  var polyfill$1 = callBind.apply(polyfill());
  // eslint-disable-next-line no-unused-vars
  var bound = function assign(target, source1) {
  	return polyfill$1(Object, arguments);
  };

  defineProperties_1(bound, {
  	getPolyfill: polyfill,
  	implementation: implementation$2,
  	shim: shim
  });

  var object_assign = bound;

  var functionsHaveNames = function functionsHaveNames() {
  	return typeof function f() {}.name === 'string';
  };

  var gOPD = Object.getOwnPropertyDescriptor;
  if (gOPD) {
  	try {
  		gOPD([], 'length');
  	} catch (e) {
  		// IE 8 has a broken gOPD
  		gOPD = null;
  	}
  }

  functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
  	if (!functionsHaveNames() || !gOPD) {
  		return false;
  	}
  	var desc = gOPD(function () {}, 'name');
  	return !!desc && !!desc.configurable;
  };

  var $bind = Function.prototype.bind;

  functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
  	return functionsHaveNames() && typeof $bind === 'function' && function f() {}.bind().name !== '';
  };

  var functionsHaveNames_1 = functionsHaveNames;

  var hasDescriptors$1 = hasPropertyDescriptors_1();
  var functionsHaveConfigurableNames = functionsHaveNames_1.functionsHaveConfigurableNames();



  /** @type {import('.')} */
  var setFunctionName = function setFunctionName(fn, name) {
  	if (typeof fn !== 'function') {
  		throw new type('`fn` is not a function');
  	}
  	var loose = arguments.length > 2 && !!arguments[2];
  	if (!loose || functionsHaveConfigurableNames) {
  		if (hasDescriptors$1) {
  			defineDataProperty(/** @type {Parameters<define>[0]} */ (fn), 'name', name, true, true);
  		} else {
  			defineDataProperty(/** @type {Parameters<define>[0]} */ (fn), 'name', name);
  		}
  	}
  	return fn;
  };

  var $Object$1 = Object;

  var implementation$3 = setFunctionName(function flags() {
  	if (this == null || this !== $Object$1(this)) {
  		throw new type('RegExp.prototype.flags getter called on non-object');
  	}
  	var result = '';
  	if (this.hasIndices) {
  		result += 'd';
  	}
  	if (this.global) {
  		result += 'g';
  	}
  	if (this.ignoreCase) {
  		result += 'i';
  	}
  	if (this.multiline) {
  		result += 'm';
  	}
  	if (this.dotAll) {
  		result += 's';
  	}
  	if (this.unicode) {
  		result += 'u';
  	}
  	if (this.unicodeSets) {
  		result += 'v';
  	}
  	if (this.sticky) {
  		result += 'y';
  	}
  	return result;
  }, 'get flags', true);

  var supportsDescriptors$1 = defineProperties_1.supportsDescriptors;
  var $gOPD$2 = Object.getOwnPropertyDescriptor;

  var polyfill$2 = function getPolyfill() {
  	if (supportsDescriptors$1 && (/a/mig).flags === 'gim') {
  		var descriptor = $gOPD$2(RegExp.prototype, 'flags');
  		if (
  			descriptor
  			&& typeof descriptor.get === 'function'
  			&& typeof RegExp.prototype.dotAll === 'boolean'
  			&& typeof RegExp.prototype.hasIndices === 'boolean'
  		) {
  			/* eslint getter-return: 0 */
  			var calls = '';
  			var o = {};
  			Object.defineProperty(o, 'hasIndices', {
  				get: function () {
  					calls += 'd';
  				}
  			});
  			Object.defineProperty(o, 'sticky', {
  				get: function () {
  					calls += 'y';
  				}
  			});
  			if (calls === 'dy') {
  				return descriptor.get;
  			}
  		}
  	}
  	return implementation$3;
  };

  var supportsDescriptors$2 = defineProperties_1.supportsDescriptors;

  var gOPD$1 = Object.getOwnPropertyDescriptor;
  var defineProperty$1 = Object.defineProperty;
  var TypeErr = TypeError;
  var getProto$1 = Object.getPrototypeOf;
  var regex = /a/;

  var shim$1 = function shimFlags() {
  	if (!supportsDescriptors$2 || !getProto$1) {
  		throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');
  	}
  	var polyfill = polyfill$2();
  	var proto = getProto$1(regex);
  	var descriptor = gOPD$1(proto, 'flags');
  	if (!descriptor || descriptor.get !== polyfill) {
  		defineProperty$1(proto, 'flags', {
  			configurable: true,
  			enumerable: false,
  			get: polyfill
  		});
  	}
  	return polyfill;
  };

  var flagsBound = callBind(polyfill$2());

  defineProperties_1(flagsBound, {
  	getPolyfill: polyfill$2,
  	implementation: implementation$3,
  	shim: shim$1
  });

  var regexp_prototype_flags = flagsBound;

  /** @type {import('.')} */
  var shams$1 = function hasToStringTagShams() {
  	return shams() && !!Symbol.toStringTag;
  };

  var hasToStringTag = shams$1();


  var $toString = callBound('Object.prototype.toString');

  var isStandardArguments = function isArguments(value) {
  	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
  		return false;
  	}
  	return $toString(value) === '[object Arguments]';
  };

  var isLegacyArguments = function isArguments(value) {
  	if (isStandardArguments(value)) {
  		return true;
  	}
  	return value !== null &&
  		typeof value === 'object' &&
  		typeof value.length === 'number' &&
  		value.length >= 0 &&
  		$toString(value) !== '[object Array]' &&
  		$toString(value.callee) === '[object Function]';
  };

  var supportsStandardArguments = (function () {
  	return isStandardArguments(arguments);
  }());

  isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

  var isArguments$1 = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read$1 (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write$1 (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }
  Buffer.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer.concat = function concat (list, length) {
    if (!isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer.prototype._isBuffer = true;

  function swap$1 (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap$1(this, i, i + 1);
    }
    return this
  };

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap$1(this, i, i + 3);
      swap$1(this, i + 1, i + 2);
    }
    return this
  };

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap$1(this, i, i + 7);
      swap$1(this, i + 1, i + 6);
      swap$1(this, i + 2, i + 5);
      swap$1(this, i + 3, i + 4);
    }
    return this
  };

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  };

  Buffer.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read$1(this, offset, true, 23, 4)
  };

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read$1(this, offset, false, 23, 4)
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read$1(this, offset, true, 52, 8)
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read$1(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    write$1(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    write$1(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var inherits;
  if (typeof Object.create === 'function'){
    inherits = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  var inherits$1 = inherits;

  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject$1(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  }

  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  function deprecate(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global$1.process)) {
      return function() {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron))
      debugEnviron =  '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;
        debugs[set] = function() {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  }

  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }

  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction$1(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction$1(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray$1(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction$1(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber$1(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty$1(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty$1(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray$1(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isNumber$1(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject$1(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject$1(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject$1(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject$1(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction$1(arg) {
    return typeof arg === 'function';
  }

  function isPrimitive(arg) {
    return arg === null ||
           typeof arg === 'boolean' ||
           typeof arg === 'number' ||
           typeof arg === 'string' ||
           typeof arg === 'symbol' ||  // ES6 symbol
           typeof arg === 'undefined';
  }

  function isBuffer$1(maybeBuf) {
    return Buffer.isBuffer(maybeBuf);
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }


  function pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
  }


  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                'Oct', 'Nov', 'Dec'];

  // 26 Feb 16:19:34
  function timestamp() {
    var d = new Date();
    var time = [pad(d.getHours()),
                pad(d.getMinutes()),
                pad(d.getSeconds())].join(':');
    return [d.getDate(), months[d.getMonth()], time].join(' ');
  }


  // log is just a thin wrapper to console.log that prepends a timestamp
  function log() {
    console.log('%s - %s', timestamp(), format.apply(null, arguments));
  }

  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject$1(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  function hasOwnProperty$1(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  var util = {
    inherits: inherits$1,
    _extend: _extend,
    log: log,
    isBuffer: isBuffer$1,
    isPrimitive: isPrimitive,
    isFunction: isFunction$1,
    isError: isError,
    isDate: isDate,
    isObject: isObject$1,
    isRegExp: isRegExp,
    isUndefined: isUndefined,
    isSymbol: isSymbol,
    isString: isString,
    isNumber: isNumber$1,
    isNullOrUndefined: isNullOrUndefined,
    isNull: isNull,
    isBoolean: isBoolean,
    isArray: isArray$1,
    inspect: inspect,
    deprecate: deprecate,
    format: format,
    debuglog: debuglog
  };

  var util$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    format: format,
    deprecate: deprecate,
    debuglog: debuglog,
    inspect: inspect,
    isArray: isArray$1,
    isBoolean: isBoolean,
    isNull: isNull,
    isNullOrUndefined: isNullOrUndefined,
    isNumber: isNumber$1,
    isString: isString,
    isSymbol: isSymbol,
    isUndefined: isUndefined,
    isRegExp: isRegExp,
    isObject: isObject$1,
    isDate: isDate,
    isError: isError,
    isFunction: isFunction$1,
    isPrimitive: isPrimitive,
    isBuffer: isBuffer$1,
    log: log,
    inherits: inherits$1,
    _extend: _extend,
    'default': util
  });

  var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(util$1);

  var util_inspect = require$$0$1.inspect;

  var hasMap = typeof Map === 'function' && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === 'function' && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString$1 = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice = String.prototype.slice;
  var $replace$1 = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat$1 = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor$1 = Math.floor;
  var bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'object';
  // ie, `has-tostringtag/shams
  var toStringTag = typeof Symbol === 'function' && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? 'object' : 'symbol')
      ? Symbol.toStringTag
      : null;
  var isEnumerable$1 = Object.prototype.propertyIsEnumerable;

  var gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || (
      [].__proto__ === Array.prototype // eslint-disable-line no-proto
          ? function (O) {
              return O.__proto__; // eslint-disable-line no-proto
          }
          : null
  );

  function addNumericSeparator(num, str) {
      if (
          num === Infinity
          || num === -Infinity
          || num !== num
          || (num && num > -1000 && num < 1000)
          || $test.call(/e/, str)
      ) {
          return str;
      }
      var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
      if (typeof num === 'number') {
          var int = num < 0 ? -$floor$1(-num) : $floor$1(num); // trunc(num)
          if (int !== num) {
              var intStr = String(int);
              var dec = $slice.call(str, intStr.length + 1);
              return $replace$1.call(intStr, sepRegex, '$&_') + '.' + $replace$1.call($replace$1.call(dec, /([0-9]{3})/g, '$&_'), /_$/, '');
          }
      }
      return $replace$1.call(str, sepRegex, '$&_');
  }


  var inspectCustom = util_inspect.custom;
  var inspectSymbol = isSymbol$1(inspectCustom) ? inspectCustom : null;

  var objectInspect = function inspect_(obj, options, depth, seen) {
      var opts = options || {};

      if (has$1(opts, 'quoteStyle') && (opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double')) {
          throw new TypeError('option "quoteStyle" must be "single" or "double"');
      }
      if (
          has$1(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number'
              ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity
              : opts.maxStringLength !== null
          )
      ) {
          throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
      }
      var customInspect = has$1(opts, 'customInspect') ? opts.customInspect : true;
      if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {
          throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
      }

      if (
          has$1(opts, 'indent')
          && opts.indent !== null
          && opts.indent !== '\t'
          && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)
      ) {
          throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
      }
      if (has$1(opts, 'numericSeparator') && typeof opts.numericSeparator !== 'boolean') {
          throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
      }
      var numericSeparator = opts.numericSeparator;

      if (typeof obj === 'undefined') {
          return 'undefined';
      }
      if (obj === null) {
          return 'null';
      }
      if (typeof obj === 'boolean') {
          return obj ? 'true' : 'false';
      }

      if (typeof obj === 'string') {
          return inspectString(obj, opts);
      }
      if (typeof obj === 'number') {
          if (obj === 0) {
              return Infinity / obj > 0 ? '0' : '-0';
          }
          var str = String(obj);
          return numericSeparator ? addNumericSeparator(obj, str) : str;
      }
      if (typeof obj === 'bigint') {
          var bigIntStr = String(obj) + 'n';
          return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
      }

      var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;
      if (typeof depth === 'undefined') { depth = 0; }
      if (depth >= maxDepth && maxDepth > 0 && typeof obj === 'object') {
          return isArray$2(obj) ? '[Array]' : '[Object]';
      }

      var indent = getIndent(opts, depth);

      if (typeof seen === 'undefined') {
          seen = [];
      } else if (indexOf(seen, obj) >= 0) {
          return '[Circular]';
      }

      function inspect(value, from, noIndent) {
          if (from) {
              seen = $arrSlice.call(seen);
              seen.push(from);
          }
          if (noIndent) {
              var newOpts = {
                  depth: opts.depth
              };
              if (has$1(opts, 'quoteStyle')) {
                  newOpts.quoteStyle = opts.quoteStyle;
              }
              return inspect_(value, newOpts, depth + 1, seen);
          }
          return inspect_(value, opts, depth + 1, seen);
      }

      if (typeof obj === 'function' && !isRegExp$1(obj)) { // in older engines, regexes are callable
          var name = nameOf(obj);
          var keys = arrObjKeys(obj, inspect);
          return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + $join.call(keys, ', ') + ' }' : '');
      }
      if (isSymbol$1(obj)) {
          var symString = hasShammedSymbols ? $replace$1.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, '$1') : symToString.call(obj);
          return typeof obj === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;
      }
      if (isElement$2(obj)) {
          var s = '<' + $toLowerCase.call(String(obj.nodeName));
          var attrs = obj.attributes || [];
          for (var i = 0; i < attrs.length; i++) {
              s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);
          }
          s += '>';
          if (obj.childNodes && obj.childNodes.length) { s += '...'; }
          s += '</' + $toLowerCase.call(String(obj.nodeName)) + '>';
          return s;
      }
      if (isArray$2(obj)) {
          if (obj.length === 0) { return '[]'; }
          var xs = arrObjKeys(obj, inspect);
          if (indent && !singleLineValues(xs)) {
              return '[' + indentedJoin(xs, indent) + ']';
          }
          return '[ ' + $join.call(xs, ', ') + ' ]';
      }
      if (isError$1(obj)) {
          var parts = arrObjKeys(obj, inspect);
          if (!('cause' in Error.prototype) && 'cause' in obj && !isEnumerable$1.call(obj, 'cause')) {
              return '{ [' + String(obj) + '] ' + $join.call($concat$1.call('[cause]: ' + inspect(obj.cause), parts), ', ') + ' }';
          }
          if (parts.length === 0) { return '[' + String(obj) + ']'; }
          return '{ [' + String(obj) + '] ' + $join.call(parts, ', ') + ' }';
      }
      if (typeof obj === 'object' && customInspect) {
          if (inspectSymbol && typeof obj[inspectSymbol] === 'function' && util_inspect) {
              return util_inspect(obj, { depth: maxDepth - depth });
          } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {
              return obj.inspect();
          }
      }
      if (isMap(obj)) {
          var mapParts = [];
          if (mapForEach) {
              mapForEach.call(obj, function (value, key) {
                  mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));
              });
          }
          return collectionOf('Map', mapSize.call(obj), mapParts, indent);
      }
      if (isSet(obj)) {
          var setParts = [];
          if (setForEach) {
              setForEach.call(obj, function (value) {
                  setParts.push(inspect(value, obj));
              });
          }
          return collectionOf('Set', setSize.call(obj), setParts, indent);
      }
      if (isWeakMap(obj)) {
          return weakCollectionOf('WeakMap');
      }
      if (isWeakSet(obj)) {
          return weakCollectionOf('WeakSet');
      }
      if (isWeakRef(obj)) {
          return weakCollectionOf('WeakRef');
      }
      if (isNumber$2(obj)) {
          return markBoxed(inspect(Number(obj)));
      }
      if (isBigInt(obj)) {
          return markBoxed(inspect(bigIntValueOf.call(obj)));
      }
      if (isBoolean$1(obj)) {
          return markBoxed(booleanValueOf.call(obj));
      }
      if (isString$1(obj)) {
          return markBoxed(inspect(String(obj)));
      }
      // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
      /* eslint-env browser */
      if (typeof window !== 'undefined' && obj === window) {
          return '{ [object Window] }';
      }
      if (
          (typeof globalThis !== 'undefined' && obj === globalThis)
          || (typeof commonjsGlobal !== 'undefined' && obj === commonjsGlobal)
      ) {
          return '{ [object globalThis] }';
      }
      if (!isDate$1(obj) && !isRegExp$1(obj)) {
          var ys = arrObjKeys(obj, inspect);
          var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
          var protoTag = obj instanceof Object ? '' : 'null prototype';
          var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr$4(obj), 8, -1) : protoTag ? 'Object' : '';
          var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';
          var tag = constructorTag + (stringTag || protoTag ? '[' + $join.call($concat$1.call([], stringTag || [], protoTag || []), ': ') + '] ' : '');
          if (ys.length === 0) { return tag + '{}'; }
          if (indent) {
              return tag + '{' + indentedJoin(ys, indent) + '}';
          }
          return tag + '{ ' + $join.call(ys, ', ') + ' }';
      }
      return String(obj);
  };

  function wrapQuotes(s, defaultStyle, opts) {
      var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '"' : "'";
      return quoteChar + s + quoteChar;
  }

  function quote(s) {
      return $replace$1.call(String(s), /"/g, '&quot;');
  }

  function isArray$2(obj) { return toStr$4(obj) === '[object Array]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isDate$1(obj) { return toStr$4(obj) === '[object Date]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isRegExp$1(obj) { return toStr$4(obj) === '[object RegExp]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isError$1(obj) { return toStr$4(obj) === '[object Error]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isString$1(obj) { return toStr$4(obj) === '[object String]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isNumber$2(obj) { return toStr$4(obj) === '[object Number]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }
  function isBoolean$1(obj) { return toStr$4(obj) === '[object Boolean]' && (!toStringTag || !(typeof obj === 'object' && toStringTag in obj)); }

  // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
  function isSymbol$1(obj) {
      if (hasShammedSymbols) {
          return obj && typeof obj === 'object' && obj instanceof Symbol;
      }
      if (typeof obj === 'symbol') {
          return true;
      }
      if (!obj || typeof obj !== 'object' || !symToString) {
          return false;
      }
      try {
          symToString.call(obj);
          return true;
      } catch (e) {}
      return false;
  }

  function isBigInt(obj) {
      if (!obj || typeof obj !== 'object' || !bigIntValueOf) {
          return false;
      }
      try {
          bigIntValueOf.call(obj);
          return true;
      } catch (e) {}
      return false;
  }

  var hasOwn = Object.prototype.hasOwnProperty || function (key) { return key in this; };
  function has$1(obj, key) {
      return hasOwn.call(obj, key);
  }

  function toStr$4(obj) {
      return objectToString$1.call(obj);
  }

  function nameOf(f) {
      if (f.name) { return f.name; }
      var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
      if (m) { return m[1]; }
      return null;
  }

  function indexOf(xs, x) {
      if (xs.indexOf) { return xs.indexOf(x); }
      for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) { return i; }
      }
      return -1;
  }

  function isMap(x) {
      if (!mapSize || !x || typeof x !== 'object') {
          return false;
      }
      try {
          mapSize.call(x);
          try {
              setSize.call(x);
          } catch (s) {
              return true;
          }
          return x instanceof Map; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isWeakMap(x) {
      if (!weakMapHas || !x || typeof x !== 'object') {
          return false;
      }
      try {
          weakMapHas.call(x, weakMapHas);
          try {
              weakSetHas.call(x, weakSetHas);
          } catch (s) {
              return true;
          }
          return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isWeakRef(x) {
      if (!weakRefDeref || !x || typeof x !== 'object') {
          return false;
      }
      try {
          weakRefDeref.call(x);
          return true;
      } catch (e) {}
      return false;
  }

  function isSet(x) {
      if (!setSize || !x || typeof x !== 'object') {
          return false;
      }
      try {
          setSize.call(x);
          try {
              mapSize.call(x);
          } catch (m) {
              return true;
          }
          return x instanceof Set; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isWeakSet(x) {
      if (!weakSetHas || !x || typeof x !== 'object') {
          return false;
      }
      try {
          weakSetHas.call(x, weakSetHas);
          try {
              weakMapHas.call(x, weakMapHas);
          } catch (s) {
              return true;
          }
          return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
      } catch (e) {}
      return false;
  }

  function isElement$2(x) {
      if (!x || typeof x !== 'object') { return false; }
      if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {
          return true;
      }
      return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';
  }

  function inspectString(str, opts) {
      if (str.length > opts.maxStringLength) {
          var remaining = str.length - opts.maxStringLength;
          var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');
          return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
      }
      // eslint-disable-next-line no-control-regex
      var s = $replace$1.call($replace$1.call(str, /(['\\])/g, '\\$1'), /[\x00-\x1f]/g, lowbyte);
      return wrapQuotes(s, 'single', opts);
  }

  function lowbyte(c) {
      var n = c.charCodeAt(0);
      var x = {
          8: 'b',
          9: 't',
          10: 'n',
          12: 'f',
          13: 'r'
      }[n];
      if (x) { return '\\' + x; }
      return '\\x' + (n < 0x10 ? '0' : '') + $toUpperCase.call(n.toString(16));
  }

  function markBoxed(str) {
      return 'Object(' + str + ')';
  }

  function weakCollectionOf(type) {
      return type + ' { ? }';
  }

  function collectionOf(type, size, entries, indent) {
      var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ', ');
      return type + ' (' + size + ') {' + joinedEntries + '}';
  }

  function singleLineValues(xs) {
      for (var i = 0; i < xs.length; i++) {
          if (indexOf(xs[i], '\n') >= 0) {
              return false;
          }
      }
      return true;
  }

  function getIndent(opts, depth) {
      var baseIndent;
      if (opts.indent === '\t') {
          baseIndent = '\t';
      } else if (typeof opts.indent === 'number' && opts.indent > 0) {
          baseIndent = $join.call(Array(opts.indent + 1), ' ');
      } else {
          return null;
      }
      return {
          base: baseIndent,
          prev: $join.call(Array(depth + 1), baseIndent)
      };
  }

  function indentedJoin(xs, indent) {
      if (xs.length === 0) { return ''; }
      var lineJoiner = '\n' + indent.prev + indent.base;
      return lineJoiner + $join.call(xs, ',' + lineJoiner) + '\n' + indent.prev;
  }

  function arrObjKeys(obj, inspect) {
      var isArr = isArray$2(obj);
      var xs = [];
      if (isArr) {
          xs.length = obj.length;
          for (var i = 0; i < obj.length; i++) {
              xs[i] = has$1(obj, i) ? inspect(obj[i], obj) : '';
          }
      }
      var syms = typeof gOPS === 'function' ? gOPS(obj) : [];
      var symMap;
      if (hasShammedSymbols) {
          symMap = {};
          for (var k = 0; k < syms.length; k++) {
              symMap['$' + syms[k]] = syms[k];
          }
      }

      for (var key in obj) { // eslint-disable-line no-restricted-syntax
          if (!has$1(obj, key)) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
          if (isArr && String(Number(key)) === key && key < obj.length) { continue; } // eslint-disable-line no-restricted-syntax, no-continue
          if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {
              // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section
              continue; // eslint-disable-line no-restricted-syntax, no-continue
          } else if ($test.call(/[^\w$]/, key)) {
              xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));
          } else {
              xs.push(key + ': ' + inspect(obj[key], obj));
          }
      }
      if (typeof gOPS === 'function') {
          for (var j = 0; j < syms.length; j++) {
              if (isEnumerable$1.call(obj, syms[j])) {
                  xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));
              }
          }
      }
      return xs;
  }

  var $WeakMap = getIntrinsic('%WeakMap%', true);
  var $Map = getIntrinsic('%Map%', true);

  var $weakMapGet = callBound('WeakMap.prototype.get', true);
  var $weakMapSet = callBound('WeakMap.prototype.set', true);
  var $weakMapHas = callBound('WeakMap.prototype.has', true);
  var $mapGet = callBound('Map.prototype.get', true);
  var $mapSet = callBound('Map.prototype.set', true);
  var $mapHas = callBound('Map.prototype.has', true);

  /*
  * This function traverses the list returning the node corresponding to the given key.
  *
  * That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.
  */
  /** @type {import('.').listGetNode} */
  var listGetNode = function (list, key) { // eslint-disable-line consistent-return
  	/** @type {typeof list | NonNullable<(typeof list)['next']>} */
  	var prev = list;
  	/** @type {(typeof list)['next']} */
  	var curr;
  	for (; (curr = prev.next) !== null; prev = curr) {
  		if (curr.key === key) {
  			prev.next = curr.next;
  			// eslint-disable-next-line no-extra-parens
  			curr.next = /** @type {NonNullable<typeof list.next>} */ (list.next);
  			list.next = curr; // eslint-disable-line no-param-reassign
  			return curr;
  		}
  	}
  };

  /** @type {import('.').listGet} */
  var listGet = function (objects, key) {
  	var node = listGetNode(objects, key);
  	return node && node.value;
  };
  /** @type {import('.').listSet} */
  var listSet = function (objects, key, value) {
  	var node = listGetNode(objects, key);
  	if (node) {
  		node.value = value;
  	} else {
  		// Prepend the new node to the beginning of the list
  		objects.next = /** @type {import('.').ListNode<typeof value>} */ ({ // eslint-disable-line no-param-reassign, no-extra-parens
  			key: key,
  			next: objects.next,
  			value: value
  		});
  	}
  };
  /** @type {import('.').listHas} */
  var listHas = function (objects, key) {
  	return !!listGetNode(objects, key);
  };

  /** @type {import('.')} */
  var sideChannel = function getSideChannel() {
  	/** @type {WeakMap<object, unknown>} */ var $wm;
  	/** @type {Map<object, unknown>} */ var $m;
  	/** @type {import('.').RootNode<unknown>} */ var $o;

  	/** @type {import('.').Channel} */
  	var channel = {
  		assert: function (key) {
  			if (!channel.has(key)) {
  				throw new type('Side channel does not contain ' + objectInspect(key));
  			}
  		},
  		get: function (key) { // eslint-disable-line consistent-return
  			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
  				if ($wm) {
  					return $weakMapGet($wm, key);
  				}
  			} else if ($Map) {
  				if ($m) {
  					return $mapGet($m, key);
  				}
  			} else {
  				if ($o) { // eslint-disable-line no-lonely-if
  					return listGet($o, key);
  				}
  			}
  		},
  		has: function (key) {
  			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
  				if ($wm) {
  					return $weakMapHas($wm, key);
  				}
  			} else if ($Map) {
  				if ($m) {
  					return $mapHas($m, key);
  				}
  			} else {
  				if ($o) { // eslint-disable-line no-lonely-if
  					return listHas($o, key);
  				}
  			}
  			return false;
  		},
  		set: function (key, value) {
  			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {
  				if (!$wm) {
  					$wm = new $WeakMap();
  				}
  				$weakMapSet($wm, key, value);
  			} else if ($Map) {
  				if (!$m) {
  					$m = new $Map();
  				}
  				$mapSet($m, key, value);
  			} else {
  				if (!$o) {
  					// Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head
  					$o = { key: {}, next: null };
  				}
  				listSet($o, key, value);
  			}
  		}
  	};
  	return channel;
  };

  var channel = sideChannel();



  var SLOT = {
  	assert: function (O, slot) {
  		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
  			throw new type('`O` is not an object');
  		}
  		if (typeof slot !== 'string') {
  			throw new type('`slot` must be a string');
  		}
  		channel.assert(O);
  		if (!SLOT.has(O, slot)) {
  			throw new type('`' + slot + '` is not present on `O`');
  		}
  	},
  	get: function (O, slot) {
  		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
  			throw new type('`O` is not an object');
  		}
  		if (typeof slot !== 'string') {
  			throw new type('`slot` must be a string');
  		}
  		var slots = channel.get(O);
  		return slots && slots['$' + slot];
  	},
  	has: function (O, slot) {
  		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
  			throw new type('`O` is not an object');
  		}
  		if (typeof slot !== 'string') {
  			throw new type('`slot` must be a string');
  		}
  		var slots = channel.get(O);
  		return !!slots && hasown(slots, '$' + slot);
  	},
  	set: function (O, slot, V) {
  		if (!O || (typeof O !== 'object' && typeof O !== 'function')) {
  			throw new type('`O` is not an object');
  		}
  		if (typeof slot !== 'string') {
  			throw new type('`slot` must be a string');
  		}
  		var slots = channel.get(O);
  		if (!slots) {
  			slots = {};
  			channel.set(O, slots);
  		}
  		slots['$' + slot] = V;
  	}
  };

  if (Object.freeze) {
  	Object.freeze(SLOT);
  }

  var internalSlot = SLOT;

  var $SyntaxError = SyntaxError;
  var $StopIteration = typeof StopIteration === 'object' ? StopIteration : null;

  var stopIterationIterator = function getStopIterationIterator(origIterator) {
  	if (!$StopIteration) {
  		throw new $SyntaxError('this environment lacks StopIteration');
  	}

  	internalSlot.set(origIterator, '[[Done]]', false);

  	var siIterator = {
  		next: function next() {
  			var iterator = internalSlot.get(this, '[[Iterator]]');
  			var done = internalSlot.get(iterator, '[[Done]]');
  			try {
  				return {
  					done: done,
  					value: done ? void undefined : iterator.next()
  				};
  			} catch (e) {
  				internalSlot.set(iterator, '[[Done]]', true);
  				if (e !== $StopIteration) {
  					throw e;
  				}
  				return {
  					done: true,
  					value: void undefined
  				};
  			}
  		}
  	};

  	internalSlot.set(siIterator, '[[Iterator]]', origIterator);

  	return siIterator;
  };

  var toString$1 = {}.toString;

  var isarray = Array.isArray || function (arr) {
    return toString$1.call(arr) == '[object Array]';
  };

  var strValue = String.prototype.valueOf;
  var tryStringObject = function tryStringObject(value) {
  	try {
  		strValue.call(value);
  		return true;
  	} catch (e) {
  		return false;
  	}
  };
  var toStr$5 = Object.prototype.toString;
  var strClass = '[object String]';
  var hasToStringTag$1 = shams$1();

  var isString$2 = function isString(value) {
  	if (typeof value === 'string') {
  		return true;
  	}
  	if (typeof value !== 'object') {
  		return false;
  	}
  	return hasToStringTag$1 ? tryStringObject(value) : toStr$5.call(value) === strClass;
  };

  /** @const */
  var $Map$1 = typeof Map === 'function' && Map.prototype ? Map : null;
  var $Set = typeof Set === 'function' && Set.prototype ? Set : null;

  var exported;

  if (!$Map$1) {
  	/** @type {import('.')} */
  	// eslint-disable-next-line no-unused-vars
  	exported = function isMap(x) {
  		// `Map` is not present in this environment.
  		return false;
  	};
  }

  var $mapHas$1 = $Map$1 ? Map.prototype.has : null;
  var $setHas = $Set ? Set.prototype.has : null;
  if (!exported && !$mapHas$1) {
  	/** @type {import('.')} */
  	// eslint-disable-next-line no-unused-vars
  	exported = function isMap(x) {
  		// `Map` does not have a `has` method
  		return false;
  	};
  }

  /** @type {import('.')} */
  var isMap$1 = exported || function isMap(x) {
  	if (!x || typeof x !== 'object') {
  		return false;
  	}
  	try {
  		$mapHas$1.call(x);
  		if ($setHas) {
  			try {
  				$setHas.call(x);
  			} catch (e) {
  				return true;
  			}
  		}
  		// @ts-expect-error TS can't figure out that $Map is always truthy here
  		return x instanceof $Map$1; // core-js workaround, pre-v2.5.0
  	} catch (e) {}
  	return false;
  };

  var $Map$2 = typeof Map === 'function' && Map.prototype ? Map : null;
  var $Set$1 = typeof Set === 'function' && Set.prototype ? Set : null;

  var exported$1;

  if (!$Set$1) {
  	/** @type {import('.')} */
  	// eslint-disable-next-line no-unused-vars
  	exported$1 = function isSet(x) {
  		// `Set` is not present in this environment.
  		return false;
  	};
  }

  var $mapHas$2 = $Map$2 ? Map.prototype.has : null;
  var $setHas$1 = $Set$1 ? Set.prototype.has : null;
  if (!exported$1 && !$setHas$1) {
  	/** @type {import('.')} */
  	// eslint-disable-next-line no-unused-vars
  	exported$1 = function isSet(x) {
  		// `Set` does not have a `has` method
  		return false;
  	};
  }

  /** @type {import('.')} */
  var isSet$1 = exported$1 || function isSet(x) {
  	if (!x || typeof x !== 'object') {
  		return false;
  	}
  	try {
  		$setHas$1.call(x);
  		if ($mapHas$2) {
  			try {
  				$mapHas$2.call(x);
  			} catch (e) {
  				return true;
  			}
  		}
  		// @ts-expect-error TS can't figure out that $Set is always truthy here
  		return x instanceof $Set$1; // core-js workaround, pre-v2.5.0
  	} catch (e) {}
  	return false;
  };

  var esGetIterator = createCommonjsModule(function (module) {

  /* eslint global-require: 0 */
  // the code is structured this way so that bundlers can
  // alias out `has-symbols` to `() => true` or `() => false` if your target
  // environments' Symbol capabilities are known, and then use
  // dead code elimination on the rest of this module.
  //
  // Similarly, `isarray` can be aliased to `Array.isArray` if
  // available in all target environments.




  if (hasSymbols() || shams()) {
  	var $iterator = Symbol.iterator;
  	// Symbol is available natively or shammed
  	// natively:
  	//  - Chrome >= 38
  	//  - Edge 12-14?, Edge >= 15 for sure
  	//  - FF >= 36
  	//  - Safari >= 9
  	//  - node >= 0.12
  	module.exports = function getIterator(iterable) {
  		// alternatively, `iterable[$iterator]?.()`
  		if (iterable != null && typeof iterable[$iterator] !== 'undefined') {
  			return iterable[$iterator]();
  		}
  		if (isArguments$1(iterable)) {
  			// arguments objects lack Symbol.iterator
  			// - node 0.12
  			return Array.prototype[$iterator].call(iterable);
  		}
  	};
  } else {
  	// Symbol is not available, native or shammed
  	var isArray = isarray;
  	var isString = isString$2;
  	var GetIntrinsic = getIntrinsic;
  	var $Map = GetIntrinsic('%Map%', true);
  	var $Set = GetIntrinsic('%Set%', true);
  	var callBound$1 = callBound;
  	var $arrayPush = callBound$1('Array.prototype.push');
  	var $charCodeAt = callBound$1('String.prototype.charCodeAt');
  	var $stringSlice = callBound$1('String.prototype.slice');

  	var advanceStringIndex = function advanceStringIndex(S, index) {
  		var length = S.length;
  		if ((index + 1) >= length) {
  			return index + 1;
  		}

  		var first = $charCodeAt(S, index);
  		if (first < 0xD800 || first > 0xDBFF) {
  			return index + 1;
  		}

  		var second = $charCodeAt(S, index + 1);
  		if (second < 0xDC00 || second > 0xDFFF) {
  			return index + 1;
  		}

  		return index + 2;
  	};

  	var getArrayIterator = function getArrayIterator(arraylike) {
  		var i = 0;
  		return {
  			next: function next() {
  				var done = i >= arraylike.length;
  				var value;
  				if (!done) {
  					value = arraylike[i];
  					i += 1;
  				}
  				return {
  					done: done,
  					value: value
  				};
  			}
  		};
  	};

  	var getNonCollectionIterator = function getNonCollectionIterator(iterable, noPrimordialCollections) {
  		if (isArray(iterable) || isArguments$1(iterable)) {
  			return getArrayIterator(iterable);
  		}
  		if (isString(iterable)) {
  			var i = 0;
  			return {
  				next: function next() {
  					var nextIndex = advanceStringIndex(iterable, i);
  					var value = $stringSlice(iterable, i, nextIndex);
  					i = nextIndex;
  					return {
  						done: nextIndex > iterable.length,
  						value: value
  					};
  				}
  			};
  		}

  		// es6-shim and es-shims' es-map use a string "_es6-shim iterator_" property on different iterables, such as MapIterator.
  		if (noPrimordialCollections && typeof iterable['_es6-shim iterator_'] !== 'undefined') {
  			return iterable['_es6-shim iterator_']();
  		}
  	};

  	if (!$Map && !$Set) {
  		// the only language iterables are Array, String, arguments
  		// - Safari <= 6.0
  		// - Chrome < 38
  		// - node < 0.12
  		// - FF < 13
  		// - IE < 11
  		// - Edge < 11

  		module.exports = function getIterator(iterable) {
  			if (iterable != null) {
  				return getNonCollectionIterator(iterable, true);
  			}
  		};
  	} else {
  		// either Map or Set are available, but Symbol is not
  		// - es6-shim on an ES5 browser
  		// - Safari 6.2 (maybe 6.1?)
  		// - FF v[13, 36)
  		// - IE 11
  		// - Edge 11
  		// - Safari v[6, 9)

  		var isMap = isMap$1;
  		var isSet = isSet$1;

  		// Firefox >= 27, IE 11, Safari 6.2 - 9, Edge 11, es6-shim in older envs, all have forEach
  		var $mapForEach = callBound$1('Map.prototype.forEach', true);
  		var $setForEach = callBound$1('Set.prototype.forEach', true);
  		if (typeof browser$1 === 'undefined' || !browser$1.versions || !browser$1.versions.node) { // "if is not node"

  			// Firefox 17 - 26 has `.iterator()`, whose iterator `.next()` either
  			// returns a value, or throws a StopIteration object. These browsers
  			// do not have any other mechanism for iteration.
  			var $mapIterator = callBound$1('Map.prototype.iterator', true);
  			var $setIterator = callBound$1('Set.prototype.iterator', true);
  		}
  		// Firefox 27-35, and some older es6-shim versions, use a string "@@iterator" property
  		// this returns a proper iterator object, so we should use it instead of forEach.
  		// newer es6-shim versions use a string "_es6-shim iterator_" property.
  		var $mapAtAtIterator = callBound$1('Map.prototype.@@iterator', true) || callBound$1('Map.prototype._es6-shim iterator_', true);
  		var $setAtAtIterator = callBound$1('Set.prototype.@@iterator', true) || callBound$1('Set.prototype._es6-shim iterator_', true);

  		var getCollectionIterator = function getCollectionIterator(iterable) {
  			if (isMap(iterable)) {
  				if ($mapIterator) {
  					return stopIterationIterator($mapIterator(iterable));
  				}
  				if ($mapAtAtIterator) {
  					return $mapAtAtIterator(iterable);
  				}
  				if ($mapForEach) {
  					var entries = [];
  					$mapForEach(iterable, function (v, k) {
  						$arrayPush(entries, [k, v]);
  					});
  					return getArrayIterator(entries);
  				}
  			}
  			if (isSet(iterable)) {
  				if ($setIterator) {
  					return stopIterationIterator($setIterator(iterable));
  				}
  				if ($setAtAtIterator) {
  					return $setAtAtIterator(iterable);
  				}
  				if ($setForEach) {
  					var values = [];
  					$setForEach(iterable, function (v) {
  						$arrayPush(values, v);
  					});
  					return getArrayIterator(values);
  				}
  			}
  		};

  		module.exports = function getIterator(iterable) {
  			return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);
  		};
  	}
  }
  });

  var numberIsNaN = function (value) {
  	return value !== value;
  };

  var implementation$4 = function is(a, b) {
  	if (a === 0 && b === 0) {
  		return 1 / a === 1 / b;
  	}
  	if (a === b) {
  		return true;
  	}
  	if (numberIsNaN(a) && numberIsNaN(b)) {
  		return true;
  	}
  	return false;
  };

  var polyfill$3 = function getPolyfill() {
  	return typeof Object.is === 'function' ? Object.is : implementation$4;
  };

  var shim$2 = function shimObjectIs() {
  	var polyfill = polyfill$3();
  	defineProperties_1(Object, { is: polyfill }, {
  		is: function testObjectIs() {
  			return Object.is !== polyfill;
  		}
  	});
  	return polyfill;
  };

  var polyfill$4 = callBind(polyfill$3(), Object);

  defineProperties_1(polyfill$4, {
  	getPolyfill: polyfill$3,
  	implementation: implementation$4,
  	shim: shim$2
  });

  var objectIs = polyfill$4;

  var $ArrayBuffer = getIntrinsic('%ArrayBuffer%', true);
  /** @type {undefined | ((receiver: ArrayBuffer) => number) | ((receiver: unknown) => never)} */
  var $byteLength = callBound('ArrayBuffer.prototype.byteLength', true);
  var $toString$1 = callBound('Object.prototype.toString');

  // in node 0.10, ArrayBuffers have no prototype methods, but have an own slot-checking `slice` method
  var abSlice = !!$ArrayBuffer && !$byteLength && new $ArrayBuffer(0).slice;
  var $abSlice = !!abSlice && callBind(abSlice);

  /** @type {import('.')} */
  var isArrayBuffer = $byteLength || $abSlice
  	? function isArrayBuffer(obj) {
  		if (!obj || typeof obj !== 'object') {
  			return false;
  		}
  		try {
  			if ($byteLength) {
  				// @ts-expect-error no idea why TS can't handle the overload
  				$byteLength(obj);
  			} else {
  				// @ts-expect-error TS chooses not to type-narrow inside a closure
  				$abSlice(obj, 0);
  			}
  			return true;
  		} catch (e) {
  			return false;
  		}
  	}
  	: $ArrayBuffer
  		// in node 0.8, ArrayBuffers have no prototype or own methods, but also no Symbol.toStringTag
  		? function isArrayBuffer(obj) {
  			return $toString$1(obj) === '[object ArrayBuffer]';
  		}
  		: function isArrayBuffer(obj) { // eslint-disable-line no-unused-vars
  			return false;
  		};

  var getDay = Date.prototype.getDay;
  var tryDateObject = function tryDateGetDayCall(value) {
  	try {
  		getDay.call(value);
  		return true;
  	} catch (e) {
  		return false;
  	}
  };

  var toStr$6 = Object.prototype.toString;
  var dateClass = '[object Date]';
  var hasToStringTag$2 = shams$1();

  var isDateObject = function isDateObject(value) {
  	if (typeof value !== 'object' || value === null) {
  		return false;
  	}
  	return hasToStringTag$2 ? tryDateObject(value) : toStr$6.call(value) === dateClass;
  };

  var hasToStringTag$3 = shams$1();
  var has$2;
  var $exec$1;
  var isRegexMarker;
  var badStringifier;

  if (hasToStringTag$3) {
  	has$2 = callBound('Object.prototype.hasOwnProperty');
  	$exec$1 = callBound('RegExp.prototype.exec');
  	isRegexMarker = {};

  	var throwRegexMarker = function () {
  		throw isRegexMarker;
  	};
  	badStringifier = {
  		toString: throwRegexMarker,
  		valueOf: throwRegexMarker
  	};

  	if (typeof Symbol.toPrimitive === 'symbol') {
  		badStringifier[Symbol.toPrimitive] = throwRegexMarker;
  	}
  }

  var $toString$2 = callBound('Object.prototype.toString');
  var gOPD$2 = Object.getOwnPropertyDescriptor;
  var regexClass = '[object RegExp]';

  var isRegex = hasToStringTag$3
  	// eslint-disable-next-line consistent-return
  	? function isRegex(value) {
  		if (!value || typeof value !== 'object') {
  			return false;
  		}

  		var descriptor = gOPD$2(value, 'lastIndex');
  		var hasLastIndexDataProperty = descriptor && has$2(descriptor, 'value');
  		if (!hasLastIndexDataProperty) {
  			return false;
  		}

  		try {
  			$exec$1(value, badStringifier);
  		} catch (e) {
  			return e === isRegexMarker;
  		}
  	}
  	: function isRegex(value) {
  		// In older browsers, typeof regex incorrectly returns 'function'
  		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
  			return false;
  		}

  		return $toString$2(value) === regexClass;
  	};

  var $byteLength$1 = callBound('SharedArrayBuffer.prototype.byteLength', true);

  /** @type {import('.')} */
  var isSharedArrayBuffer = $byteLength$1
  	? function isSharedArrayBuffer(obj) {
  		if (!obj || typeof obj !== 'object') {
  			return false;
  		}
  		try {
  			$byteLength$1(obj);
  			return true;
  		} catch (e) {
  			return false;
  		}
  	}
  	: function isSharedArrayBuffer(obj) { // eslint-disable-line no-unused-vars
  		return false;
  	};

  var numToStr = Number.prototype.toString;
  var tryNumberObject = function tryNumberObject(value) {
  	try {
  		numToStr.call(value);
  		return true;
  	} catch (e) {
  		return false;
  	}
  };
  var toStr$7 = Object.prototype.toString;
  var numClass = '[object Number]';
  var hasToStringTag$4 = shams$1();

  var isNumberObject = function isNumberObject(value) {
  	if (typeof value === 'number') {
  		return true;
  	}
  	if (typeof value !== 'object') {
  		return false;
  	}
  	return hasToStringTag$4 ? tryNumberObject(value) : toStr$7.call(value) === numClass;
  };

  var $boolToStr = callBound('Boolean.prototype.toString');
  var $toString$3 = callBound('Object.prototype.toString');

  var tryBooleanObject = function booleanBrandCheck(value) {
  	try {
  		$boolToStr(value);
  		return true;
  	} catch (e) {
  		return false;
  	}
  };
  var boolClass = '[object Boolean]';
  var hasToStringTag$5 = shams$1();

  var isBooleanObject = function isBoolean(value) {
  	if (typeof value === 'boolean') {
  		return true;
  	}
  	if (value === null || typeof value !== 'object') {
  		return false;
  	}
  	return hasToStringTag$5 && Symbol.toStringTag in value ? tryBooleanObject(value) : $toString$3(value) === boolClass;
  };

  var isSymbol$2 = createCommonjsModule(function (module) {

  var toStr = Object.prototype.toString;
  var hasSymbols$1 = hasSymbols();

  if (hasSymbols$1) {
  	var symToStr = Symbol.prototype.toString;
  	var symStringRegex = /^Symbol\(.*\)$/;
  	var isSymbolObject = function isRealSymbolObject(value) {
  		if (typeof value.valueOf() !== 'symbol') {
  			return false;
  		}
  		return symStringRegex.test(symToStr.call(value));
  	};

  	module.exports = function isSymbol(value) {
  		if (typeof value === 'symbol') {
  			return true;
  		}
  		if (toStr.call(value) !== '[object Symbol]') {
  			return false;
  		}
  		try {
  			return isSymbolObject(value);
  		} catch (e) {
  			return false;
  		}
  	};
  } else {

  	module.exports = function isSymbol(value) {
  		// this environment does not support Symbols.
  		return false ;
  	};
  }
  });

  var $BigInt = typeof BigInt !== 'undefined' && BigInt;

  var hasBigints = function hasNativeBigInts() {
  	return typeof $BigInt === 'function'
  		&& typeof BigInt === 'function'
  		&& typeof $BigInt(42) === 'bigint' // eslint-disable-line no-magic-numbers
  		&& typeof BigInt(42) === 'bigint'; // eslint-disable-line no-magic-numbers
  };

  var isBigint = createCommonjsModule(function (module) {

  var hasBigInts = hasBigints();

  if (hasBigInts) {
  	var bigIntValueOf = BigInt.prototype.valueOf;
  	var tryBigInt = function tryBigIntObject(value) {
  		try {
  			bigIntValueOf.call(value);
  			return true;
  		} catch (e) {
  		}
  		return false;
  	};

  	module.exports = function isBigInt(value) {
  		if (
  			value === null
  			|| typeof value === 'undefined'
  			|| typeof value === 'boolean'
  			|| typeof value === 'string'
  			|| typeof value === 'number'
  			|| typeof value === 'symbol'
  			|| typeof value === 'function'
  		) {
  			return false;
  		}
  		if (typeof value === 'bigint') {
  			return true;
  		}

  		return tryBigInt(value);
  	};
  } else {
  	module.exports = function isBigInt(value) {
  		return false ;
  	};
  }
  });

  // eslint-disable-next-line consistent-return
  var whichBoxedPrimitive = function whichBoxedPrimitive(value) {
  	// eslint-disable-next-line eqeqeq
  	if (value == null || (typeof value !== 'object' && typeof value !== 'function')) {
  		return null;
  	}
  	if (isString$2(value)) {
  		return 'String';
  	}
  	if (isNumberObject(value)) {
  		return 'Number';
  	}
  	if (isBooleanObject(value)) {
  		return 'Boolean';
  	}
  	if (isSymbol$2(value)) {
  		return 'Symbol';
  	}
  	if (isBigint(value)) {
  		return 'BigInt';
  	}
  };

  var $WeakMap$1 = typeof WeakMap === 'function' && WeakMap.prototype ? WeakMap : null;
  var $WeakSet = typeof WeakSet === 'function' && WeakSet.prototype ? WeakSet : null;

  var exported$2;

  if (!$WeakMap$1) {
  	/** @type {import('.')} */
  	// eslint-disable-next-line no-unused-vars
  	exported$2 = function isWeakMap(x) {
  		// `WeakMap` is not present in this environment.
  		return false;
  	};
  }

  var $mapHas$3 = $WeakMap$1 ? $WeakMap$1.prototype.has : null;
  var $setHas$2 = $WeakSet ? $WeakSet.prototype.has : null;
  if (!exported$2 && !$mapHas$3) {
  	/** @type {import('.')} */
  	// eslint-disable-next-line no-unused-vars
  	exported$2 = function isWeakMap(x) {
  		// `WeakMap` does not have a `has` method
  		return false;
  	};
  }

  /** @type {import('.')} */
  var isWeakmap = exported$2 || function isWeakMap(x) {
  	if (!x || typeof x !== 'object') {
  		return false;
  	}
  	try {
  		$mapHas$3.call(x, $mapHas$3);
  		if ($setHas$2) {
  			try {
  				$setHas$2.call(x, $setHas$2);
  			} catch (e) {
  				return true;
  			}
  		}
  		// @ts-expect-error TS can't figure out that $WeakMap is always truthy here
  		return x instanceof $WeakMap$1; // core-js workaround, pre-v3
  	} catch (e) {}
  	return false;
  };

  var isWeakset = createCommonjsModule(function (module) {




  var $WeakSet = getIntrinsic('%WeakSet%', true);

  var $setHas = callBound('WeakSet.prototype.has', true);

  if ($setHas) {
  	var $mapHas = callBound('WeakMap.prototype.has', true);

  	/** @type {import('.')} */
  	module.exports = function isWeakSet(x) {
  		if (!x || typeof x !== 'object') {
  			return false;
  		}
  		try {
  			$setHas(x, $setHas);
  			if ($mapHas) {
  				try {
  					$mapHas(x, $mapHas);
  				} catch (e) {
  					return true;
  				}
  			}
  			// @ts-expect-error TS can't figure out that $WeakSet is always truthy here
  			return x instanceof $WeakSet; // core-js workaround, pre-v3
  		} catch (e) {}
  		return false;
  	};
  } else {
  	/** @type {import('.')} */
  	// eslint-disable-next-line no-unused-vars
  	module.exports = function isWeakSet(x) {
  		// `WeakSet` does not exist, or does not have a `has` method
  		return false;
  	};
  }
  });

  /** @type {import('.')} */
  var whichCollection = function whichCollection(/** @type {unknown} */ value) {
  	if (value && typeof value === 'object') {
  		if (isMap$1(value)) {
  			return 'Map';
  		}
  		if (isSet$1(value)) {
  			return 'Set';
  		}
  		if (isWeakmap(value)) {
  			return 'WeakMap';
  		}
  		if (isWeakset(value)) {
  			return 'WeakSet';
  		}
  	}
  	return false;
  };

  var fnToStr = Function.prototype.toString;
  var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
  var badArrayLike;
  var isCallableMarker;
  if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
  	try {
  		badArrayLike = Object.defineProperty({}, 'length', {
  			get: function () {
  				throw isCallableMarker;
  			}
  		});
  		isCallableMarker = {};
  		// eslint-disable-next-line no-throw-literal
  		reflectApply(function () { throw 42; }, null, badArrayLike);
  	} catch (_) {
  		if (_ !== isCallableMarker) {
  			reflectApply = null;
  		}
  	}
  } else {
  	reflectApply = null;
  }

  var constructorRegex = /^\s*class\b/;
  var isES6ClassFn = function isES6ClassFunction(value) {
  	try {
  		var fnStr = fnToStr.call(value);
  		return constructorRegex.test(fnStr);
  	} catch (e) {
  		return false; // not a function
  	}
  };

  var tryFunctionObject = function tryFunctionToStr(value) {
  	try {
  		if (isES6ClassFn(value)) { return false; }
  		fnToStr.call(value);
  		return true;
  	} catch (e) {
  		return false;
  	}
  };
  var toStr$8 = Object.prototype.toString;
  var objectClass = '[object Object]';
  var fnClass = '[object Function]';
  var genClass = '[object GeneratorFunction]';
  var ddaClass = '[object HTMLAllCollection]'; // IE 11
  var ddaClass2 = '[object HTML document.all class]';
  var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
  var hasToStringTag$6 = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

  var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

  var isDDA = function isDocumentDotAll() { return false; };
  if (typeof document === 'object') {
  	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
  	var all = document.all;
  	if (toStr$8.call(all) === toStr$8.call(document.all)) {
  		isDDA = function isDocumentDotAll(value) {
  			/* globals document: false */
  			// in IE 6-8, typeof document.all is "object" and it's truthy
  			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
  				try {
  					var str = toStr$8.call(value);
  					return (
  						str === ddaClass
  						|| str === ddaClass2
  						|| str === ddaClass3 // opera 12.16
  						|| str === objectClass // IE 6-8
  					) && value('') == null; // eslint-disable-line eqeqeq
  				} catch (e) { /**/ }
  			}
  			return false;
  		};
  	}
  }

  var isCallable = reflectApply
  	? function isCallable(value) {
  		if (isDDA(value)) { return true; }
  		if (!value) { return false; }
  		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
  		try {
  			reflectApply(value, null, badArrayLike);
  		} catch (e) {
  			if (e !== isCallableMarker) { return false; }
  		}
  		return !isES6ClassFn(value) && tryFunctionObject(value);
  	}
  	: function isCallable(value) {
  		if (isDDA(value)) { return true; }
  		if (!value) { return false; }
  		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
  		if (hasToStringTag$6) { return tryFunctionObject(value); }
  		if (isES6ClassFn(value)) { return false; }
  		var strClass = toStr$8.call(value);
  		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
  		return tryFunctionObject(value);
  	};

  var toStr$9 = Object.prototype.toString;
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

  var forEachArray = function forEachArray(array, iterator, receiver) {
      for (var i = 0, len = array.length; i < len; i++) {
          if (hasOwnProperty$2.call(array, i)) {
              if (receiver == null) {
                  iterator(array[i], i, array);
              } else {
                  iterator.call(receiver, array[i], i, array);
              }
          }
      }
  };

  var forEachString = function forEachString(string, iterator, receiver) {
      for (var i = 0, len = string.length; i < len; i++) {
          // no such thing as a sparse string.
          if (receiver == null) {
              iterator(string.charAt(i), i, string);
          } else {
              iterator.call(receiver, string.charAt(i), i, string);
          }
      }
  };

  var forEachObject = function forEachObject(object, iterator, receiver) {
      for (var k in object) {
          if (hasOwnProperty$2.call(object, k)) {
              if (receiver == null) {
                  iterator(object[k], k, object);
              } else {
                  iterator.call(receiver, object[k], k, object);
              }
          }
      }
  };

  var forEach = function forEach(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
          throw new TypeError('iterator must be a function');
      }

      var receiver;
      if (arguments.length >= 3) {
          receiver = thisArg;
      }

      if (toStr$9.call(list) === '[object Array]') {
          forEachArray(list, iterator, receiver);
      } else if (typeof list === 'string') {
          forEachString(list, iterator, receiver);
      } else {
          forEachObject(list, iterator, receiver);
      }
  };

  var forEach_1 = forEach;

  /** @type {import('.')} */
  var possibleTypedArrayNames = [
  	'Float32Array',
  	'Float64Array',
  	'Int8Array',
  	'Int16Array',
  	'Int32Array',
  	'Uint8Array',
  	'Uint8ClampedArray',
  	'Uint16Array',
  	'Uint32Array',
  	'BigInt64Array',
  	'BigUint64Array'
  ];

  var g = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;

  /** @type {import('.')} */
  var availableTypedArrays = function availableTypedArrays() {
  	var /** @type {ReturnType<typeof availableTypedArrays>} */ out = [];
  	for (var i = 0; i < possibleTypedArrayNames.length; i++) {
  		if (typeof g[possibleTypedArrayNames[i]] === 'function') {
  			// @ts-expect-error
  			out[out.length] = possibleTypedArrayNames[i];
  		}
  	}
  	return out;
  };

  /** @type {(O: object) => string} */
  var $toString$4 = callBound('Object.prototype.toString');
  var hasToStringTag$7 = shams$1();

  var g$1 = typeof globalThis === 'undefined' ? commonjsGlobal : globalThis;
  var typedArrays = availableTypedArrays();

  var $slice$1 = callBound('String.prototype.slice');
  var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');

  /** @type {<T = unknown>(array: readonly T[], value: unknown) => number} */
  var $indexOf$1 = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
  	for (var i = 0; i < array.length; i += 1) {
  		if (array[i] === value) {
  			return i;
  		}
  	}
  	return -1;
  };

  /** @typedef {(receiver: import('.').TypedArray) => string | typeof Uint8Array.prototype.slice.call | typeof Uint8Array.prototype.set.call} Getter */
  /** @type {{ [k in `\$${import('.').TypedArrayName}`]?: Getter } & { __proto__: null }} */
  var cache = { __proto__: null };
  if (hasToStringTag$7 && gopd && getPrototypeOf) {
  	forEach_1(typedArrays, function (typedArray) {
  		var arr = new g$1[typedArray]();
  		if (Symbol.toStringTag in arr) {
  			var proto = getPrototypeOf(arr);
  			// @ts-expect-error TS won't narrow inside a closure
  			var descriptor = gopd(proto, Symbol.toStringTag);
  			if (!descriptor) {
  				var superProto = getPrototypeOf(proto);
  				// @ts-expect-error TS won't narrow inside a closure
  				descriptor = gopd(superProto, Symbol.toStringTag);
  			}
  			// @ts-expect-error TODO: fix
  			cache['$' + typedArray] = callBind(descriptor.get);
  		}
  	});
  } else {
  	forEach_1(typedArrays, function (typedArray) {
  		var arr = new g$1[typedArray]();
  		var fn = arr.slice || arr.set;
  		if (fn) {
  			// @ts-expect-error TODO: fix
  			cache['$' + typedArray] = callBind(fn);
  		}
  	});
  }

  /** @type {(value: object) => false | import('.').TypedArrayName} */
  var tryTypedArrays = function tryAllTypedArrays(value) {
  	/** @type {ReturnType<typeof tryAllTypedArrays>} */ var found = false;
  	forEach_1(
  		// eslint-disable-next-line no-extra-parens
  		/** @type {Record<`\$${TypedArrayName}`, Getter>} */ /** @type {any} */ (cache),
  		/** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
  		function (getter, typedArray) {
  			if (!found) {
  				try {
  				// @ts-expect-error TODO: fix
  					if ('$' + getter(value) === typedArray) {
  						found = $slice$1(typedArray, 1);
  					}
  				} catch (e) { /**/ }
  			}
  		}
  	);
  	return found;
  };

  /** @type {(value: object) => false | import('.').TypedArrayName} */
  var trySlices = function tryAllSlices(value) {
  	/** @type {ReturnType<typeof tryAllSlices>} */ var found = false;
  	forEach_1(
  		// eslint-disable-next-line no-extra-parens
  		/** @type {Record<`\$${TypedArrayName}`, Getter>} */ /** @type {any} */ (cache),
  		/** @type {(getter: typeof cache, name: `\$${import('.').TypedArrayName}`) => void} */ function (getter, name) {
  			if (!found) {
  				try {
  					// @ts-expect-error TODO: fix
  					getter(value);
  					found = $slice$1(name, 1);
  				} catch (e) { /**/ }
  			}
  		}
  	);
  	return found;
  };

  /** @type {import('.')} */
  var whichTypedArray = function whichTypedArray(value) {
  	if (!value || typeof value !== 'object') { return false; }
  	if (!hasToStringTag$7) {
  		/** @type {string} */
  		var tag = $slice$1($toString$4(value), 8, -1);
  		if ($indexOf$1(typedArrays, tag) > -1) {
  			return tag;
  		}
  		if (tag !== 'Object') {
  			return false;
  		}
  		// node < 0.6 hits here on real Typed Arrays
  		return trySlices(value);
  	}
  	if (!gopd) { return null; } // unknown engine
  	return tryTypedArrays(value);
  };

  var $byteLength$2 = callBound('ArrayBuffer.prototype.byteLength', true);



  /** @type {import('.')} */
  var arrayBufferByteLength = function byteLength(ab) {
  	if (!isArrayBuffer(ab)) {
  		return NaN;
  	}
  	return $byteLength$2 ? $byteLength$2(ab) : ab.byteLength;
  }; // in node < 0.11, byteLength is an own nonconfigurable property

  var sabByteLength = callBound('SharedArrayBuffer.prototype.byteLength', true);

  var $getTime = callBound('Date.prototype.getTime');
  var gPO$1 = Object.getPrototypeOf;
  var $objToString = callBound('Object.prototype.toString');

  var $Set$2 = getIntrinsic('%Set%', true);
  var $mapHas$4 = callBound('Map.prototype.has', true);
  var $mapGet$1 = callBound('Map.prototype.get', true);
  var $mapSize = callBound('Map.prototype.size', true);
  var $setAdd = callBound('Set.prototype.add', true);
  var $setDelete = callBound('Set.prototype.delete', true);
  var $setHas$3 = callBound('Set.prototype.has', true);
  var $setSize = callBound('Set.prototype.size', true);

  // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L401-L414
  function setHasEqualElement(set, val1, opts, channel) {
    var i = esGetIterator(set);
    var result;
    while ((result = i.next()) && !result.done) {
      if (internalDeepEqual(val1, result.value, opts, channel)) { // eslint-disable-line no-use-before-define
        // Remove the matching element to make sure we do not check that again.
        $setDelete(set, result.value);
        return true;
      }
    }

    return false;
  }

  // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L416-L439
  function findLooseMatchingPrimitives(prim) {
    if (typeof prim === 'undefined') {
      return null;
    }
    if (typeof prim === 'object') { // Only pass in null as object!
      return void 0;
    }
    if (typeof prim === 'symbol') {
      return false;
    }
    if (typeof prim === 'string' || typeof prim === 'number') {
      // Loose equal entries exist only if the string is possible to convert to a regular number and not NaN.
      return +prim === +prim; // eslint-disable-line no-implicit-coercion
    }
    return true;
  }

  // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L449-L460
  function mapMightHaveLoosePrim(a, b, prim, item, opts, channel) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) {
      return altValue;
    }
    var curB = $mapGet$1(b, altValue);
    var looseOpts = object_assign({}, opts, { strict: false });
    if (
      (typeof curB === 'undefined' && !$mapHas$4(b, altValue))
      // eslint-disable-next-line no-use-before-define
      || !internalDeepEqual(item, curB, looseOpts, channel)
    ) {
      return false;
    }
    // eslint-disable-next-line no-use-before-define
    return !$mapHas$4(a, altValue) && internalDeepEqual(item, curB, looseOpts, channel);
  }

  // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L441-L447
  function setMightHaveLoosePrim(a, b, prim) {
    var altValue = findLooseMatchingPrimitives(prim);
    if (altValue != null) {
      return altValue;
    }

    return $setHas$3(b, altValue) && !$setHas$3(a, altValue);
  }

  // taken from https://github.com/browserify/commonjs-assert/blob/bba838e9ba9e28edf3127ce6974624208502f6bc/internal/util/comparisons.js#L518-L533
  function mapHasEqualEntry(set, map, key1, item1, opts, channel) {
    var i = esGetIterator(set);
    var result;
    var key2;
    while ((result = i.next()) && !result.done) {
      key2 = result.value;
      if (
        // eslint-disable-next-line no-use-before-define
        internalDeepEqual(key1, key2, opts, channel)
        // eslint-disable-next-line no-use-before-define
        && internalDeepEqual(item1, $mapGet$1(map, key2), opts, channel)
      ) {
        $setDelete(set, key2);
        return true;
      }
    }

    return false;
  }

  function internalDeepEqual(actual, expected, options, channel) {
    var opts = options || {};

    // 7.1. All identical values are equivalent, as determined by ===.
    if (opts.strict ? objectIs(actual, expected) : actual === expected) {
      return true;
    }

    var actualBoxed = whichBoxedPrimitive(actual);
    var expectedBoxed = whichBoxedPrimitive(expected);
    if (actualBoxed !== expectedBoxed) {
      return false;
    }

    // 7.3. Other pairs that do not both pass typeof value == 'object', equivalence is determined by ==.
    if (!actual || !expected || (typeof actual !== 'object' && typeof expected !== 'object')) {
      return opts.strict ? objectIs(actual, expected) : actual == expected; // eslint-disable-line eqeqeq
    }

    /*
     * 7.4. For all other Object pairs, including Array objects, equivalence is
     * determined by having the same number of owned properties (as verified
     * with Object.prototype.hasOwnProperty.call), the same set of keys
     * (although not necessarily the same order), equivalent values for every
     * corresponding key, and an identical 'prototype' property. Note: this
     * accounts for both named and indexed properties on Arrays.
     */
    // see https://github.com/nodejs/node/commit/d3aafd02efd3a403d646a3044adcf14e63a88d32 for memos/channel inspiration

    var hasActual = channel.has(actual);
    var hasExpected = channel.has(expected);
    var sentinel;
    if (hasActual && hasExpected) {
      if (channel.get(actual) === channel.get(expected)) {
        return true;
      }
    } else {
      sentinel = {};
    }
    if (!hasActual) { channel.set(actual, sentinel); }
    if (!hasExpected) { channel.set(expected, sentinel); }

    // eslint-disable-next-line no-use-before-define
    return objEquiv(actual, expected, opts, channel);
  }

  function isBuffer$2(x) {
    if (!x || typeof x !== 'object' || typeof x.length !== 'number') {
      return false;
    }
    if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
      return false;
    }
    if (x.length > 0 && typeof x[0] !== 'number') {
      return false;
    }

    return !!(x.constructor && x.constructor.isBuffer && x.constructor.isBuffer(x));
  }

  function setEquiv(a, b, opts, channel) {
    if ($setSize(a) !== $setSize(b)) {
      return false;
    }
    var iA = esGetIterator(a);
    var iB = esGetIterator(b);
    var resultA;
    var resultB;
    var set;
    while ((resultA = iA.next()) && !resultA.done) {
      if (resultA.value && typeof resultA.value === 'object') {
        if (!set) { set = new $Set$2(); }
        $setAdd(set, resultA.value);
      } else if (!$setHas$3(b, resultA.value)) {
        if (opts.strict) { return false; }
        if (!setMightHaveLoosePrim(a, b, resultA.value)) {
          return false;
        }
        if (!set) { set = new $Set$2(); }
        $setAdd(set, resultA.value);
      }
    }
    if (set) {
      while ((resultB = iB.next()) && !resultB.done) {
        // We have to check if a primitive value is already matching and only if it's not, go hunting for it.
        if (resultB.value && typeof resultB.value === 'object') {
          if (!setHasEqualElement(set, resultB.value, opts.strict, channel)) {
            return false;
          }
        } else if (
          !opts.strict
          && !$setHas$3(a, resultB.value)
          && !setHasEqualElement(set, resultB.value, opts.strict, channel)
        ) {
          return false;
        }
      }
      return $setSize(set) === 0;
    }
    return true;
  }

  function mapEquiv(a, b, opts, channel) {
    if ($mapSize(a) !== $mapSize(b)) {
      return false;
    }
    var iA = esGetIterator(a);
    var iB = esGetIterator(b);
    var resultA;
    var resultB;
    var set;
    var key;
    var item1;
    var item2;
    while ((resultA = iA.next()) && !resultA.done) {
      key = resultA.value[0];
      item1 = resultA.value[1];
      if (key && typeof key === 'object') {
        if (!set) { set = new $Set$2(); }
        $setAdd(set, key);
      } else {
        item2 = $mapGet$1(b, key);
        if ((typeof item2 === 'undefined' && !$mapHas$4(b, key)) || !internalDeepEqual(item1, item2, opts, channel)) {
          if (opts.strict) {
            return false;
          }
          if (!mapMightHaveLoosePrim(a, b, key, item1, opts, channel)) {
            return false;
          }
          if (!set) { set = new $Set$2(); }
          $setAdd(set, key);
        }
      }
    }

    if (set) {
      while ((resultB = iB.next()) && !resultB.done) {
        key = resultB.value[0];
        item2 = resultB.value[1];
        if (key && typeof key === 'object') {
          if (!mapHasEqualEntry(set, a, key, item2, opts, channel)) {
            return false;
          }
        } else if (
          !opts.strict
          && (!a.has(key) || !internalDeepEqual($mapGet$1(a, key), item2, opts, channel))
          && !mapHasEqualEntry(set, a, key, item2, object_assign({}, opts, { strict: false }), channel)
        ) {
          return false;
        }
      }
      return $setSize(set) === 0;
    }
    return true;
  }

  function objEquiv(a, b, opts, channel) {
    /* eslint max-statements: [2, 100], max-lines-per-function: [2, 120], max-depth: [2, 5], max-lines: [2, 400] */
    var i, key;

    if (typeof a !== typeof b) { return false; }
    if (a == null || b == null) { return false; }

    if ($objToString(a) !== $objToString(b)) { return false; }

    if (isArguments$1(a) !== isArguments$1(b)) { return false; }

    var aIsArray = isarray(a);
    var bIsArray = isarray(b);
    if (aIsArray !== bIsArray) { return false; }

    // TODO: replace when a cross-realm brand check is available
    var aIsError = a instanceof Error;
    var bIsError = b instanceof Error;
    if (aIsError !== bIsError) { return false; }
    if (aIsError || bIsError) {
      if (a.name !== b.name || a.message !== b.message) { return false; }
    }

    var aIsRegex = isRegex(a);
    var bIsRegex = isRegex(b);
    if (aIsRegex !== bIsRegex) { return false; }
    if ((aIsRegex || bIsRegex) && (a.source !== b.source || regexp_prototype_flags(a) !== regexp_prototype_flags(b))) {
      return false;
    }

    var aIsDate = isDateObject(a);
    var bIsDate = isDateObject(b);
    if (aIsDate !== bIsDate) { return false; }
    if (aIsDate || bIsDate) { // && would work too, because both are true or both false here
      if ($getTime(a) !== $getTime(b)) { return false; }
    }
    if (opts.strict && gPO$1 && gPO$1(a) !== gPO$1(b)) { return false; }

    var aWhich = whichTypedArray(a);
    var bWhich = whichTypedArray(b);
    if (aWhich !== bWhich) {
      return false;
    }
    if (aWhich || bWhich) { // && would work too, because both are true or both false here
      if (a.length !== b.length) { return false; }
      for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) { return false; }
      }
      return true;
    }

    var aIsBuffer = isBuffer$2(a);
    var bIsBuffer = isBuffer$2(b);
    if (aIsBuffer !== bIsBuffer) { return false; }
    if (aIsBuffer || bIsBuffer) { // && would work too, because both are true or both false here
      if (a.length !== b.length) { return false; }
      for (i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) { return false; }
      }
      return true;
    }

    var aIsArrayBuffer = isArrayBuffer(a);
    var bIsArrayBuffer = isArrayBuffer(b);
    if (aIsArrayBuffer !== bIsArrayBuffer) { return false; }
    if (aIsArrayBuffer || bIsArrayBuffer) { // && would work too, because both are true or both false here
      if (arrayBufferByteLength(a) !== arrayBufferByteLength(b)) { return false; }
      return typeof Uint8Array === 'function' && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
    }

    var aIsSAB = isSharedArrayBuffer(a);
    var bIsSAB = isSharedArrayBuffer(b);
    if (aIsSAB !== bIsSAB) { return false; }
    if (aIsSAB || bIsSAB) { // && would work too, because both are true or both false here
      if (sabByteLength(a) !== sabByteLength(b)) { return false; }
      return typeof Uint8Array === 'function' && internalDeepEqual(new Uint8Array(a), new Uint8Array(b), opts, channel);
    }

    if (typeof a !== typeof b) { return false; }

    var ka = objectKeys(a);
    var kb = objectKeys(b);
    // having the same number of owned properties (keys incorporates hasOwnProperty)
    if (ka.length !== kb.length) { return false; }

    // the same set of keys (although not necessarily the same order),
    ka.sort();
    kb.sort();
    // ~~~cheap key test
    for (i = ka.length - 1; i >= 0; i--) {
      if (ka[i] != kb[i]) { return false; } // eslint-disable-line eqeqeq
    }

    // equivalent values for every corresponding key, and ~~~possibly expensive deep test
    for (i = ka.length - 1; i >= 0; i--) {
      key = ka[i];
      if (!internalDeepEqual(a[key], b[key], opts, channel)) { return false; }
    }

    var aCollection = whichCollection(a);
    var bCollection = whichCollection(b);
    if (aCollection !== bCollection) {
      return false;
    }
    if (aCollection === 'Set' || bCollection === 'Set') { // aCollection === bCollection
      return setEquiv(a, b, opts, channel);
    }
    if (aCollection === 'Map') { // aCollection === bCollection
      return mapEquiv(a, b, opts, channel);
    }

    return true;
  }

  var deepEqual = function deepEqual(a, b, opts) {
    return internalDeepEqual(a, b, opts, sideChannel());
  };

  var __defProp = Object.defineProperty;
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var _GeojsonEquality = class _GeojsonEquality {
    constructor(opts) {
      this.direction = false;
      this.compareProperties = true;
      var _a, _b, _c;
      this.precision = 10 ** -((_a = opts == null ? void 0 : opts.precision) != null ? _a : 17);
      this.direction = (_b = opts == null ? void 0 : opts.direction) != null ? _b : false;
      this.compareProperties = (_c = opts == null ? void 0 : opts.compareProperties) != null ? _c : true;
    }
    compare(g1, g2) {
      if (g1.type !== g2.type) {
        return false;
      }
      if (!sameLength(g1, g2)) {
        return false;
      }
      switch (g1.type) {
        case "Point":
          return this.compareCoord(g1.coordinates, g2.coordinates);
        case "LineString":
          return this.compareLine(g1.coordinates, g2.coordinates);
        case "Polygon":
          return this.comparePolygon(g1, g2);
        case "GeometryCollection":
          return this.compareGeometryCollection(g1, g2);
        case "Feature":
          return this.compareFeature(g1, g2);
        case "FeatureCollection":
          return this.compareFeatureCollection(g1, g2);
        default:
          if (g1.type.startsWith("Multi")) {
            const g1s = explode(g1);
            const g2s = explode(
              g2
            );
            return g1s.every(
              (g1part) => g2s.some((g2part) => this.compare(g1part, g2part))
            );
          }
      }
      return false;
    }
    compareCoord(c1, c2) {
      return c1.length === c2.length && c1.every((c, i) => Math.abs(c - c2[i]) < this.precision);
    }
    compareLine(path1, path2, ind = 0, isPoly = false) {
      if (!sameLength(path1, path2)) {
        return false;
      }
      const p1 = path1;
      let p2 = path2;
      if (isPoly && !this.compareCoord(p1[0], p2[0])) {
        const startIndex = this.fixStartIndex(p2, p1);
        if (!startIndex) {
          return false;
        } else {
          p2 = startIndex;
        }
      }
      const sameDirection = this.compareCoord(p1[ind], p2[ind]);
      if (this.direction || sameDirection) {
        return this.comparePath(p1, p2);
      } else {
        if (this.compareCoord(p1[ind], p2[p2.length - (1 + ind)])) {
          return this.comparePath(p1.slice().reverse(), p2);
        }
        return false;
      }
    }
    fixStartIndex(sourcePath, targetPath) {
      let correctPath, ind = -1;
      for (let i = 0; i < sourcePath.length; i++) {
        if (this.compareCoord(sourcePath[i], targetPath[0])) {
          ind = i;
          break;
        }
      }
      if (ind >= 0) {
        correctPath = [].concat(
          sourcePath.slice(ind, sourcePath.length),
          sourcePath.slice(1, ind + 1)
        );
      }
      return correctPath;
    }
    comparePath(p1, p2) {
      return p1.every((c, i) => this.compareCoord(c, p2[i]));
    }
    comparePolygon(g1, g2) {
      if (this.compareLine(g1.coordinates[0], g2.coordinates[0], 1, true)) {
        const holes1 = g1.coordinates.slice(1, g1.coordinates.length);
        const holes2 = g2.coordinates.slice(1, g2.coordinates.length);
        return holes1.every(
          (h1) => holes2.some((h2) => this.compareLine(h1, h2, 1, true))
        );
      }
      return false;
    }
    compareGeometryCollection(g1, g2) {
      return sameLength(g1.geometries, g2.geometries) && this.compareBBox(g1, g2) && g1.geometries.every((g, i) => this.compare(g, g2.geometries[i]));
    }
    compareFeature(g1, g2) {
      return g1.id === g2.id && (this.compareProperties ? deepEqual(g1.properties, g2.properties) : true) && this.compareBBox(g1, g2) && this.compare(g1.geometry, g2.geometry);
    }
    compareFeatureCollection(g1, g2) {
      return sameLength(g1.features, g2.features) && this.compareBBox(g1, g2) && g1.features.every((f, i) => this.compare(f, g2.features[i]));
    }
    compareBBox(g1, g2) {
      return Boolean(!g1.bbox && !g2.bbox) || (g1.bbox && g2.bbox ? this.compareCoord(g1.bbox, g2.bbox) : false);
    }
  };
  __name(_GeojsonEquality, "GeojsonEquality");
  function sameLength(g1, g2) {
    return g1.coordinates ? g1.coordinates.length === g2.coordinates.length : g1.length === g2.length;
  }
  __name(sameLength, "sameLength");
  function explode(g) {
    return g.coordinates.map((part) => ({
      type: g.type.replace("Multi", ""),
      coordinates: part
    }));
  }
  __name(explode, "explode");

  // index.ts
  var earthRadius$1 = 63710088e-1;
  var factors$1 = {
    centimeters: earthRadius$1 * 100,
    centimetres: earthRadius$1 * 100,
    degrees: 360 / (2 * Math.PI),
    feet: earthRadius$1 * 3.28084,
    inches: earthRadius$1 * 39.37,
    kilometers: earthRadius$1 / 1e3,
    kilometres: earthRadius$1 / 1e3,
    meters: earthRadius$1,
    metres: earthRadius$1,
    miles: earthRadius$1 / 1609.344,
    millimeters: earthRadius$1 * 1e3,
    millimetres: earthRadius$1 * 1e3,
    nauticalmiles: earthRadius$1 / 1852,
    radians: 1,
    yards: earthRadius$1 * 1.0936
  };
  var areaFactors$1 = {
    acres: 247105e-9,
    centimeters: 1e4,
    centimetres: 1e4,
    feet: 10.763910417,
    hectares: 1e-4,
    inches: 1550.003100006,
    kilometers: 1e-6,
    kilometres: 1e-6,
    meters: 1,
    metres: 1,
    miles: 386e-9,
    nauticalmiles: 29155334959812285e-23,
    millimeters: 1e6,
    millimetres: 1e6,
    yards: 1.195990046
  };
  function feature$1(geom, properties, options = {}) {
    const feat = { type: "Feature" };
    if (options.id === 0 || options.id) {
      feat.id = options.id;
    }
    if (options.bbox) {
      feat.bbox = options.bbox;
    }
    feat.properties = properties || {};
    feat.geometry = geom;
    return feat;
  }
  __name(feature$1, "feature");
  function geometry$1(type, coordinates, _options = {}) {
    switch (type) {
      case "Point":
        return point$1(coordinates).geometry;
      case "LineString":
        return lineString$1(coordinates).geometry;
      case "Polygon":
        return polygon$1(coordinates).geometry;
      case "MultiPoint":
        return multiPoint$1(coordinates).geometry;
      case "MultiLineString":
        return multiLineString$1(coordinates).geometry;
      case "MultiPolygon":
        return multiPolygon$1(coordinates).geometry;
      default:
        throw new Error(type + " is invalid");
    }
  }
  __name(geometry$1, "geometry");
  function point$1(coordinates, properties, options = {}) {
    if (!coordinates) {
      throw new Error("coordinates is required");
    }
    if (!Array.isArray(coordinates)) {
      throw new Error("coordinates must be an Array");
    }
    if (coordinates.length < 2) {
      throw new Error("coordinates must be at least 2 numbers long");
    }
    if (!isNumber$3(coordinates[0]) || !isNumber$3(coordinates[1])) {
      throw new Error("coordinates must contain numbers");
    }
    const geom = {
      type: "Point",
      coordinates
    };
    return feature$1(geom, properties, options);
  }
  __name(point$1, "point");
  function points$1(coordinates, properties, options = {}) {
    return featureCollection$1(
      coordinates.map((coords) => {
        return point$1(coords, properties);
      }),
      options
    );
  }
  __name(points$1, "points");
  function polygon$1(coordinates, properties, options = {}) {
    for (const ring of coordinates) {
      if (ring.length < 4) {
        throw new Error(
          "Each LinearRing of a Polygon must have 4 or more Positions."
        );
      }
      if (ring[ring.length - 1].length !== ring[0].length) {
        throw new Error("First and last Position are not equivalent.");
      }
      for (let j = 0; j < ring[ring.length - 1].length; j++) {
        if (ring[ring.length - 1][j] !== ring[0][j]) {
          throw new Error("First and last Position are not equivalent.");
        }
      }
    }
    const geom = {
      type: "Polygon",
      coordinates
    };
    return feature$1(geom, properties, options);
  }
  __name(polygon$1, "polygon");
  function polygons$1(coordinates, properties, options = {}) {
    return featureCollection$1(
      coordinates.map((coords) => {
        return polygon$1(coords, properties);
      }),
      options
    );
  }
  __name(polygons$1, "polygons");
  function lineString$1(coordinates, properties, options = {}) {
    if (coordinates.length < 2) {
      throw new Error("coordinates must be an array of two or more positions");
    }
    const geom = {
      type: "LineString",
      coordinates
    };
    return feature$1(geom, properties, options);
  }
  __name(lineString$1, "lineString");
  function lineStrings$1(coordinates, properties, options = {}) {
    return featureCollection$1(
      coordinates.map((coords) => {
        return lineString$1(coords, properties);
      }),
      options
    );
  }
  __name(lineStrings$1, "lineStrings");
  function featureCollection$1(features, options = {}) {
    const fc = { type: "FeatureCollection" };
    if (options.id) {
      fc.id = options.id;
    }
    if (options.bbox) {
      fc.bbox = options.bbox;
    }
    fc.features = features;
    return fc;
  }
  __name(featureCollection$1, "featureCollection");
  function multiLineString$1(coordinates, properties, options = {}) {
    const geom = {
      type: "MultiLineString",
      coordinates
    };
    return feature$1(geom, properties, options);
  }
  __name(multiLineString$1, "multiLineString");
  function multiPoint$1(coordinates, properties, options = {}) {
    const geom = {
      type: "MultiPoint",
      coordinates
    };
    return feature$1(geom, properties, options);
  }
  __name(multiPoint$1, "multiPoint");
  function multiPolygon$1(coordinates, properties, options = {}) {
    const geom = {
      type: "MultiPolygon",
      coordinates
    };
    return feature$1(geom, properties, options);
  }
  __name(multiPolygon$1, "multiPolygon");
  function geometryCollection$1(geometries, properties, options = {}) {
    const geom = {
      type: "GeometryCollection",
      geometries
    };
    return feature$1(geom, properties, options);
  }
  __name(geometryCollection$1, "geometryCollection");
  function round$2(num, precision = 0) {
    if (precision && !(precision >= 0)) {
      throw new Error("precision must be a positive number");
    }
    const multiplier = Math.pow(10, precision || 0);
    return Math.round(num * multiplier) / multiplier;
  }
  __name(round$2, "round");
  function radiansToLength$1(radians, units = "kilometers") {
    const factor = factors$1[units];
    if (!factor) {
      throw new Error(units + " units is invalid");
    }
    return radians * factor;
  }
  __name(radiansToLength$1, "radiansToLength");
  function lengthToRadians$1(distance, units = "kilometers") {
    const factor = factors$1[units];
    if (!factor) {
      throw new Error(units + " units is invalid");
    }
    return distance / factor;
  }
  __name(lengthToRadians$1, "lengthToRadians");
  function lengthToDegrees$1(distance, units) {
    return radiansToDegrees$1(lengthToRadians$1(distance, units));
  }
  __name(lengthToDegrees$1, "lengthToDegrees");
  function bearingToAzimuth$1(bearing) {
    let angle = bearing % 360;
    if (angle < 0) {
      angle += 360;
    }
    return angle;
  }
  __name(bearingToAzimuth$1, "bearingToAzimuth");
  function radiansToDegrees$1(radians) {
    const degrees = radians % (2 * Math.PI);
    return degrees * 180 / Math.PI;
  }
  __name(radiansToDegrees$1, "radiansToDegrees");
  function degreesToRadians$1(degrees) {
    const radians = degrees % 360;
    return radians * Math.PI / 180;
  }
  __name(degreesToRadians$1, "degreesToRadians");
  function convertLength$1(length, originalUnit = "kilometers", finalUnit = "kilometers") {
    if (!(length >= 0)) {
      throw new Error("length must be a positive number");
    }
    return radiansToLength$1(lengthToRadians$1(length, originalUnit), finalUnit);
  }
  __name(convertLength$1, "convertLength");
  function convertArea$1(area, originalUnit = "meters", finalUnit = "kilometers") {
    if (!(area >= 0)) {
      throw new Error("area must be a positive number");
    }
    const startFactor = areaFactors$1[originalUnit];
    if (!startFactor) {
      throw new Error("invalid original units");
    }
    const finalFactor = areaFactors$1[finalUnit];
    if (!finalFactor) {
      throw new Error("invalid final units");
    }
    return area / startFactor * finalFactor;
  }
  __name(convertArea$1, "convertArea");
  function isNumber$3(num) {
    return !isNaN(num) && num !== null && !Array.isArray(num);
  }
  __name(isNumber$3, "isNumber");
  function isObject$2(input) {
    return input !== null && typeof input === "object" && !Array.isArray(input);
  }
  __name(isObject$2, "isObject");
  function validateBBox$1(bbox) {
    if (!bbox) {
      throw new Error("bbox is required");
    }
    if (!Array.isArray(bbox)) {
      throw new Error("bbox must be an Array");
    }
    if (bbox.length !== 4 && bbox.length !== 6) {
      throw new Error("bbox must be an Array of 4 or 6 numbers");
    }
    bbox.forEach((num) => {
      if (!isNumber$3(num)) {
        throw new Error("bbox must only contain numbers");
      }
    });
  }
  __name(validateBBox$1, "validateBBox");
  function validateId$1(id) {
    if (!id) {
      throw new Error("id is required");
    }
    if (["string", "number"].indexOf(typeof id) === -1) {
      throw new Error("id must be a number or a string");
    }
  }
  __name(validateId$1, "validateId");

  var __defProp$1 = Object.defineProperty;
  var __name$1 = (target, value) => __defProp$1(target, "name", { value, configurable: true });
  function coordEach$1(geojson, callback, excludeWrapCoord) {
    if (geojson === null)
      return;
    var j, k, l, geometry, stopG, coords, geometryMaybeCollection, wrapShrink = 0, coordIndex = 0, isGeometryCollection, type = geojson.type, isFeatureCollection = type === "FeatureCollection", isFeature = type === "Feature", stop = isFeatureCollection ? geojson.features.length : 1;
    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {
      geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;
      isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === "GeometryCollection" : false;
      stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;
      for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {
        var multiFeatureIndex = 0;
        var geometryIndex = 0;
        geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;
        if (geometry === null)
          continue;
        coords = geometry.coordinates;
        var geomType = geometry.type;
        wrapShrink = excludeWrapCoord && (geomType === "Polygon" || geomType === "MultiPolygon") ? 1 : 0;
        switch (geomType) {
          case null:
            break;
          case "Point":
            if (callback(
              coords,
              coordIndex,
              featureIndex,
              multiFeatureIndex,
              geometryIndex
            ) === false)
              return false;
            coordIndex++;
            multiFeatureIndex++;
            break;
          case "LineString":
          case "MultiPoint":
            for (j = 0; j < coords.length; j++) {
              if (callback(
                coords[j],
                coordIndex,
                featureIndex,
                multiFeatureIndex,
                geometryIndex
              ) === false)
                return false;
              coordIndex++;
              if (geomType === "MultiPoint")
                multiFeatureIndex++;
            }
            if (geomType === "LineString")
              multiFeatureIndex++;
            break;
          case "Polygon":
          case "MultiLineString":
            for (j = 0; j < coords.length; j++) {
              for (k = 0; k < coords[j].length - wrapShrink; k++) {
                if (callback(
                  coords[j][k],
                  coordIndex,
                  featureIndex,
                  multiFeatureIndex,
                  geometryIndex
                ) === false)
                  return false;
                coordIndex++;
              }
              if (geomType === "MultiLineString")
                multiFeatureIndex++;
              if (geomType === "Polygon")
                geometryIndex++;
            }
            if (geomType === "Polygon")
              multiFeatureIndex++;
            break;
          case "MultiPolygon":
            for (j = 0; j < coords.length; j++) {
              geometryIndex = 0;
              for (k = 0; k < coords[j].length; k++) {
                for (l = 0; l < coords[j][k].length - wrapShrink; l++) {
                  if (callback(
                    coords[j][k][l],
                    coordIndex,
                    featureIndex,
                    multiFeatureIndex,
                    geometryIndex
                  ) === false)
                    return false;
                  coordIndex++;
                }
                geometryIndex++;
              }
              multiFeatureIndex++;
            }
            break;
          case "GeometryCollection":
            for (j = 0; j < geometry.geometries.length; j++)
              if (coordEach$1(geometry.geometries[j], callback, excludeWrapCoord) === false)
                return false;
            break;
          default:
            throw new Error("Unknown Geometry Type");
        }
      }
    }
  }
  __name$1(coordEach$1, "coordEach");
  function coordReduce$1(geojson, callback, initialValue, excludeWrapCoord) {
    var previousValue = initialValue;
    coordEach$1(
      geojson,
      function(currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {
        if (coordIndex === 0 && initialValue === void 0)
          previousValue = currentCoord;
        else
          previousValue = callback(
            previousValue,
            currentCoord,
            coordIndex,
            featureIndex,
            multiFeatureIndex,
            geometryIndex
          );
      },
      excludeWrapCoord
    );
    return previousValue;
  }
  __name$1(coordReduce$1, "coordReduce");
  function propEach$1(geojson, callback) {
    var i;
    switch (geojson.type) {
      case "FeatureCollection":
        for (i = 0; i < geojson.features.length; i++) {
          if (callback(geojson.features[i].properties, i) === false)
            break;
        }
        break;
      case "Feature":
        callback(geojson.properties, 0);
        break;
    }
  }
  __name$1(propEach$1, "propEach");
  function propReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    propEach$1(geojson, function(currentProperties, featureIndex) {
      if (featureIndex === 0 && initialValue === void 0)
        previousValue = currentProperties;
      else
        previousValue = callback(previousValue, currentProperties, featureIndex);
    });
    return previousValue;
  }
  __name$1(propReduce$1, "propReduce");
  function featureEach$1(geojson, callback) {
    if (geojson.type === "Feature") {
      callback(geojson, 0);
    } else if (geojson.type === "FeatureCollection") {
      for (var i = 0; i < geojson.features.length; i++) {
        if (callback(geojson.features[i], i) === false)
          break;
      }
    }
  }
  __name$1(featureEach$1, "featureEach");
  function featureReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    featureEach$1(geojson, function(currentFeature, featureIndex) {
      if (featureIndex === 0 && initialValue === void 0)
        previousValue = currentFeature;
      else
        previousValue = callback(previousValue, currentFeature, featureIndex);
    });
    return previousValue;
  }
  __name$1(featureReduce$1, "featureReduce");
  function coordAll$1(geojson) {
    var coords = [];
    coordEach$1(geojson, function(coord) {
      coords.push(coord);
    });
    return coords;
  }
  __name$1(coordAll$1, "coordAll");
  function geomEach$1(geojson, callback) {
    var i, j, g, geometry, stopG, geometryMaybeCollection, isGeometryCollection, featureProperties, featureBBox, featureId, featureIndex = 0, isFeatureCollection = geojson.type === "FeatureCollection", isFeature = geojson.type === "Feature", stop = isFeatureCollection ? geojson.features.length : 1;
    for (i = 0; i < stop; i++) {
      geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;
      featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};
      featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : void 0;
      featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : void 0;
      isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === "GeometryCollection" : false;
      stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;
      for (g = 0; g < stopG; g++) {
        geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection;
        if (geometry === null) {
          if (callback(
            null,
            featureIndex,
            featureProperties,
            featureBBox,
            featureId
          ) === false)
            return false;
          continue;
        }
        switch (geometry.type) {
          case "Point":
          case "LineString":
          case "MultiPoint":
          case "Polygon":
          case "MultiLineString":
          case "MultiPolygon": {
            if (callback(
              geometry,
              featureIndex,
              featureProperties,
              featureBBox,
              featureId
            ) === false)
              return false;
            break;
          }
          case "GeometryCollection": {
            for (j = 0; j < geometry.geometries.length; j++) {
              if (callback(
                geometry.geometries[j],
                featureIndex,
                featureProperties,
                featureBBox,
                featureId
              ) === false)
                return false;
            }
            break;
          }
          default:
            throw new Error("Unknown Geometry Type");
        }
      }
      featureIndex++;
    }
  }
  __name$1(geomEach$1, "geomEach");
  function geomReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    geomEach$1(
      geojson,
      function(currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {
        if (featureIndex === 0 && initialValue === void 0)
          previousValue = currentGeometry;
        else
          previousValue = callback(
            previousValue,
            currentGeometry,
            featureIndex,
            featureProperties,
            featureBBox,
            featureId
          );
      }
    );
    return previousValue;
  }
  __name$1(geomReduce$1, "geomReduce");
  function flattenEach$1(geojson, callback) {
    geomEach$1(geojson, function(geometry, featureIndex, properties, bbox, id) {
      var type = geometry === null ? null : geometry.type;
      switch (type) {
        case null:
        case "Point":
        case "LineString":
        case "Polygon":
          if (callback(
            feature$1(geometry, properties, { bbox, id }),
            featureIndex,
            0
          ) === false)
            return false;
          return;
      }
      var geomType;
      switch (type) {
        case "MultiPoint":
          geomType = "Point";
          break;
        case "MultiLineString":
          geomType = "LineString";
          break;
        case "MultiPolygon":
          geomType = "Polygon";
          break;
      }
      for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {
        var coordinate = geometry.coordinates[multiFeatureIndex];
        var geom = {
          type: geomType,
          coordinates: coordinate
        };
        if (callback(feature$1(geom, properties), featureIndex, multiFeatureIndex) === false)
          return false;
      }
    });
  }
  __name$1(flattenEach$1, "flattenEach");
  function flattenReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    flattenEach$1(
      geojson,
      function(currentFeature, featureIndex, multiFeatureIndex) {
        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === void 0)
          previousValue = currentFeature;
        else
          previousValue = callback(
            previousValue,
            currentFeature,
            featureIndex,
            multiFeatureIndex
          );
      }
    );
    return previousValue;
  }
  __name$1(flattenReduce$1, "flattenReduce");
  function segmentEach$1(geojson, callback) {
    flattenEach$1(geojson, function(feature2, featureIndex, multiFeatureIndex) {
      var segmentIndex = 0;
      if (!feature2.geometry)
        return;
      var type = feature2.geometry.type;
      if (type === "Point" || type === "MultiPoint")
        return;
      var previousCoords;
      var previousFeatureIndex = 0;
      var previousMultiIndex = 0;
      var prevGeomIndex = 0;
      if (coordEach$1(
        feature2,
        function(currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {
          if (previousCoords === void 0 || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {
            previousCoords = currentCoord;
            previousFeatureIndex = featureIndex;
            previousMultiIndex = multiPartIndexCoord;
            prevGeomIndex = geometryIndex;
            segmentIndex = 0;
            return;
          }
          var currentSegment = lineString$1(
            [previousCoords, currentCoord],
            feature2.properties
          );
          if (callback(
            currentSegment,
            featureIndex,
            multiFeatureIndex,
            geometryIndex,
            segmentIndex
          ) === false)
            return false;
          segmentIndex++;
          previousCoords = currentCoord;
        }
      ) === false)
        return false;
    });
  }
  __name$1(segmentEach$1, "segmentEach");
  function segmentReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    var started = false;
    segmentEach$1(
      geojson,
      function(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {
        if (started === false && initialValue === void 0)
          previousValue = currentSegment;
        else
          previousValue = callback(
            previousValue,
            currentSegment,
            featureIndex,
            multiFeatureIndex,
            geometryIndex,
            segmentIndex
          );
        started = true;
      }
    );
    return previousValue;
  }
  __name$1(segmentReduce$1, "segmentReduce");
  function lineEach$1(geojson, callback) {
    if (!geojson)
      throw new Error("geojson is required");
    flattenEach$1(geojson, function(feature2, featureIndex, multiFeatureIndex) {
      if (feature2.geometry === null)
        return;
      var type = feature2.geometry.type;
      var coords = feature2.geometry.coordinates;
      switch (type) {
        case "LineString":
          if (callback(feature2, featureIndex, multiFeatureIndex, 0, 0) === false)
            return false;
          break;
        case "Polygon":
          for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {
            if (callback(
              lineString$1(coords[geometryIndex], feature2.properties),
              featureIndex,
              multiFeatureIndex,
              geometryIndex
            ) === false)
              return false;
          }
          break;
      }
    });
  }
  __name$1(lineEach$1, "lineEach");
  function lineReduce$1(geojson, callback, initialValue) {
    var previousValue = initialValue;
    lineEach$1(
      geojson,
      function(currentLine, featureIndex, multiFeatureIndex, geometryIndex) {
        if (featureIndex === 0 && initialValue === void 0)
          previousValue = currentLine;
        else
          previousValue = callback(
            previousValue,
            currentLine,
            featureIndex,
            multiFeatureIndex,
            geometryIndex
          );
      }
    );
    return previousValue;
  }
  __name$1(lineReduce$1, "lineReduce");
  function findSegment$1(geojson, options) {
    options = options || {};
    if (!isObject$2(options))
      throw new Error("options is invalid");
    var featureIndex = options.featureIndex || 0;
    var multiFeatureIndex = options.multiFeatureIndex || 0;
    var geometryIndex = options.geometryIndex || 0;
    var segmentIndex = options.segmentIndex || 0;
    var properties = options.properties;
    var geometry;
    switch (geojson.type) {
      case "FeatureCollection":
        if (featureIndex < 0)
          featureIndex = geojson.features.length + featureIndex;
        properties = properties || geojson.features[featureIndex].properties;
        geometry = geojson.features[featureIndex].geometry;
        break;
      case "Feature":
        properties = properties || geojson.properties;
        geometry = geojson.geometry;
        break;
      case "Point":
      case "MultiPoint":
        return null;
      case "LineString":
      case "Polygon":
      case "MultiLineString":
      case "MultiPolygon":
        geometry = geojson;
        break;
      default:
        throw new Error("geojson is invalid");
    }
    if (geometry === null)
      return null;
    var coords = geometry.coordinates;
    switch (geometry.type) {
      case "Point":
      case "MultiPoint":
        return null;
      case "LineString":
        if (segmentIndex < 0)
          segmentIndex = coords.length + segmentIndex - 1;
        return lineString$1(
          [coords[segmentIndex], coords[segmentIndex + 1]],
          properties,
          options
        );
      case "Polygon":
        if (geometryIndex < 0)
          geometryIndex = coords.length + geometryIndex;
        if (segmentIndex < 0)
          segmentIndex = coords[geometryIndex].length + segmentIndex - 1;
        return lineString$1(
          [
            coords[geometryIndex][segmentIndex],
            coords[geometryIndex][segmentIndex + 1]
          ],
          properties,
          options
        );
      case "MultiLineString":
        if (multiFeatureIndex < 0)
          multiFeatureIndex = coords.length + multiFeatureIndex;
        if (segmentIndex < 0)
          segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;
        return lineString$1(
          [
            coords[multiFeatureIndex][segmentIndex],
            coords[multiFeatureIndex][segmentIndex + 1]
          ],
          properties,
          options
        );
      case "MultiPolygon":
        if (multiFeatureIndex < 0)
          multiFeatureIndex = coords.length + multiFeatureIndex;
        if (geometryIndex < 0)
          geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
        if (segmentIndex < 0)
          segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;
        return lineString$1(
          [
            coords[multiFeatureIndex][geometryIndex][segmentIndex],
            coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]
          ],
          properties,
          options
        );
    }
    throw new Error("geojson is invalid");
  }
  __name$1(findSegment$1, "findSegment");
  function findPoint$1(geojson, options) {
    options = options || {};
    if (!isObject$2(options))
      throw new Error("options is invalid");
    var featureIndex = options.featureIndex || 0;
    var multiFeatureIndex = options.multiFeatureIndex || 0;
    var geometryIndex = options.geometryIndex || 0;
    var coordIndex = options.coordIndex || 0;
    var properties = options.properties;
    var geometry;
    switch (geojson.type) {
      case "FeatureCollection":
        if (featureIndex < 0)
          featureIndex = geojson.features.length + featureIndex;
        properties = properties || geojson.features[featureIndex].properties;
        geometry = geojson.features[featureIndex].geometry;
        break;
      case "Feature":
        properties = properties || geojson.properties;
        geometry = geojson.geometry;
        break;
      case "Point":
      case "MultiPoint":
        return null;
      case "LineString":
      case "Polygon":
      case "MultiLineString":
      case "MultiPolygon":
        geometry = geojson;
        break;
      default:
        throw new Error("geojson is invalid");
    }
    if (geometry === null)
      return null;
    var coords = geometry.coordinates;
    switch (geometry.type) {
      case "Point":
        return point$1(coords, properties, options);
      case "MultiPoint":
        if (multiFeatureIndex < 0)
          multiFeatureIndex = coords.length + multiFeatureIndex;
        return point$1(coords[multiFeatureIndex], properties, options);
      case "LineString":
        if (coordIndex < 0)
          coordIndex = coords.length + coordIndex;
        return point$1(coords[coordIndex], properties, options);
      case "Polygon":
        if (geometryIndex < 0)
          geometryIndex = coords.length + geometryIndex;
        if (coordIndex < 0)
          coordIndex = coords[geometryIndex].length + coordIndex;
        return point$1(coords[geometryIndex][coordIndex], properties, options);
      case "MultiLineString":
        if (multiFeatureIndex < 0)
          multiFeatureIndex = coords.length + multiFeatureIndex;
        if (coordIndex < 0)
          coordIndex = coords[multiFeatureIndex].length + coordIndex;
        return point$1(coords[multiFeatureIndex][coordIndex], properties, options);
      case "MultiPolygon":
        if (multiFeatureIndex < 0)
          multiFeatureIndex = coords.length + multiFeatureIndex;
        if (geometryIndex < 0)
          geometryIndex = coords[multiFeatureIndex].length + geometryIndex;
        if (coordIndex < 0)
          coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;
        return point$1(
          coords[multiFeatureIndex][geometryIndex][coordIndex],
          properties,
          options
        );
    }
    throw new Error("geojson is invalid");
  }
  __name$1(findPoint$1, "findPoint");

  var __defProp$2 = Object.defineProperty;
  var __name$2 = (target, value) => __defProp$2(target, "name", { value, configurable: true });
  function bbox$2(geojson, options = {}) {
    if (geojson.bbox != null && true !== options.recompute) {
      return geojson.bbox;
    }
    const result = [Infinity, Infinity, -Infinity, -Infinity];
    coordEach$1(geojson, (coord) => {
      if (result[0] > coord[0]) {
        result[0] = coord[0];
      }
      if (result[1] > coord[1]) {
        result[1] = coord[1];
      }
      if (result[2] < coord[0]) {
        result[2] = coord[0];
      }
      if (result[3] < coord[1]) {
        result[3] = coord[1];
      }
    });
    return result;
  }
  __name$2(bbox$2, "bbox");
  var turf_bbox_default = bbox$2;

  var esm = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bbox: bbox$2,
    'default': turf_bbox_default
  });

  var rbush$2 = /*@__PURE__*/getAugmentedNamespace(rbush$1);

  var helpers = /*@__PURE__*/getAugmentedNamespace(es);

  var meta = /*@__PURE__*/getAugmentedNamespace(es$1);

  var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(esm);

  var turfBBox = require$$0$2.default;
  var featureEach$2 = meta.featureEach;
  var coordEach$2 = meta.coordEach;
  var polygon$2 = helpers.polygon;
  var featureCollection$2 = helpers.featureCollection;

  /**
   * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.
   *
   * @name rbush
   * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a
   * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.
   * @returns {RBush} GeoJSON RBush
   * @example
   * var geojsonRbush = require('geojson-rbush').default;
   * var tree = geojsonRbush();
   */
  function geojsonRbush(maxEntries) {
      var tree = new rbush$2(maxEntries);
      /**
       * [insert](https://github.com/mourner/rbush#data-format)
       *
       * @param {Feature} feature insert single GeoJSON Feature
       * @returns {RBush} GeoJSON RBush
       * @example
       * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
       * tree.insert(poly)
       */
      tree.insert = function (feature) {
          if (feature.type !== 'Feature') throw new Error('invalid feature');
          feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
          return rbush$2.prototype.insert.call(this, feature);
      };

      /**
       * [load](https://github.com/mourner/rbush#bulk-inserting-data)
       *
       * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection
       * @returns {RBush} GeoJSON RBush
       * @example
       * var polys = turf.polygons([
       *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],
       *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]
       * ]);
       * tree.load(polys);
       */
      tree.load = function (features) {
          var load = [];
          // Load an Array of Features
          if (Array.isArray(features)) {
              features.forEach(function (feature) {
                  if (feature.type !== 'Feature') throw new Error('invalid features');
                  feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
                  load.push(feature);
              });
          } else {
              // Load a FeatureCollection
              featureEach$2(features, function (feature) {
                  if (feature.type !== 'Feature') throw new Error('invalid features');
                  feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
                  load.push(feature);
              });
          }
          return rbush$2.prototype.load.call(this, load);
      };

      /**
       * [remove](https://github.com/mourner/rbush#removing-data)
       *
       * @param {Feature} feature remove single GeoJSON Feature
       * @param {Function} equals Pass a custom equals function to compare by value for removal.
       * @returns {RBush} GeoJSON RBush
       * @example
       * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
       *
       * tree.remove(poly);
       */
      tree.remove = function (feature, equals) {
          if (feature.type !== 'Feature') throw new Error('invalid feature');
          feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);
          return rbush$2.prototype.remove.call(this, feature, equals);
      };

      /**
       * [clear](https://github.com/mourner/rbush#removing-data)
       *
       * @returns {RBush} GeoJSON Rbush
       * @example
       * tree.clear()
       */
      tree.clear = function () {
          return rbush$2.prototype.clear.call(this);
      };

      /**
       * [search](https://github.com/mourner/rbush#search)
       *
       * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON
       * @returns {FeatureCollection} all features that intersects with the given GeoJSON.
       * @example
       * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
       *
       * tree.search(poly);
       */
      tree.search = function (geojson) {
          var features = rbush$2.prototype.search.call(this, this.toBBox(geojson));
          return featureCollection$2(features);
      };

      /**
       * [collides](https://github.com/mourner/rbush#collisions)
       *
       * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON
       * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.
       * @example
       * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);
       *
       * tree.collides(poly);
       */
      tree.collides = function (geojson) {
          return rbush$2.prototype.collides.call(this, this.toBBox(geojson));
      };

      /**
       * [all](https://github.com/mourner/rbush#search)
       *
       * @returns {FeatureCollection} all the features in RBush
       * @example
       * tree.all()
       */
      tree.all = function () {
          var features = rbush$2.prototype.all.call(this);
          return featureCollection$2(features);
      };

      /**
       * [toJSON](https://github.com/mourner/rbush#export-and-import)
       *
       * @returns {any} export data as JSON object
       * @example
       * var exported = tree.toJSON()
       */
      tree.toJSON = function () {
          return rbush$2.prototype.toJSON.call(this);
      };

      /**
       * [fromJSON](https://github.com/mourner/rbush#export-and-import)
       *
       * @param {any} json import previously exported data
       * @returns {RBush} GeoJSON RBush
       * @example
       * var exported = {
       *   "children": [
       *     {
       *       "type": "Feature",
       *       "geometry": {
       *         "type": "Point",
       *         "coordinates": [110, 50]
       *       },
       *       "properties": {},
       *       "bbox": [110, 50, 110, 50]
       *     }
       *   ],
       *   "height": 1,
       *   "leaf": true,
       *   "minX": 110,
       *   "minY": 50,
       *   "maxX": 110,
       *   "maxY": 50
       * }
       * tree.fromJSON(exported)
       */
      tree.fromJSON = function (json) {
          return rbush$2.prototype.fromJSON.call(this, json);
      };

      /**
       * Converts GeoJSON to {minX, minY, maxX, maxY} schema
       *
       * @private
       * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from
       * @returns {Object} converted to {minX, minY, maxX, maxY}
       */
      tree.toBBox = function (geojson) {
          var bbox;
          if (geojson.bbox) bbox = geojson.bbox;
          else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;
          else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];
          else if (geojson.type === 'Feature') bbox = turfBBox(geojson);
          else if (geojson.type === 'FeatureCollection') bbox = turfBBox(geojson);
          else throw new Error('invalid geojson')

          return {
              minX: bbox[0],
              minY: bbox[1],
              maxX: bbox[2],
              maxY: bbox[3]
          };
      };
      return tree;
  }

  var geojsonRbush_1 = geojsonRbush;
  var _default$1 = geojsonRbush;
  geojsonRbush_1.default = _default$1;

  /**
   * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).
   *
   * @name lineIntersect
   * @param {GeoJSON} line1 any LineString or Polygon
   * @param {GeoJSON} line2 any LineString or Polygon
   * @returns {FeatureCollection<Point>} point(s) that intersect both
   * @example
   * var line1 = turf.lineString([[126, -11], [129, -21]]);
   * var line2 = turf.lineString([[123, -18], [131, -14]]);
   * var intersects = turf.lineIntersect(line1, line2);
   *
   * //addToMap
   * var addToMap = [line1, line2, intersects]
   */
  function lineIntersect(line1, line2) {
      var unique = {};
      var results = [];
      // First, normalize geometries to features
      // Then, handle simple 2-vertex segments
      if (line1.type === "LineString") {
          line1 = feature(line1);
      }
      if (line2.type === "LineString") {
          line2 = feature(line2);
      }
      if (line1.type === "Feature" &&
          line2.type === "Feature" &&
          line1.geometry !== null &&
          line2.geometry !== null &&
          line1.geometry.type === "LineString" &&
          line2.geometry.type === "LineString" &&
          line1.geometry.coordinates.length === 2 &&
          line2.geometry.coordinates.length === 2) {
          var intersect = intersects$3(line1, line2);
          if (intersect) {
              results.push(intersect);
          }
          return featureCollection(results);
      }
      // Handles complex GeoJSON Geometries
      var tree = geojsonRbush_1();
      tree.load(lineSegment(line2));
      featureEach(lineSegment(line1), function (segment) {
          featureEach(tree.search(segment), function (match) {
              var intersect = intersects$3(segment, match);
              if (intersect) {
                  // prevent duplicate points https://github.com/Turfjs/turf/issues/688
                  var key = getCoords(intersect).join(",");
                  if (!unique[key]) {
                      unique[key] = true;
                      results.push(intersect);
                  }
              }
          });
      });
      return featureCollection(results);
  }
  /**
   * Find a point that intersects LineStrings with two coordinates each
   *
   * @private
   * @param {Feature<LineString>} line1 GeoJSON LineString (Must only contain 2 coordinates)
   * @param {Feature<LineString>} line2 GeoJSON LineString (Must only contain 2 coordinates)
   * @returns {Feature<Point>} intersecting GeoJSON Point
   */
  function intersects$3(line1, line2) {
      var coords1 = getCoords(line1);
      var coords2 = getCoords(line2);
      if (coords1.length !== 2) {
          throw new Error("<intersects> line1 must only contain 2 coordinates");
      }
      if (coords2.length !== 2) {
          throw new Error("<intersects> line2 must only contain 2 coordinates");
      }
      var x1 = coords1[0][0];
      var y1 = coords1[0][1];
      var x2 = coords1[1][0];
      var y2 = coords1[1][1];
      var x3 = coords2[0][0];
      var y3 = coords2[0][1];
      var x4 = coords2[1][0];
      var y4 = coords2[1][1];
      var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
      var numeA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
      var numeB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
      if (denom === 0) {
          if (numeA === 0 && numeB === 0) {
              return null;
          }
          return null;
      }
      var uA = numeA / denom;
      var uB = numeB / denom;
      if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {
          var x = x1 + uA * (x2 - x1);
          var y = y1 + uA * (y2 - y1);
          return point([x, y]);
      }
      return null;
  }

  /**
   * Takes a {@link Point} and a {@link LineString} and calculates the closest Point on the (Multi)LineString.
   *
   * @name nearestPointOnLine
   * @param {Geometry|Feature<LineString|MultiLineString>} lines lines to snap to
   * @param {Geometry|Feature<Point>|number[]} pt point to snap from
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers
   * @returns {Feature<Point>} closest point on the `line` to `point`. The properties object will contain three values: `index`: closest point was found on nth line part, `dist`: distance between pt and the closest point, `location`: distance along the line between start and the closest point.
   * @example
   * var line = turf.lineString([
   *     [-77.031669, 38.878605],
   *     [-77.029609, 38.881946],
   *     [-77.020339, 38.884084],
   *     [-77.025661, 38.885821],
   *     [-77.021884, 38.889563],
   *     [-77.019824, 38.892368]
   * ]);
   * var pt = turf.point([-77.037076, 38.884017]);
   *
   * var snapped = turf.nearestPointOnLine(line, pt, {units: 'miles'});
   *
   * //addToMap
   * var addToMap = [line, pt, snapped];
   * snapped.properties['marker-color'] = '#00f';
   */
  function nearestPointOnLine(lines, pt, options) {
      if (options === void 0) { options = {}; }
      var closestPt = point([Infinity, Infinity], {
          dist: Infinity,
      });
      var length = 0.0;
      flattenEach(lines, function (line) {
          var coords = getCoords(line);
          for (var i = 0; i < coords.length - 1; i++) {
              //start
              var start = point(coords[i]);
              start.properties.dist = distance(pt, start, options);
              //stop
              var stop_1 = point(coords[i + 1]);
              stop_1.properties.dist = distance(pt, stop_1, options);
              // sectionLength
              var sectionLength = distance(start, stop_1, options);
              //perpendicular
              var heightDistance = Math.max(start.properties.dist, stop_1.properties.dist);
              var direction = bearing(start, stop_1);
              var perpendicularPt1 = destination(pt, heightDistance, direction + 90, options);
              var perpendicularPt2 = destination(pt, heightDistance, direction - 90, options);
              var intersect = lineIntersect(lineString([
                  perpendicularPt1.geometry.coordinates,
                  perpendicularPt2.geometry.coordinates,
              ]), lineString([start.geometry.coordinates, stop_1.geometry.coordinates]));
              var intersectPt = null;
              if (intersect.features.length > 0) {
                  intersectPt = intersect.features[0];
                  intersectPt.properties.dist = distance(pt, intersectPt, options);
                  intersectPt.properties.location =
                      length + distance(start, intersectPt, options);
              }
              if (start.properties.dist < closestPt.properties.dist) {
                  closestPt = start;
                  closestPt.properties.index = i;
                  closestPt.properties.location = length;
              }
              if (stop_1.properties.dist < closestPt.properties.dist) {
                  closestPt = stop_1;
                  closestPt.properties.index = i + 1;
                  closestPt.properties.location = length + sectionLength;
              }
              if (intersectPt &&
                  intersectPt.properties.dist < closestPt.properties.dist) {
                  closestPt = intersectPt;
                  closestPt.properties.index = i;
              }
              // update length
              length += sectionLength;
          }
      });
      return closestPt;
  }

  // Note: change RADIUS => earthRadius
  var RADIUS = 6378137;
  /**
   * Takes one or more features and returns their area in square meters.
   *
   * @name area
   * @param {GeoJSON} geojson input GeoJSON feature(s)
   * @returns {number} area in square meters
   * @example
   * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);
   *
   * var area = turf.area(polygon);
   *
   * //addToMap
   * var addToMap = [polygon]
   * polygon.properties.area = area
   */
  function area(geojson) {
      return geomReduce(geojson, function (value, geom) {
          return value + calculateArea(geom);
      }, 0);
  }
  /**
   * Calculate Area
   *
   * @private
   * @param {Geometry} geom GeoJSON Geometries
   * @returns {number} area
   */
  function calculateArea(geom) {
      var total = 0;
      var i;
      switch (geom.type) {
          case "Polygon":
              return polygonArea(geom.coordinates);
          case "MultiPolygon":
              for (i = 0; i < geom.coordinates.length; i++) {
                  total += polygonArea(geom.coordinates[i]);
              }
              return total;
          case "Point":
          case "MultiPoint":
          case "LineString":
          case "MultiLineString":
              return 0;
      }
      return 0;
  }
  function polygonArea(coords) {
      var total = 0;
      if (coords && coords.length > 0) {
          total += Math.abs(ringArea(coords[0]));
          for (var i = 1; i < coords.length; i++) {
              total -= Math.abs(ringArea(coords[i]));
          }
      }
      return total;
  }
  /**
   * @private
   * Calculate the approximate area of the polygon were it projected onto the earth.
   * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.
   *
   * Reference:
   * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for Polygons on a Sphere",
   * JPL Publication 07-03, Jet Propulsion
   * Laboratory, Pasadena, CA, June 2007 https://trs.jpl.nasa.gov/handle/2014/40409
   *
   * @param {Array<Array<number>>} coords Ring Coordinates
   * @returns {number} The approximate signed geodesic area of the polygon in square meters.
   */
  function ringArea(coords) {
      var p1;
      var p2;
      var p3;
      var lowerIndex;
      var middleIndex;
      var upperIndex;
      var i;
      var total = 0;
      var coordsLength = coords.length;
      if (coordsLength > 2) {
          for (i = 0; i < coordsLength; i++) {
              if (i === coordsLength - 2) {
                  // i = N-2
                  lowerIndex = coordsLength - 2;
                  middleIndex = coordsLength - 1;
                  upperIndex = 0;
              }
              else if (i === coordsLength - 1) {
                  // i = N-1
                  lowerIndex = coordsLength - 1;
                  middleIndex = 0;
                  upperIndex = 1;
              }
              else {
                  // i = 0 to N-3
                  lowerIndex = i;
                  middleIndex = i + 1;
                  upperIndex = i + 2;
              }
              p1 = coords[lowerIndex];
              p2 = coords[middleIndex];
              p3 = coords[upperIndex];
              total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));
          }
          total = (total * RADIUS * RADIUS) / 2;
      }
      return total;
  }
  function rad(num) {
      return (num * Math.PI) / 180;
  }

  /**
   * Takes a {@link LineString} and returns a {@link Point} at a specified distance along the line.
   *
   * @name along
   * @param {Feature<LineString>} line input line
   * @param {number} distance distance along the line
   * @param {Object} [options] Optional parameters
   * @param {string} [options.units="kilometers"] can be degrees, radians, miles, or kilometers
   * @returns {Feature<Point>} Point `distance` `units` along the line
   * @example
   * var line = turf.lineString([[-83, 30], [-84, 36], [-78, 41]]);
   * var options = {units: 'miles'};
   *
   * var along = turf.along(line, 200, options);
   *
   * //addToMap
   * var addToMap = [along, line]
   */
  function along(line, distance$1, options) {
      if (options === void 0) { options = {}; }
      // Get Coords
      var geom = getGeom(line);
      var coords = geom.coordinates;
      var travelled = 0;
      for (var i = 0; i < coords.length; i++) {
          if (distance$1 >= travelled && i === coords.length - 1) {
              break;
          }
          else if (travelled >= distance$1) {
              var overshot = distance$1 - travelled;
              if (!overshot) {
                  return point(coords[i]);
              }
              else {
                  var direction = bearing(coords[i], coords[i - 1]) - 180;
                  var interpolated = destination(coords[i], overshot, direction, options);
                  return interpolated;
              }
          }
          else {
              travelled += distance(coords[i], coords[i + 1], options);
          }
      }
      return point(coords[coords.length - 1]);
  }

  /**
   * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.
   *
   * @name length
   * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure
   * @param {Object} [options={}] Optional parameters
   * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers
   * @returns {number} length of GeoJSON
   * @example
   * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);
   * var length = turf.length(line, {units: 'miles'});
   *
   * //addToMap
   * var addToMap = [line];
   * line.properties.distance = length;
   */
  function length(geojson, options) {
      if (options === void 0) { options = {}; }
      // Calculate distance from 2-vertex line segments
      return segmentReduce(geojson, function (previousValue, segment) {
          var coords = segment.geometry.coordinates;
          return previousValue + distance(coords[0], coords[1], options);
      }, 0);
  }

  /**
   * Converts a {@link Polygon} to {@link LineString|(Multi)LineString} or {@link MultiPolygon} to a
   * {@link FeatureCollection} of {@link LineString|(Multi)LineString}.
   *
   * @name polygonToLine
   * @param {Feature<Polygon|MultiPolygon>} poly Feature to convert
   * @param {Object} [options={}] Optional parameters
   * @param {Object} [options.properties={}] translates GeoJSON properties to Feature
   * @returns {FeatureCollection|Feature<LineString|MultiLinestring>} converted (Multi)Polygon to (Multi)LineString
   * @example
   * var poly = turf.polygon([[[125, -30], [145, -30], [145, -20], [125, -20], [125, -30]]]);
   *
   * var line = turf.polygonToLine(poly);
   *
   * //addToMap
   * var addToMap = [line];
   */
  function polygonToLine (poly, options) {
      if (options === void 0) { options = {}; }
      var geom = getGeom(poly);
      if (!options.properties && poly.type === "Feature") {
          options.properties = poly.properties;
      }
      switch (geom.type) {
          case "Polygon":
              return polygonToLine$1(geom, options);
          case "MultiPolygon":
              return multiPolygonToLine(geom, options);
          default:
              throw new Error("invalid poly");
      }
  }
  /**
   * @private
   */
  function polygonToLine$1(poly, options) {
      if (options === void 0) { options = {}; }
      var geom = getGeom(poly);
      var coords = geom.coordinates;
      var properties = options.properties
          ? options.properties
          : poly.type === "Feature"
              ? poly.properties
              : {};
      return coordsToLine(coords, properties);
  }
  /**
   * @private
   */
  function multiPolygonToLine(multiPoly, options) {
      if (options === void 0) { options = {}; }
      var geom = getGeom(multiPoly);
      var coords = geom.coordinates;
      var properties = options.properties
          ? options.properties
          : multiPoly.type === "Feature"
              ? multiPoly.properties
              : {};
      var lines = [];
      coords.forEach(function (coord) {
          lines.push(coordsToLine(coord, properties));
      });
      return featureCollection(lines);
  }
  /**
   * @private
   */
  function coordsToLine(coords, properties) {
      if (coords.length > 1) {
          return multiLineString(coords, properties);
      }
      return lineString(coords[0], properties);
  }

  /**
   * Takes a ring and return true or false whether or not the ring is clockwise or counter-clockwise.
   *
   * @name booleanClockwise
   * @param {Feature<LineString>|LineString|Array<Array<number>>} line to be evaluated
   * @returns {boolean} true/false
   * @example
   * var clockwiseRing = turf.lineString([[0,0],[1,1],[1,0],[0,0]]);
   * var counterClockwiseRing = turf.lineString([[0,0],[1,0],[1,1],[0,0]]);
   *
   * turf.booleanClockwise(clockwiseRing)
   * //=true
   * turf.booleanClockwise(counterClockwiseRing)
   * //=false
   */
  function booleanClockwise(line) {
      var ring = getCoords(line);
      var sum = 0;
      var i = 1;
      var prev;
      var cur;
      while (i < ring.length) {
          prev = cur || ring[0];
          cur = ring[i];
          sum += (cur[0] - prev[0]) * (cur[1] + prev[1]);
          i++;
      }
      return sum > 0;
  }

  var eventemitter3 = createCommonjsModule(function (module) {

  var has = Object.prototype.hasOwnProperty
    , prefix = '~';

  /**
   * Constructor to create a storage for our `EE` objects.
   * An `Events` instance is a plain object whose properties are event names.
   *
   * @constructor
   * @private
   */
  function Events() {}

  //
  // We try to not inherit from `Object.prototype`. In some engines creating an
  // instance in this way is faster than calling `Object.create(null)` directly.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // character to make sure that the built-in object properties are not
  // overridden or used as an attack vector.
  //
  if (Object.create) {
    Events.prototype = Object.create(null);

    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new Events().__proto__) prefix = false;
  }

  /**
   * Representation of a single event listener.
   *
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
   * @constructor
   * @private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  /**
   * Add a listener for a given event.
   *
   * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} context The context to invoke the listener with.
   * @param {Boolean} once Specify if the listener is a one-time listener.
   * @returns {EventEmitter}
   * @private
   */
  function addListener(emitter, event, fn, context, once) {
    if (typeof fn !== 'function') {
      throw new TypeError('The listener must be a function');
    }

    var listener = new EE(fn, context || emitter, once)
      , evt = prefix ? prefix + event : event;

    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
    else emitter._events[evt] = [emitter._events[evt], listener];

    return emitter;
  }

  /**
   * Clear event by name.
   *
   * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
   * @param {(String|Symbol)} evt The Event name.
   * @private
   */
  function clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new Events();
    else delete emitter._events[evt];
  }

  /**
   * Minimal `EventEmitter` interface that is molded against the Node.js
   * `EventEmitter` interface.
   *
   * @constructor
   * @public
   */
  function EventEmitter() {
    this._events = new Events();
    this._eventsCount = 0;
  }

  /**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @public
   */
  EventEmitter.prototype.eventNames = function eventNames() {
    var names = []
      , events
      , name;

    if (this._eventsCount === 0) return names;

    for (name in (events = this._events)) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  /**
   * Return the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Array} The registered listeners.
   * @public
   */
  EventEmitter.prototype.listeners = function listeners(event) {
    var evt = prefix ? prefix + event : event
      , handlers = this._events[evt];

    if (!handlers) return [];
    if (handlers.fn) return [handlers.fn];

    for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
      ee[i] = handlers[i].fn;
    }

    return ee;
  };

  /**
   * Return the number of listeners listening to a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Number} The number of listeners.
   * @public
   */
  EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = prefix ? prefix + event : event
      , listeners = this._events[evt];

    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
  };

  /**
   * Calls each of the listeners registered for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @returns {Boolean} `true` if the event had listeners, else `false`.
   * @public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return false;

    var listeners = this._events[evt]
      , len = arguments.length
      , args
      , i;

    if (listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1: return listeners.fn.call(listeners.context), true;
        case 2: return listeners.fn.call(listeners.context, a1), true;
        case 3: return listeners.fn.call(listeners.context, a1, a2), true;
        case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len -1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length
        , j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1: listeners[i].fn.call(listeners[i].context); break;
          case 2: listeners[i].fn.call(listeners[i].context, a1); break;
          case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
          case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
          default:
            if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
              args[j - 1] = arguments[j];
            }

            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  /**
   * Add a listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    return addListener(this, event, fn, context, false);
  };

  /**
   * Add a one-time listener for a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn The listener function.
   * @param {*} [context=this] The context to invoke the listener with.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    return addListener(this, event, fn, context, true);
  };

  /**
   * Remove the listeners of a given event.
   *
   * @param {(String|Symbol)} event The event name.
   * @param {Function} fn Only remove the listeners that match this function.
   * @param {*} context Only remove the listeners that have this context.
   * @param {Boolean} once Only remove one-time listeners.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;

    if (!this._events[evt]) return this;
    if (!fn) {
      clearEvent(this, evt);
      return this;
    }

    var listeners = this._events[evt];

    if (listeners.fn) {
      if (
        listeners.fn === fn &&
        (!once || listeners.once) &&
        (!context || listeners.context === context)
      ) {
        clearEvent(this, evt);
      }
    } else {
      for (var i = 0, events = [], length = listeners.length; i < length; i++) {
        if (
          listeners[i].fn !== fn ||
          (once && !listeners[i].once) ||
          (context && listeners[i].context !== context)
        ) {
          events.push(listeners[i]);
        }
      }

      //
      // Reset the array, or remove it completely if we have no more listeners.
      //
      if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
      else clearEvent(this, evt);
    }

    return this;
  };

  /**
   * Remove all listeners, or those of the specified event.
   *
   * @param {(String|Symbol)} [event] The event name.
   * @returns {EventEmitter} `this`.
   * @public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;

    if (event) {
      evt = prefix ? prefix + event : event;
      if (this._events[evt]) clearEvent(this, evt);
    } else {
      this._events = new Events();
      this._eventsCount = 0;
    }

    return this;
  };

  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;

  //
  // Allow `EventEmitter` to be imported as module namespace.
  //
  EventEmitter.EventEmitter = EventEmitter;

  //
  // Expose the module.
  //
  {
    module.exports = EventEmitter;
  }
  });

  var LayerRender = /*#__PURE__*/function (_EventEmitter) {
    function LayerRender(scene, _ref) {
      var _this;
      var style = _ref.style;
      _classCallCheck(this, LayerRender);
      _this = _callSuper(this, LayerRender);
      /**
       * 地图场景Scene的实例
       */
      _this.scene = void 0;
      /**
       * 样式配置
       */
      _this.style = void 0;
      /**
       * 图层列表
       */
      _this.layers = void 0;
      /**
       * 当前展示的数据
       */
      _this.data = [];
      _this.scene = scene;
      _this.style = style;
      _this.layers = _this.initLayers();
      _this.layers.forEach(function (layer) {
        scene.addLayer(layer);
        // layer.active(true);
      });
      if (style.callback instanceof Function) {
        style.callback(_this.layers);
      }
      return _this;
    }
    _inherits(LayerRender, _EventEmitter);
    return _createClass(LayerRender, [{
      key: "getLayers",
      value: function getLayers() {
        return this.layers;
      }
      /**
       * 显示所有图层
       */
    }, {
      key: "show",
      value: function show() {
        this.layers.forEach(function (layer) {
          layer.show();
        });
      }
      /**
       * 隐藏所有图层
       */
    }, {
      key: "hide",
      value: function hide() {
        this.layers.forEach(function (layer) {
          layer.hide();
        });
      }
      /**
       * 设置数据
       * @param features 设置对应的Feature数组
       */
    }, {
      key: "setData",
      value: function setData(features) {
        var newFeatures = _toConsumableArray(features).sort(function (a, b) {
          return +a.properties.isActive - +b.properties.isActive;
        });
        this.data = newFeatures;
        this.layers.forEach(function (layer) {
          layer.setData(featureCollection(newFeatures));
        });
      }
      /**
       * render销毁时，需要把图层从Scene中移除
       */
    }, {
      key: "destroy",
      value: function destroy() {
        var _this2 = this;
        this.layers.forEach(function (layer) {
          _this2.scene.removeLayer(layer);
        });
      }
    }]);
  }(eventemitter3.EventEmitter);

  var DashLineRender = /*#__PURE__*/function (_LayerRender) {
    function DashLineRender() {
      _classCallCheck(this, DashLineRender);
      return _callSuper(this, DashLineRender, arguments);
    }
    _inherits(DashLineRender, _LayerRender);
    return _createClass(DashLineRender, [{
      key: "initLayers",
      value: function initLayers() {
        var _this$style = this.style,
          normal = _this$style.normal,
          style = _this$style.style,
          options = _this$style.options;
        var layer = new l7.LineLayer(options !== null && options !== void 0 ? options : {}).source(featureCollection([])).size(normal.size).color(normal.color).shape('line').style(style);
        return [layer];
      }
    }]);
  }(LayerRender);

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$3(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject$3;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = _freeGlobal || freeSelf || Function('return this')();

  var _root = root;

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */
  var now = function() {
    return _root.Date.now();
  };

  var now_1 = now;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  var _trimmedEndIndex = trimmedEndIndex;

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, _trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  var _baseTrim = baseTrim;

  /** Built-in value references. */
  var Symbol$1 = _root.Symbol;

  var _Symbol = Symbol$1;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Built-in value references. */
  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty$3.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  var _getRawTag = getRawTag;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString$2(value) {
    return nativeObjectToString$1.call(value);
  }

  var _objectToString = objectToString$2;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag$1 && symToStringTag$1 in Object(value))
      ? _getRawTag(value)
      : _objectToString(value);
  }

  var _baseGetTag = baseGetTag;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  var isObjectLike_1 = isObjectLike;

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol$3(value) {
    return typeof value == 'symbol' ||
      (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
  }

  var isSymbol_1 = isSymbol$3;

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol_1(value)) {
      return NAN;
    }
    if (isObject_1(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject_1(other) ? (other + '') : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = _baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return (isBinary || reIsOctal.test(value))
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : (reIsBadHex.test(value) ? NAN : +value);
  }

  var toNumber_1 = toNumber;

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max,
      nativeMin = Math.min;

  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */
  function debounce$2(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber_1(wait) || 0;
    if (isObject_1(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;

      return maxing
        ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
        : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
        (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
    }

    function timerExpired() {
      var time = now_1();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now_1());
    }

    function debounced() {
      var time = now_1(),
          isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  var debounce_1 = debounce$2;

  var LineRender = /*#__PURE__*/function (_LayerRender) {
    function LineRender() {
      var _this;
      _classCallCheck(this, LineRender);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, LineRender, [].concat(args));
      _this.onMouseMove = function (e) {
        _this.emit(exports.RenderEvent.Mousemove, e);
      };
      _this.onMouseOut = function (e) {
        _this.emit(exports.RenderEvent.Mouseout, e);
      };
      _this.onMouseDown = function (e) {
        _this.emit(exports.RenderEvent.Dragstart, e);
      };
      _this.onDragging = function (e) {
        _this.emit(exports.RenderEvent.Dragging, e);
      };
      _this.onDragEnd = debounce_1(function (e) {
        _this.emit(exports.RenderEvent.Dragend, e);
      }, 0);
      _this.onUnClick = function (e) {
        _this.emit(exports.RenderEvent.UnClick, e);
      };
      _this.enableHover = function () {
        var _this$layers$, _this$layers$2;
        _this.disableHover();
        (_this$layers$ = _this.layers[0]) === null || _this$layers$ === void 0 ? void 0 : _this$layers$.on(exports.LayerEvent.Mousemove, _this.onMouseMove);
        (_this$layers$2 = _this.layers[0]) === null || _this$layers$2 === void 0 ? void 0 : _this$layers$2.on(exports.LayerEvent.Mouseout, _this.onMouseOut);
      };
      _this.disableHover = function () {
        var _this$layers$3, _this$layers$4;
        (_this$layers$3 = _this.layers[0]) === null || _this$layers$3 === void 0 ? void 0 : _this$layers$3.off(exports.LayerEvent.Mousemove, _this.onMouseMove);
        (_this$layers$4 = _this.layers[0]) === null || _this$layers$4 === void 0 ? void 0 : _this$layers$4.off(exports.LayerEvent.Mouseout, _this.onMouseOut);
      };
      return _this;
    }
    _inherits(LineRender, _LayerRender);
    return _createClass(LineRender, [{
      key: "initLayers",
      value: function initLayers() {
        var _this$style = this.style,
          normal = _this$style.normal,
          hover = _this$style.hover,
          active = _this$style.active,
          style = _this$style.style,
          options = _this$style.options;
        var layer = new l7.LineLayer(options !== null && options !== void 0 ? options : {}).source(featureCollection([])).size('isHover*isActive', function (isHover, isActive) {
          return isActive ? active.size : isHover ? hover.size : normal.size;
        }).color('isHover*isActive', function (isHover, isActive) {
          return isActive ? active.color : isHover ? hover.color : normal.color;
        }).shape('line').style(style);
        return [layer];
      }
    }, {
      key: "enableDrag",
      value: function enableDrag() {
        this.disableDrag();
        this.layers[0].on(exports.LayerEvent.Mousedown, this.onMouseDown);
        this.scene.on(exports.SceneEvent.Dragging, this.onDragging);
        this.scene.on(exports.SceneEvent.Mouseup, this.onDragEnd);
        this.scene.on(exports.SceneEvent.Dragend, this.onDragEnd);
      }
    }, {
      key: "disableDrag",
      value: function disableDrag() {
        this.layers[0].off(exports.LayerEvent.Mousedown, this.onMouseDown);
        this.scene.off(exports.SceneEvent.Dragging, this.onDragging);
        this.scene.off(exports.SceneEvent.Mouseup, this.onDragEnd);
        this.scene.off(exports.SceneEvent.Dragend, this.onDragEnd);
      }
    }, {
      key: "enableUnClick",
      value: function enableUnClick() {
        this.disableUnClick();
        this.layers[0].on(exports.LayerEvent.UnClick, this.onUnClick);
      }
    }, {
      key: "disableUnClick",
      value: function disableUnClick() {
        this.layers[0].off(exports.LayerEvent.UnClick, this.onUnClick);
      }
    }]);
  }(LayerRender);

  var MidPointRender = /*#__PURE__*/function (_LayerRender) {
    function MidPointRender() {
      var _this;
      _classCallCheck(this, MidPointRender);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, MidPointRender, [].concat(args));
      _this.onMouseMove = function (e) {
        _this.emit(exports.RenderEvent.Mousemove, e);
      };
      _this.onMouseOut = function (e) {
        _this.emit(exports.RenderEvent.Mouseout, e);
      };
      _this.onMouseDown = function (e) {
        _this.emit(exports.RenderEvent.Click, e);
      };
      return _this;
    }
    _inherits(MidPointRender, _LayerRender);
    return _createClass(MidPointRender, [{
      key: "initLayers",
      value: function initLayers() {
        var _this$style = this.style,
          normal = _this$style.normal,
          _this$style$style = _this$style.style,
          style = _this$style$style === void 0 ? {} : _this$style$style,
          options = _this$style.options;
        var shape = normal.shape,
          size = normal.size,
          color = normal.color;
        var layer = new l7.PointLayer(options !== null && options !== void 0 ? options : {}).source(featureCollection([])).size(size).color(color).shape(shape).style(style);
        return [layer];
      }
    }, {
      key: "enableClick",
      value: function enableClick() {
        this.disableClick();
        this.layers[0].on(exports.LayerEvent.Mousedown, this.onMouseDown);
      }
    }, {
      key: "disableClick",
      value: function disableClick() {
        this.layers[0].off(exports.LayerEvent.Mousedown, this.onMouseDown);
      }
    }, {
      key: "enableHover",
      value: function enableHover() {
        var _this$layers$, _this$layers$2;
        this.disableHover();
        (_this$layers$ = this.layers[0]) === null || _this$layers$ === void 0 ? void 0 : _this$layers$.on(exports.LayerEvent.Mousemove, this.onMouseMove);
        (_this$layers$2 = this.layers[0]) === null || _this$layers$2 === void 0 ? void 0 : _this$layers$2.on(exports.LayerEvent.Mouseout, this.onMouseOut);
      }
    }, {
      key: "disableHover",
      value: function disableHover() {
        var _this$layers$3, _this$layers$4;
        (_this$layers$3 = this.layers[0]) === null || _this$layers$3 === void 0 ? void 0 : _this$layers$3.off(exports.LayerEvent.Mousemove, this.onMouseMove);
        (_this$layers$4 = this.layers[0]) === null || _this$layers$4 === void 0 ? void 0 : _this$layers$4.off(exports.LayerEvent.Mouseout, this.onMouseOut);
      }
    }]);
  }(LayerRender);

  var PointRender = /*#__PURE__*/function (_LayerRender) {
    function PointRender() {
      var _this;
      _classCallCheck(this, PointRender);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, PointRender, [].concat(args));
      _this.onCreate = function (e) {
        _this.emit(exports.RenderEvent.UnClick, e);
      };
      _this.onMouseMove = function (e) {
        _this.emit(exports.RenderEvent.Mousemove, e);
      };
      _this.onMouseOut = function (e) {
        _this.emit(exports.RenderEvent.Mouseout, e);
      };
      _this.onMouseDown = function (e) {
        _this.emit(exports.RenderEvent.Dragstart, e);
      };
      _this.onDragging = function (e) {
        _this.emit(exports.RenderEvent.Dragging, e);
      };
      _this.onDragEnd = debounce_1(function (e) {
        _this.emit(exports.RenderEvent.Dragend, e);
      }, 0);
      _this.onClick = function (e) {
        _this.emit(exports.RenderEvent.Click, e);
      };
      _this.onContextmenu = function (e) {
        _this.emit(exports.RenderEvent.Contextmenu, e);
      };
      return _this;
    }
    _inherits(PointRender, _LayerRender);
    return _createClass(PointRender, [{
      key: "initLayers",
      value: function initLayers() {
        var _this$style = this.style,
          normal = _this$style.normal,
          hover = _this$style.hover,
          active = _this$style.active,
          _this$style$style = _this$style.style,
          style = _this$style$style === void 0 ? {} : _this$style$style,
          options = _this$style.options;
        var layer = new l7.PointLayer(options !== null && options !== void 0 ? options : {}).source(featureCollection([])).size('isHover*isActive', function (isHover, isActive) {
          return isActive ? active.size : isHover ? hover.size : normal.size;
        }).color('isHover*isActive', function (isHover, isActive) {
          return isActive ? active.color : isHover ? hover.color : normal.color;
        }).shape('isHover*isActive', function (isHover, isActive) {
          return isActive ? active.shape : isHover ? hover.shape : normal.shape;
        }).style(style);
        return [layer];
      }
    }, {
      key: "enableCreate",
      value: function enableCreate() {
        this.disableCreate();
        this.layers[0].on(exports.LayerEvent.UnClick, this.onCreate);
      }
    }, {
      key: "disableCreate",
      value: function disableCreate() {
        this.layers[0].off(exports.LayerEvent.UnClick, this.onCreate);
      }
    }, {
      key: "enableHover",
      value: function enableHover() {
        var _this$layers$, _this$layers$2;
        this.disableHover();
        (_this$layers$ = this.layers[0]) === null || _this$layers$ === void 0 ? void 0 : _this$layers$.on(exports.LayerEvent.Mousemove, this.onMouseMove);
        (_this$layers$2 = this.layers[0]) === null || _this$layers$2 === void 0 ? void 0 : _this$layers$2.on(exports.LayerEvent.Mouseout, this.onMouseOut);
      }
    }, {
      key: "disableHover",
      value: function disableHover() {
        var _this$layers$3, _this$layers$4;
        (_this$layers$3 = this.layers[0]) === null || _this$layers$3 === void 0 ? void 0 : _this$layers$3.off(exports.LayerEvent.Mousemove, this.onMouseMove);
        (_this$layers$4 = this.layers[0]) === null || _this$layers$4 === void 0 ? void 0 : _this$layers$4.off(exports.LayerEvent.Mouseout, this.onMouseOut);
      }
    }, {
      key: "enableDrag",
      value: function enableDrag() {
        this.disableDrag();
        this.layers[0].on(exports.LayerEvent.Mousedown, this.onMouseDown);
        this.scene.on(exports.SceneEvent.Dragging, this.onDragging);
        this.scene.on(exports.SceneEvent.Mouseup, this.onDragEnd);
        this.scene.on(exports.SceneEvent.Dragend, this.onDragEnd);
      }
    }, {
      key: "disableDrag",
      value: function disableDrag() {
        this.layers[0].off(exports.LayerEvent.Mousedown, this.onMouseDown);
        this.scene.off(exports.SceneEvent.Dragging, this.onDragging);
        this.scene.off(exports.SceneEvent.Mouseup, this.onDragEnd);
        this.scene.off(exports.SceneEvent.Dragend, this.onDragEnd);
      }
    }, {
      key: "enableClick",
      value: function enableClick() {
        this.disableClick();
        this.layers[0].on(exports.LayerEvent.Click, this.onClick);
      }
    }, {
      key: "disableClick",
      value: function disableClick() {
        this.layers[0].off(exports.LayerEvent.Click, this.onClick);
      }
    }, {
      key: "enableContextMenu",
      value: function enableContextMenu() {
        this.disableContextMenu();
        this.layers[0].on(exports.LayerEvent.Contextmenu, this.onContextmenu);
      }
    }, {
      key: "disableContextMenu",
      value: function disableContextMenu() {
        this.layers[0].off(exports.LayerEvent.Contextmenu, this.onContextmenu);
      }
    }]);
  }(LayerRender);

  var PolygonRender = /*#__PURE__*/function (_LayerRender) {
    function PolygonRender() {
      var _this;
      _classCallCheck(this, PolygonRender);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, PolygonRender, [].concat(args));
      _this.onMouseMove = function (e) {
        _this.emit(exports.RenderEvent.Mousemove, e);
      };
      _this.onMouseOut = function (e) {
        _this.emit(exports.RenderEvent.Mouseout, e);
      };
      _this.onMouseDown = function (e) {
        _this.emit(exports.RenderEvent.Dragstart, e);
      };
      _this.onDragging = function (e) {
        _this.emit(exports.RenderEvent.Dragging, e);
      };
      _this.onDragEnd = debounce_1(function (e) {
        _this.emit(exports.RenderEvent.Dragend, e);
      }, 0);
      _this.onUnClick = function (e) {
        _this.emit(exports.RenderEvent.UnClick, e);
      };
      _this.enableHover = function () {
        var _this$layers$, _this$layers$2;
        _this.disableHover();
        (_this$layers$ = _this.layers[0]) === null || _this$layers$ === void 0 ? void 0 : _this$layers$.on(exports.LayerEvent.Mousemove, _this.onMouseMove);
        (_this$layers$2 = _this.layers[0]) === null || _this$layers$2 === void 0 ? void 0 : _this$layers$2.on(exports.LayerEvent.Mouseout, _this.onMouseOut);
      };
      _this.disableHover = function () {
        var _this$layers$3, _this$layers$4;
        (_this$layers$3 = _this.layers[0]) === null || _this$layers$3 === void 0 ? void 0 : _this$layers$3.off(exports.LayerEvent.Mousemove, _this.onMouseMove);
        (_this$layers$4 = _this.layers[0]) === null || _this$layers$4 === void 0 ? void 0 : _this$layers$4.off(exports.LayerEvent.Mouseout, _this.onMouseOut);
      };
      return _this;
    }
    _inherits(PolygonRender, _LayerRender);
    return _createClass(PolygonRender, [{
      key: "initLayers",
      value: function initLayers() {
        var _this$style = this.style,
          normal = _this$style.normal,
          hover = _this$style.hover,
          active = _this$style.active,
          style = _this$style.style,
          options = _this$style.options;
        var polygonLayer = new l7.PolygonLayer(options !== null && options !== void 0 ? options : {});
        polygonLayer.source(featureCollection([])).color('isHover*isActive', function (isHover, isActive) {
          return isActive ? active.color : isHover ? hover.color : normal.color;
        }).style(style);
        return [polygonLayer];
      }
    }, {
      key: "enableDrag",
      value: function enableDrag() {
        this.disableDrag();
        this.layers[0].on(exports.LayerEvent.Mousedown, this.onMouseDown);
        this.scene.on(exports.SceneEvent.Dragging, this.onDragging);
        this.scene.on(exports.SceneEvent.Mouseup, this.onDragEnd);
        this.scene.on(exports.SceneEvent.Dragend, this.onDragEnd);
      }
    }, {
      key: "disableDrag",
      value: function disableDrag() {
        this.layers[0].off(exports.LayerEvent.Mousedown, this.onMouseDown);
        this.scene.off(exports.SceneEvent.Dragging, this.onDragging);
        this.scene.off(exports.SceneEvent.Mouseup, this.onDragEnd);
        this.scene.off(exports.SceneEvent.Dragend, this.onDragEnd);
      }
    }, {
      key: "enableUnClick",
      value: function enableUnClick() {
        this.disableUnClick();
        this.layers[0].on(exports.LayerEvent.UnClick, this.onUnClick);
      }
    }, {
      key: "disableUnClick",
      value: function disableUnClick() {
        this.layers[0].off(exports.LayerEvent.UnClick, this.onUnClick);
      }
    }]);
  }(LayerRender);

  var SceneRender = /*#__PURE__*/function (_EventEmitter) {
    function SceneRender(scene) {
      var _this;
      _classCallCheck(this, SceneRender);
      _this = _callSuper(this, SceneRender);
      _this.scene = void 0;
      _this.previousClick = void 0;
      /**
       * L7原生dblclick经常误触发，故改用这种方式
       * @param e
       */
      _this.onDblClick = function (e) {
        var _ref2, _e$pixel;
        var _ref = (_ref2 = (_e$pixel = e.pixel) !== null && _e$pixel !== void 0 ? _e$pixel : e.point) !== null && _ref2 !== void 0 ? _ref2 : {},
          _ref$x = _ref.x,
          x = _ref$x === void 0 ? 0 : _ref$x,
          _ref$y = _ref.y,
          y = _ref$y === void 0 ? 0 : _ref$y;
        var time = Date.now();
        if (_this.previousClick) {
          var _this$previousClick = _this.previousClick,
            oldX = _this$previousClick.x,
            oldY = _this$previousClick.y,
            oldTime = _this$previousClick.time;
          if (time - oldTime < 300 && Math.abs(x - oldX) < 5 && Math.abs(y - oldY) < 5) {
            _this.emit(exports.RenderEvent.DblClick, e);
          }
        }
        _this.previousClick = {
          x: x,
          y: y,
          time: time
        };
      };
      _this.onMouseMove = function (e) {
        _this.emit(exports.RenderEvent.Mousemove, e);
      };
      _this.onMouseDown = function (e) {
        _this.emit(exports.RenderEvent.Dragstart, e);
      };
      _this.onDragging = function (e) {
        _this.emit(exports.RenderEvent.Dragging, e);
      };
      _this.onDragEnd = debounce_1(function (e) {
        _this.emit(exports.RenderEvent.Dragend, e);
      }, 0);
      _this.scene = scene;
      return _this;
    }
    _inherits(SceneRender, _EventEmitter);
    return _createClass(SceneRender, [{
      key: "enableDrag",
      value: function enableDrag() {
        this.disableDrag();
        this.scene.on(exports.SceneEvent.Mousedown, this.onMouseDown);
        this.scene.on(exports.SceneEvent.Dragging, this.onDragging);
        this.scene.on(exports.SceneEvent.Mouseup, this.onDragEnd);
        this.scene.on(exports.SceneEvent.Dragend, this.onDragEnd);
      }
    }, {
      key: "disableDrag",
      value: function disableDrag() {
        this.scene.off(exports.SceneEvent.Mousedown, this.onMouseDown);
        this.scene.off(exports.SceneEvent.Dragging, this.onDragging);
        this.scene.off(exports.SceneEvent.Mouseup, this.onDragEnd);
        this.scene.off(exports.SceneEvent.Dragend, this.onDragEnd);
      }
    }, {
      key: "enableMouseMove",
      value: function enableMouseMove() {
        this.disableMouseMove();
        this.scene.on(exports.SceneEvent.Mousemove, this.onMouseMove);
      }
    }, {
      key: "disableMouseMove",
      value: function disableMouseMove() {
        this.scene.off(exports.SceneEvent.Mousemove, this.onMouseMove);
      }
    }, {
      key: "enableDblClick",
      value: function enableDblClick() {
        this.disableDblClick();
        this.scene.on(exports.SceneEvent.Mousedown, this.onDblClick);
      }
    }, {
      key: "disableDblClick",
      value: function disableDblClick() {
        this.scene.off(exports.SceneEvent.Mousedown, this.onDblClick);
      }
    }]);
  }(eventemitter3);

  var TextRender = /*#__PURE__*/function (_LayerRender) {
    function TextRender() {
      _classCallCheck(this, TextRender);
      return _callSuper(this, TextRender, arguments);
    }
    _inherits(TextRender, _LayerRender);
    return _createClass(TextRender, [{
      key: "initLayers",
      value: function initLayers() {
        var _this$style = this.style,
          normal = _this$style.normal,
          active = _this$style.active,
          _this$style$style = _this$style.style,
          style = _this$style$style === void 0 ? {} : _this$style$style,
          options = _this$style.options;
        var layer = new l7.PointLayer(options !== null && options !== void 0 ? options : {}).source(featureCollection([])).size('isActive', function (isActive) {
          return isActive ? active.size : normal.size;
        }).color('isActive', function (isActive) {
          return isActive ? active.color : normal.color;
        }).shape('text', 'text').style(style);
        return [layer];
      }
    }]);
  }(LayerRender);

  /**
   * renderType与render的映射
   */
  var RENDER_MAP = {
    point: PointRender,
    line: LineRender,
    dashLine: DashLineRender,
    midPoint: MidPointRender,
    text: TextRender,
    polygon: PolygonRender
  };

  var NORMAL_COLOR = '#1990FF';
  var ACTIVE_COLOR = '#ED9D48';
  var DEFAULT_COMMON_OPTIONS = {
    blend: 'normal',
    pickingBuffer: 5
  };
  var DEFAULT_POINT_NORMAL_STYLE = {
    color: NORMAL_COLOR,
    shape: 'circle',
    size: 6
  };
  var DEFAULT_NODE_NORMAL_STYLE = {
    color: ACTIVE_COLOR,
    shape: 'circle',
    size: 6
  };
  var DEFAULT_MID_POINT_STYLE = {
    shape: 'circle',
    size: 6,
    color: ACTIVE_COLOR
  };
  var DEFAULT_POINT_STYLE = {
    options: DEFAULT_COMMON_OPTIONS,
    normal: DEFAULT_POINT_NORMAL_STYLE,
    hover: _objectSpread2(_objectSpread2({}, DEFAULT_POINT_NORMAL_STYLE), {}, {
      size: 8
    }),
    active: _objectSpread2(_objectSpread2({}, DEFAULT_POINT_NORMAL_STYLE), {}, {
      size: 8,
      color: ACTIVE_COLOR
    }),
    style: {
      stroke: '#ffffff',
      strokeWidth: 2
    }
  };
  var DEFAULT_NODE_STYLE = {
    options: DEFAULT_COMMON_OPTIONS,
    normal: DEFAULT_NODE_NORMAL_STYLE,
    hover: _objectSpread2(_objectSpread2({}, DEFAULT_NODE_NORMAL_STYLE), {}, {
      size: 8
    }),
    active: _objectSpread2(_objectSpread2({}, DEFAULT_NODE_NORMAL_STYLE), {}, {
      size: 8
    }),
    style: {
      stroke: '#ffffff',
      strokeWidth: 2
    }
  };
  var DEFAULT_TEXT_NORMAL_STYLE = {
    color: NORMAL_COLOR,
    size: 12
  };
  var DEFAULT_STYLE = {
    point: DEFAULT_NODE_STYLE,
    line: {
      options: DEFAULT_COMMON_OPTIONS,
      normal: {
        color: NORMAL_COLOR,
        size: 2
      },
      hover: {
        color: NORMAL_COLOR,
        size: 2
      },
      active: {
        color: ACTIVE_COLOR,
        size: 2
      },
      style: {}
    },
    polygon: {
      options: DEFAULT_COMMON_OPTIONS,
      normal: {
        color: NORMAL_COLOR
      },
      hover: {
        color: NORMAL_COLOR
      },
      active: {
        color: ACTIVE_COLOR
      },
      style: {
        opacity: 0.15
      }
    },
    midPoint: {
      options: DEFAULT_COMMON_OPTIONS,
      normal: DEFAULT_MID_POINT_STYLE
    },
    dashLine: {
      options: DEFAULT_COMMON_OPTIONS,
      normal: {
        color: ACTIVE_COLOR,
        size: 2
      },
      style: {
        lineType: 'dash',
        dashArray: [6, 6]
      }
    },
    text: {
      options: DEFAULT_COMMON_OPTIONS,
      normal: DEFAULT_TEXT_NORMAL_STYLE,
      active: _objectSpread2(_objectSpread2({}, DEFAULT_TEXT_NORMAL_STYLE), {}, {
        color: ACTIVE_COLOR
      }),
      style: {
        fontWeight: '800',
        textOffset: [0, DEFAULT_TEXT_NORMAL_STYLE.size + 6],
        textAllowOverlap: true,
        stroke: '#ffffff',
        strokeWidth: 2
      }
    }
  };

  var DEFAULT_POINT_HELPER_CONFIG = {
    draw: '单击绘制点',
    pointHover: '可拖拽调整点位置',
    pointDrag: null
  };
  var DEFAULT_LINE_HELPER_CONFIG = {
    draw: '单击绘制首个节点',
    pointHover: '可拖拽调整节点位置',
    pointDrag: null,
    lineHover: '可拖拽调整线位置',
    lineDrag: null,
    midPointHover: '单击在该位置新增节点',
    drawFinish: '单击继续绘制，双击结束绘制'
  };
  var DEFAULT_POLYGON_HELPER_CONFIG = {
    draw: '单击绘制首个节点',
    drawContinue: '单击继续绘制',
    drawFinish: '单击继续绘制，双击结束绘制',
    midPointHover: '单击在该位置新增节点',
    pointHover: '可拖拽调整节点位置',
    pointDrag: null,
    lineHover: '可拖拽调整面位置',
    lineDrag: null,
    polygonHover: '可拖拽调整面位置',
    polygonDrag: null
  };
  var DEFAULT_DRAG_POLYGON_HELPER_CONFIg = _objectSpread2(_objectSpread2({}, DEFAULT_POLYGON_HELPER_CONFIG), {}, {
    draw: '单击绘制首个节点',
    drawFinish: '单击结束绘制'
  });
  var DEFAULT_TRIGGER_DRAG_HELPER_CONFIG = {
    draw: '拖拽开始绘制',
    drawFinish: '松开鼠标结束绘制'
  };
  var DEFAULT_RECT_HELPER_CONFIG = {
    lineHover: '可拖拽调整矩形位置',
    polygonHover: '可拖拽调整矩形位置'
  };
  var DEFAULT_CIRCLE_HELPER_CONFIG = {
    lineHover: '可拖拽调整圆位置',
    polygonHover: '可拖拽调整圆位置'
  };

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  var eq_1 = eq;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq_1(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  var _assocIndexOf = assocIndexOf;

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return _assocIndexOf(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  var _listCacheSet = listCacheSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = _listCacheClear;
  ListCache.prototype['delete'] = _listCacheDelete;
  ListCache.prototype.get = _listCacheGet;
  ListCache.prototype.has = _listCacheHas;
  ListCache.prototype.set = _listCacheSet;

  var _ListCache = ListCache;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new _ListCache;
    this.size = 0;
  }

  var _stackClear = stackClear;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas;

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$2(value) {
    if (!isObject_1(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = _baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction$2;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = _root['__core-js_shared__'];

  var _coreJsData = coreJsData;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  var _isMasked = isMasked;

  /** Used for built-in method references. */
  var funcProto = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  var _toSource = toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
      objectProto$2 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$2.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$1.call(hasOwnProperty$4).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject_1(value) || _isMasked(value)) {
      return false;
    }
    var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSource(value));
  }

  var _baseIsNative = baseIsNative;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = _getValue(object, key);
    return _baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative;

  /* Built-in method references that are verified to be native. */
  var Map$1 = _getNative(_root, 'Map');

  var _Map = Map$1;

  /* Built-in method references that are verified to be native. */
  var nativeCreate = _getNative(Object, 'create');

  var _nativeCreate = nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$3.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (_nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$5.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet;

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$4.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$6.call(data, key);
  }

  var _hashHas = hashHas;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = _hashClear;
  Hash.prototype['delete'] = _hashDelete;
  Hash.prototype.get = _hashGet;
  Hash.prototype.has = _hashHas;
  Hash.prototype.set = _hashSet;

  var _Hash = Hash;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new _Hash,
      'map': new (_Map || _ListCache),
      'string': new _Hash
    };
  }

  var _mapCacheClear = mapCacheClear;

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  var _isKeyable = isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  var _getMapData = getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = _getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return _getMapData(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return _getMapData(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = _getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = _mapCacheClear;
  MapCache.prototype['delete'] = _mapCacheDelete;
  MapCache.prototype.get = _mapCacheGet;
  MapCache.prototype.has = _mapCacheHas;
  MapCache.prototype.set = _mapCacheSet;

  var _MapCache = MapCache;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof _ListCache) {
      var pairs = data.__data__;
      if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new _MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new _ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = _stackClear;
  Stack.prototype['delete'] = _stackDelete;
  Stack.prototype.get = _stackGet;
  Stack.prototype.has = _stackHas;
  Stack.prototype.set = _stackSet;

  var _Stack = Stack;

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  var _arrayEach = arrayEach;

  var defineProperty$2 = (function() {
    try {
      var func = _getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  var _defineProperty$1 = defineProperty$2;

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _defineProperty$1) {
      _defineProperty$1(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$5.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$7.call(object, key) && eq_1(objValue, value)) ||
        (value === undefined && !(key in object))) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignValue = assignValue;

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        _baseAssignValue(object, key, newValue);
      } else {
        _assignValue(object, key, newValue);
      }
    }
    return object;
  }

  var _copyObject = copyObject;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  var _baseTimes = baseTimes;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
  }

  var _baseIsArguments = baseIsArguments;

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$6.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments$2 = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
    return isObjectLike_1(value) && hasOwnProperty$8.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  var isArguments_1 = isArguments$2;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray$3 = Array.isArray;

  var isArray_1 = isArray$3;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  var isBuffer_1 = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse_1;

  module.exports = isBuffer;
  });

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  var _isIndex = isIndex;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
  }

  var isLength_1 = isLength;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike_1(value) &&
      isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary;

  var _nodeUtil = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && _freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  module.exports = nodeUtil;
  });

  /* Node.js helper references. */
  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

  var isTypedArray_1 = isTypedArray;

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$7.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_1(value),
        isArg = !isArr && isArguments_1(value),
        isBuff = !isArr && !isArg && isBuffer_1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? _baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$9.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             _isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8;

    return value === proto;
  }

  var _isPrototype = isPrototype;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = _overArg(Object.keys, Object);

  var _nativeKeys = nativeKeys;

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$9.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!_isPrototype(object)) {
      return _nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$a.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeys = baseKeys;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength_1(value.length) && !isFunction_1(value);
  }

  var isArrayLike_1 = isArrayLike;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
  }

  var keys_1 = keys;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && _copyObject(source, keys_1(source), object);
  }

  var _baseAssign = baseAssign;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  var _nativeKeysIn = nativeKeysIn;

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$a.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject_1(object)) {
      return _nativeKeysIn(object);
    }
    var isProto = _isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$b.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeysIn = baseKeysIn;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
  }

  var keysIn_1 = keysIn;

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn(object, source) {
    return object && _copyObject(source, keysIn_1(source), object);
  }

  var _baseAssignIn = baseAssignIn;

  var _cloneBuffer = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
  });

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  var _copyArray = copyArray;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  var _arrayFilter = arrayFilter;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  var stubArray_1 = stubArray;

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$b.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return _arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable$1.call(object, symbol);
    });
  };

  var _getSymbols = getSymbols;

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return _copyObject(source, _getSymbols(source), object);
  }

  var _copySymbols = copySymbols;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  var _arrayPush = arrayPush;

  /** Built-in value references. */
  var getPrototype = _overArg(Object.getPrototypeOf, Object);

  var _getPrototype = getPrototype;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function(object) {
    var result = [];
    while (object) {
      _arrayPush(result, _getSymbols(object));
      object = _getPrototype(object);
    }
    return result;
  };

  var _getSymbolsIn = getSymbolsIn;

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn(source, object) {
    return _copyObject(source, _getSymbolsIn(source), object);
  }

  var _copySymbolsIn = copySymbolsIn;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return _baseGetAllKeys(object, keys_1, _getSymbols);
  }

  var _getAllKeys = getAllKeys;

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn(object) {
    return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn;

  /* Built-in method references that are verified to be native. */
  var DataView$1 = _getNative(_root, 'DataView');

  var _DataView = DataView$1;

  /* Built-in method references that are verified to be native. */
  var Promise$1 = _getNative(_root, 'Promise');

  var _Promise = Promise$1;

  /* Built-in method references that are verified to be native. */
  var Set$1 = _getNative(_root, 'Set');

  var _Set = Set$1;

  /* Built-in method references that are verified to be native. */
  var WeakMap$1 = _getNative(_root, 'WeakMap');

  var _WeakMap = WeakMap$1;

  /** `Object#toString` result references. */
  var mapTag$1 = '[object Map]',
      objectTag$1 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$1 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';

  var dataViewTag$1 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = _toSource(_DataView),
      mapCtorString = _toSource(_Map),
      promiseCtorString = _toSource(_Promise),
      setCtorString = _toSource(_Set),
      weakMapCtorString = _toSource(_WeakMap);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = _baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$1) ||
      (_Map && getTag(new _Map) != mapTag$1) ||
      (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
      (_Set && getTag(new _Set) != setTag$1) ||
      (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
    getTag = function(value) {
      var result = _baseGetTag(value),
          Ctor = result == objectTag$1 ? value.constructor : undefined,
          ctorString = Ctor ? _toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag$1;
          case mapCtorString: return mapTag$1;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag$1;
          case weakMapCtorString: return weakMapTag$1;
        }
      }
      return result;
    };
  }

  var _getTag = getTag;

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$c.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$c.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  var _initCloneArray = initCloneArray;

  /** Built-in value references. */
  var Uint8Array$1 = _root.Uint8Array;

  var _Uint8Array = Uint8Array$1;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer;

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol;

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray;

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag$1 = '[object Symbol]';

  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$1:
        return _cloneArrayBuffer(object);

      case boolTag$1:
      case dateTag$1:
        return new Ctor(+object);

      case dataViewTag$2:
        return _cloneDataView(object, isDeep);

      case float32Tag$1: case float64Tag$1:
      case int8Tag$1: case int16Tag$1: case int32Tag$1:
      case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
        return _cloneTypedArray(object, isDeep);

      case mapTag$2:
        return new Ctor;

      case numberTag$1:
      case stringTag$1:
        return new Ctor(object);

      case regexpTag$1:
        return _cloneRegExp(object);

      case setTag$2:
        return new Ctor;

      case symbolTag$1:
        return _cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag;

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject_1(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  var _baseCreate = baseCreate;

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !_isPrototype(object))
      ? _baseCreate(_getPrototype(object))
      : {};
  }

  var _initCloneObject = initCloneObject;

  /** `Object#toString` result references. */
  var mapTag$3 = '[object Map]';

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike_1(value) && _getTag(value) == mapTag$3;
  }

  var _baseIsMap = baseIsMap;

  /* Node.js helper references. */
  var nodeIsMap = _nodeUtil && _nodeUtil.isMap;

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap$2 = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

  var isMap_1 = isMap$2;

  /** `Object#toString` result references. */
  var setTag$3 = '[object Set]';

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike_1(value) && _getTag(value) == setTag$3;
  }

  var _baseIsSet = baseIsSet;

  /* Node.js helper references. */
  var nodeIsSet = _nodeUtil && _nodeUtil.isSet;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet$2 = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

  var isSet_1 = isSet$2;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$2 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      errorTag$1 = '[object Error]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      mapTag$4 = '[object Map]',
      numberTag$2 = '[object Number]',
      objectTag$2 = '[object Object]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$2 = '[object Symbol]',
      weakMapTag$2 = '[object WeakMap]';

  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$3 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$2] = cloneableTags[arrayTag$1] =
  cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] =
  cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
  cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] =
  cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] =
  cloneableTags[int32Tag$2] = cloneableTags[mapTag$4] =
  cloneableTags[numberTag$2] = cloneableTags[objectTag$2] =
  cloneableTags[regexpTag$2] = cloneableTags[setTag$4] =
  cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] =
  cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] =
  cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag$2] =
  cloneableTags[weakMapTag$2] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject_1(value)) {
      return value;
    }
    var isArr = isArray_1(value);
    if (isArr) {
      result = _initCloneArray(value);
      if (!isDeep) {
        return _copyArray(value, result);
      }
    } else {
      var tag = _getTag(value),
          isFunc = tag == funcTag$2 || tag == genTag$1;

      if (isBuffer_1(value)) {
        return _cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$2 || tag == argsTag$2 || (isFunc && !object)) {
        result = (isFlat || isFunc) ? {} : _initCloneObject(value);
        if (!isDeep) {
          return isFlat
            ? _copySymbolsIn(value, _baseAssignIn(result, value))
            : _copySymbols(value, _baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = _initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new _Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (isSet_1(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap_1(value)) {
      value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
    }

    var keysFunc = isFull
      ? (isFlat ? _getAllKeysIn : _getAllKeys)
      : (isFlat ? keysIn_1 : keys_1);

    var props = isArr ? undefined : keysFunc(value);
    _arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_SYMBOLS_FLAG$1 = 4;

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  var cloneDeep_1 = cloneDeep;

  /**
   * The inverse of `_.toPairs`; this method returns an object composed
   * from key-value `pairs`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} pairs The key-value pairs.
   * @returns {Object} Returns the new object.
   * @example
   *
   * _.fromPairs([['a', 1], ['b', 2]]);
   * // => { 'a': 1, 'b': 2 }
   */
  function fromPairs(pairs) {
    var index = -1,
        length = pairs == null ? 0 : pairs.length,
        result = {};

    while (++index < length) {
      var pair = pairs[index];
      result[pair[0]] = pair[1];
    }
    return result;
  }

  var fromPairs_1 = fromPairs;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED$2);
    return this;
  }

  var _setCacheAdd = setCacheAdd;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new _MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
  SetCache.prototype.has = _setCacheHas;

  var _SetCache = SetCache;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  var _arraySome = arraySome;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!_arraySome(other, function(othValue, othIndex) {
              if (!_cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;

  /** `Object#toString` result references. */
  var boolTag$3 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$2 = '[object Error]',
      mapTag$5 = '[object Map]',
      numberTag$3 = '[object Number]',
      regexpTag$3 = '[object RegExp]',
      setTag$5 = '[object Set]',
      stringTag$3 = '[object String]',
      symbolTag$3 = '[object Symbol]';

  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$4:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag$3:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag$3:
      case dateTag$3:
      case numberTag$3:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq_1(+object, +other);

      case errorTag$2:
        return object.name == other.name && object.message == other.message;

      case regexpTag$3:
      case stringTag$3:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag$5:
        var convert = _mapToArray;

      case setTag$5:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
        convert || (convert = _setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$1;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag$3:
        if (symbolValueOf$1) {
          return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
        }
    }
    return false;
  }

  var _equalByTag = equalByTag;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1;

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$d = objectProto$d.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
        objProps = _getAllKeys(object),
        objLength = objProps.length,
        othProps = _getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$d.call(other, key))) {
        return false;
      }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1;

  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      objectTag$3 = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$e = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$e = objectProto$e.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_1(object),
        othIsArr = isArray_1(other),
        objTag = objIsArr ? arrayTag$2 : _getTag(object),
        othTag = othIsArr ? arrayTag$2 : _getTag(other);

    objTag = objTag == argsTag$3 ? objectTag$3 : objTag;
    othTag = othTag == argsTag$3 ? objectTag$3 : othTag;

    var objIsObj = objTag == objectTag$3,
        othIsObj = othTag == objectTag$3,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer_1(object)) {
      if (!isBuffer_1(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new _Stack);
      return (objIsArr || isTypedArray_1(object))
        ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
      var objIsWrapped = objIsObj && hasOwnProperty$e.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$e.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new _Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new _Stack);
    return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep;

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
      return value !== value && other !== other;
    }
    return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  var _baseIsEqual = baseIsEqual;

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return _baseIsEqual(value, other);
  }

  var isEqual_1 = isEqual;

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue(object, key, value) {
    if ((value !== undefined && !eq_1(object[key], value)) ||
        (value === undefined && !(key in object))) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignMergeValue = assignMergeValue;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  var _createBaseFor = createBaseFor;

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = _createBaseFor();

  var _baseFor = baseFor;

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike_1(value) && isArrayLike_1(value);
  }

  var isArrayLikeObject_1 = isArrayLikeObject;

  /** `Object#toString` result references. */
  var objectTag$4 = '[object Object]';

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype,
      objectProto$f = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$f = objectProto$f.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString$2.call(Object);

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject(value) {
    if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag$4) {
      return false;
    }
    var proto = _getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$f.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor &&
      funcToString$2.call(Ctor) == objectCtorString;
  }

  var isPlainObject_1 = isPlainObject;

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  var _safeGet = safeGet;

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return _copyObject(value, keysIn_1(value));
  }

  var toPlainObject_1 = toPlainObject;

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = _safeGet(object, key),
        srcValue = _safeGet(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      _assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer
      ? customizer(objValue, srcValue, (key + ''), object, source, stack)
      : undefined;

    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray_1(srcValue),
          isBuff = !isArr && isBuffer_1(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray_1(srcValue);

      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray_1(objValue)) {
          newValue = objValue;
        }
        else if (isArrayLikeObject_1(objValue)) {
          newValue = _copyArray(objValue);
        }
        else if (isBuff) {
          isCommon = false;
          newValue = _cloneBuffer(srcValue, true);
        }
        else if (isTyped) {
          isCommon = false;
          newValue = _cloneTypedArray(srcValue, true);
        }
        else {
          newValue = [];
        }
      }
      else if (isPlainObject_1(srcValue) || isArguments_1(srcValue)) {
        newValue = objValue;
        if (isArguments_1(objValue)) {
          newValue = toPlainObject_1(objValue);
        }
        else if (!isObject_1(objValue) || isFunction_1(objValue)) {
          newValue = _initCloneObject(srcValue);
        }
      }
      else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    _assignMergeValue(object, key, newValue);
  }

  var _baseMergeDeep = baseMergeDeep;

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    _baseFor(source, function(srcValue, key) {
      stack || (stack = new _Stack);
      if (isObject_1(srcValue)) {
        _baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      }
      else {
        var newValue = customizer
          ? customizer(_safeGet(object, key), srcValue, (key + ''), object, source, stack)
          : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }
        _assignMergeValue(object, key, newValue);
      }
    }, keysIn_1);
  }

  var _baseMerge = baseMerge;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  var identity_1 = identity;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  var _apply = apply;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$1 = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax$1(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax$1(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return _apply(func, this, otherArgs);
    };
  }

  var _overRest = overRest;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function() {
      return value;
    };
  }

  var constant_1 = constant;

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !_defineProperty$1 ? identity_1 : function(func, string) {
    return _defineProperty$1(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant_1(string),
      'writable': true
    });
  };

  var _baseSetToString = baseSetToString;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut;

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = _shortOut(_baseSetToString);

  var _setToString = setToString;

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return _setToString(_overRest(func, start, identity_1), func + '');
  }

  var _baseRest = baseRest;

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject_1(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike_1(object) && _isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq_1(object[index], value);
    }
    return false;
  }

  var _isIterateeCall = isIterateeCall;

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return _baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  var _createAssigner = createAssigner;

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge = _createAssigner(function(object, source, srcIndex) {
    _baseMerge(object, source, srcIndex);
  });

  var merge_1 = merge;

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  var _arrayMap = arrayMap;

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return _arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  var _baseToPairs = baseToPairs;

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  var _setToPairs = setToPairs;

  /** `Object#toString` result references. */
  var mapTag$6 = '[object Map]',
      setTag$6 = '[object Set]';

  /**
   * Creates a `_.toPairs` or `_.toPairsIn` function.
   *
   * @private
   * @param {Function} keysFunc The function to get the keys of a given object.
   * @returns {Function} Returns the new pairs function.
   */
  function createToPairs(keysFunc) {
    return function(object) {
      var tag = _getTag(object);
      if (tag == mapTag$6) {
        return _mapToArray(object);
      }
      if (tag == setTag$6) {
        return _setToPairs(object);
      }
      return _baseToPairs(object, keysFunc(object));
    };
  }

  var _createToPairs = createToPairs;

  /**
   * Creates an array of own enumerable string keyed-value pairs for `object`
   * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
   * entries are returned.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias entries
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the key-value pairs.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.toPairs(new Foo);
   * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
   */
  var toPairs = _createToPairs(keys_1);

  var toPairs_1 = toPairs;

  var mousetrap = createCommonjsModule(function (module) {
  /*global define:false */
  /**
   * Copyright 2012-2017 Craig Campbell
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * Mousetrap is a simple keyboard shortcut library for Javascript with
   * no external dependencies
   *
   * @version 1.6.5
   * @url craig.is/killing/mice
   */
  (function(window, document, undefined$1) {

      // Check if mousetrap is used inside browser, if not, return
      if (!window) {
          return;
      }

      /**
       * mapping of special keycodes to their corresponding keys
       *
       * everything in this dictionary cannot use keypress events
       * so it has to be here to map to the correct keycodes for
       * keyup/keydown events
       *
       * @type {Object}
       */
      var _MAP = {
          8: 'backspace',
          9: 'tab',
          13: 'enter',
          16: 'shift',
          17: 'ctrl',
          18: 'alt',
          20: 'capslock',
          27: 'esc',
          32: 'space',
          33: 'pageup',
          34: 'pagedown',
          35: 'end',
          36: 'home',
          37: 'left',
          38: 'up',
          39: 'right',
          40: 'down',
          45: 'ins',
          46: 'del',
          91: 'meta',
          93: 'meta',
          224: 'meta'
      };

      /**
       * mapping for special characters so they can support
       *
       * this dictionary is only used incase you want to bind a
       * keyup or keydown event to one of these keys
       *
       * @type {Object}
       */
      var _KEYCODE_MAP = {
          106: '*',
          107: '+',
          109: '-',
          110: '.',
          111 : '/',
          186: ';',
          187: '=',
          188: ',',
          189: '-',
          190: '.',
          191: '/',
          192: '`',
          219: '[',
          220: '\\',
          221: ']',
          222: '\''
      };

      /**
       * this is a mapping of keys that require shift on a US keypad
       * back to the non shift equivelents
       *
       * this is so you can use keyup events with these keys
       *
       * note that this will only work reliably on US keyboards
       *
       * @type {Object}
       */
      var _SHIFT_MAP = {
          '~': '`',
          '!': '1',
          '@': '2',
          '#': '3',
          '$': '4',
          '%': '5',
          '^': '6',
          '&': '7',
          '*': '8',
          '(': '9',
          ')': '0',
          '_': '-',
          '+': '=',
          ':': ';',
          '\"': '\'',
          '<': ',',
          '>': '.',
          '?': '/',
          '|': '\\'
      };

      /**
       * this is a list of special strings you can use to map
       * to modifier keys when you specify your keyboard shortcuts
       *
       * @type {Object}
       */
      var _SPECIAL_ALIASES = {
          'option': 'alt',
          'command': 'meta',
          'return': 'enter',
          'escape': 'esc',
          'plus': '+',
          'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'
      };

      /**
       * variable to store the flipped version of _MAP from above
       * needed to check if we should use keypress or not when no action
       * is specified
       *
       * @type {Object|undefined}
       */
      var _REVERSE_MAP;

      /**
       * loop through the f keys, f1 to f19 and add them to the map
       * programatically
       */
      for (var i = 1; i < 20; ++i) {
          _MAP[111 + i] = 'f' + i;
      }

      /**
       * loop through to map numbers on the numeric keypad
       */
      for (i = 0; i <= 9; ++i) {

          // This needs to use a string cause otherwise since 0 is falsey
          // mousetrap will never fire for numpad 0 pressed as part of a keydown
          // event.
          //
          // @see https://github.com/ccampbell/mousetrap/pull/258
          _MAP[i + 96] = i.toString();
      }

      /**
       * cross browser add event method
       *
       * @param {Element|HTMLDocument} object
       * @param {string} type
       * @param {Function} callback
       * @returns void
       */
      function _addEvent(object, type, callback) {
          if (object.addEventListener) {
              object.addEventListener(type, callback, false);
              return;
          }

          object.attachEvent('on' + type, callback);
      }

      /**
       * takes the event and returns the key character
       *
       * @param {Event} e
       * @return {string}
       */
      function _characterFromEvent(e) {

          // for keypress events we should return the character as is
          if (e.type == 'keypress') {
              var character = String.fromCharCode(e.which);

              // if the shift key is not pressed then it is safe to assume
              // that we want the character to be lowercase.  this means if
              // you accidentally have caps lock on then your key bindings
              // will continue to work
              //
              // the only side effect that might not be desired is if you
              // bind something like 'A' cause you want to trigger an
              // event when capital A is pressed caps lock will no longer
              // trigger the event.  shift+a will though.
              if (!e.shiftKey) {
                  character = character.toLowerCase();
              }

              return character;
          }

          // for non keypress events the special maps are needed
          if (_MAP[e.which]) {
              return _MAP[e.which];
          }

          if (_KEYCODE_MAP[e.which]) {
              return _KEYCODE_MAP[e.which];
          }

          // if it is not in the special map

          // with keydown and keyup events the character seems to always
          // come in as an uppercase character whether you are pressing shift
          // or not.  we should make sure it is always lowercase for comparisons
          return String.fromCharCode(e.which).toLowerCase();
      }

      /**
       * checks if two arrays are equal
       *
       * @param {Array} modifiers1
       * @param {Array} modifiers2
       * @returns {boolean}
       */
      function _modifiersMatch(modifiers1, modifiers2) {
          return modifiers1.sort().join(',') === modifiers2.sort().join(',');
      }

      /**
       * takes a key event and figures out what the modifiers are
       *
       * @param {Event} e
       * @returns {Array}
       */
      function _eventModifiers(e) {
          var modifiers = [];

          if (e.shiftKey) {
              modifiers.push('shift');
          }

          if (e.altKey) {
              modifiers.push('alt');
          }

          if (e.ctrlKey) {
              modifiers.push('ctrl');
          }

          if (e.metaKey) {
              modifiers.push('meta');
          }

          return modifiers;
      }

      /**
       * prevents default for this event
       *
       * @param {Event} e
       * @returns void
       */
      function _preventDefault(e) {
          if (e.preventDefault) {
              e.preventDefault();
              return;
          }

          e.returnValue = false;
      }

      /**
       * stops propogation for this event
       *
       * @param {Event} e
       * @returns void
       */
      function _stopPropagation(e) {
          if (e.stopPropagation) {
              e.stopPropagation();
              return;
          }

          e.cancelBubble = true;
      }

      /**
       * determines if the keycode specified is a modifier key or not
       *
       * @param {string} key
       * @returns {boolean}
       */
      function _isModifier(key) {
          return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';
      }

      /**
       * reverses the map lookup so that we can look for specific keys
       * to see what can and can't use keypress
       *
       * @return {Object}
       */
      function _getReverseMap() {
          if (!_REVERSE_MAP) {
              _REVERSE_MAP = {};
              for (var key in _MAP) {

                  // pull out the numeric keypad from here cause keypress should
                  // be able to detect the keys from the character
                  if (key > 95 && key < 112) {
                      continue;
                  }

                  if (_MAP.hasOwnProperty(key)) {
                      _REVERSE_MAP[_MAP[key]] = key;
                  }
              }
          }
          return _REVERSE_MAP;
      }

      /**
       * picks the best action based on the key combination
       *
       * @param {string} key - character for key
       * @param {Array} modifiers
       * @param {string=} action passed in
       */
      function _pickBestAction(key, modifiers, action) {

          // if no action was picked in we should try to pick the one
          // that we think would work best for this key
          if (!action) {
              action = _getReverseMap()[key] ? 'keydown' : 'keypress';
          }

          // modifier keys don't work as expected with keypress,
          // switch to keydown
          if (action == 'keypress' && modifiers.length) {
              action = 'keydown';
          }

          return action;
      }

      /**
       * Converts from a string key combination to an array
       *
       * @param  {string} combination like "command+shift+l"
       * @return {Array}
       */
      function _keysFromString(combination) {
          if (combination === '+') {
              return ['+'];
          }

          combination = combination.replace(/\+{2}/g, '+plus');
          return combination.split('+');
      }

      /**
       * Gets info for a specific key combination
       *
       * @param  {string} combination key combination ("command+s" or "a" or "*")
       * @param  {string=} action
       * @returns {Object}
       */
      function _getKeyInfo(combination, action) {
          var keys;
          var key;
          var i;
          var modifiers = [];

          // take the keys from this pattern and figure out what the actual
          // pattern is all about
          keys = _keysFromString(combination);

          for (i = 0; i < keys.length; ++i) {
              key = keys[i];

              // normalize key names
              if (_SPECIAL_ALIASES[key]) {
                  key = _SPECIAL_ALIASES[key];
              }

              // if this is not a keypress event then we should
              // be smart about using shift keys
              // this will only work for US keyboards however
              if (action && action != 'keypress' && _SHIFT_MAP[key]) {
                  key = _SHIFT_MAP[key];
                  modifiers.push('shift');
              }

              // if this key is a modifier then add it to the list of modifiers
              if (_isModifier(key)) {
                  modifiers.push(key);
              }
          }

          // depending on what the key combination is
          // we will try to pick the best event for it
          action = _pickBestAction(key, modifiers, action);

          return {
              key: key,
              modifiers: modifiers,
              action: action
          };
      }

      function _belongsTo(element, ancestor) {
          if (element === null || element === document) {
              return false;
          }

          if (element === ancestor) {
              return true;
          }

          return _belongsTo(element.parentNode, ancestor);
      }

      function Mousetrap(targetElement) {
          var self = this;

          targetElement = targetElement || document;

          if (!(self instanceof Mousetrap)) {
              return new Mousetrap(targetElement);
          }

          /**
           * element to attach key events to
           *
           * @type {Element}
           */
          self.target = targetElement;

          /**
           * a list of all the callbacks setup via Mousetrap.bind()
           *
           * @type {Object}
           */
          self._callbacks = {};

          /**
           * direct map of string combinations to callbacks used for trigger()
           *
           * @type {Object}
           */
          self._directMap = {};

          /**
           * keeps track of what level each sequence is at since multiple
           * sequences can start out with the same sequence
           *
           * @type {Object}
           */
          var _sequenceLevels = {};

          /**
           * variable to store the setTimeout call
           *
           * @type {null|number}
           */
          var _resetTimer;

          /**
           * temporary state where we will ignore the next keyup
           *
           * @type {boolean|string}
           */
          var _ignoreNextKeyup = false;

          /**
           * temporary state where we will ignore the next keypress
           *
           * @type {boolean}
           */
          var _ignoreNextKeypress = false;

          /**
           * are we currently inside of a sequence?
           * type of action ("keyup" or "keydown" or "keypress") or false
           *
           * @type {boolean|string}
           */
          var _nextExpectedAction = false;

          /**
           * resets all sequence counters except for the ones passed in
           *
           * @param {Object} doNotReset
           * @returns void
           */
          function _resetSequences(doNotReset) {
              doNotReset = doNotReset || {};

              var activeSequences = false,
                  key;

              for (key in _sequenceLevels) {
                  if (doNotReset[key]) {
                      activeSequences = true;
                      continue;
                  }
                  _sequenceLevels[key] = 0;
              }

              if (!activeSequences) {
                  _nextExpectedAction = false;
              }
          }

          /**
           * finds all callbacks that match based on the keycode, modifiers,
           * and action
           *
           * @param {string} character
           * @param {Array} modifiers
           * @param {Event|Object} e
           * @param {string=} sequenceName - name of the sequence we are looking for
           * @param {string=} combination
           * @param {number=} level
           * @returns {Array}
           */
          function _getMatches(character, modifiers, e, sequenceName, combination, level) {
              var i;
              var callback;
              var matches = [];
              var action = e.type;

              // if there are no events related to this keycode
              if (!self._callbacks[character]) {
                  return [];
              }

              // if a modifier key is coming up on its own we should allow it
              if (action == 'keyup' && _isModifier(character)) {
                  modifiers = [character];
              }

              // loop through all callbacks for the key that was pressed
              // and see if any of them match
              for (i = 0; i < self._callbacks[character].length; ++i) {
                  callback = self._callbacks[character][i];

                  // if a sequence name is not specified, but this is a sequence at
                  // the wrong level then move onto the next match
                  if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {
                      continue;
                  }

                  // if the action we are looking for doesn't match the action we got
                  // then we should keep going
                  if (action != callback.action) {
                      continue;
                  }

                  // if this is a keypress event and the meta key and control key
                  // are not pressed that means that we need to only look at the
                  // character, otherwise check the modifiers as well
                  //
                  // chrome will not fire a keypress if meta or control is down
                  // safari will fire a keypress if meta or meta+shift is down
                  // firefox will fire a keypress if meta or control is down
                  if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {

                      // when you bind a combination or sequence a second time it
                      // should overwrite the first one.  if a sequenceName or
                      // combination is specified in this call it does just that
                      //
                      // @todo make deleting its own method?
                      var deleteCombo = !sequenceName && callback.combo == combination;
                      var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;
                      if (deleteCombo || deleteSequence) {
                          self._callbacks[character].splice(i, 1);
                      }

                      matches.push(callback);
                  }
              }

              return matches;
          }

          /**
           * actually calls the callback function
           *
           * if your callback function returns false this will use the jquery
           * convention - prevent default and stop propogation on the event
           *
           * @param {Function} callback
           * @param {Event} e
           * @returns void
           */
          function _fireCallback(callback, e, combo, sequence) {

              // if this event should not happen stop here
              if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {
                  return;
              }

              if (callback(e, combo) === false) {
                  _preventDefault(e);
                  _stopPropagation(e);
              }
          }

          /**
           * handles a character key event
           *
           * @param {string} character
           * @param {Array} modifiers
           * @param {Event} e
           * @returns void
           */
          self._handleKey = function(character, modifiers, e) {
              var callbacks = _getMatches(character, modifiers, e);
              var i;
              var doNotReset = {};
              var maxLevel = 0;
              var processedSequenceCallback = false;

              // Calculate the maxLevel for sequences so we can only execute the longest callback sequence
              for (i = 0; i < callbacks.length; ++i) {
                  if (callbacks[i].seq) {
                      maxLevel = Math.max(maxLevel, callbacks[i].level);
                  }
              }

              // loop through matching callbacks for this key event
              for (i = 0; i < callbacks.length; ++i) {

                  // fire for all sequence callbacks
                  // this is because if for example you have multiple sequences
                  // bound such as "g i" and "g t" they both need to fire the
                  // callback for matching g cause otherwise you can only ever
                  // match the first one
                  if (callbacks[i].seq) {

                      // only fire callbacks for the maxLevel to prevent
                      // subsequences from also firing
                      //
                      // for example 'a option b' should not cause 'option b' to fire
                      // even though 'option b' is part of the other sequence
                      //
                      // any sequences that do not match here will be discarded
                      // below by the _resetSequences call
                      if (callbacks[i].level != maxLevel) {
                          continue;
                      }

                      processedSequenceCallback = true;

                      // keep a list of which sequences were matches for later
                      doNotReset[callbacks[i].seq] = 1;
                      _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);
                      continue;
                  }

                  // if there were no sequence matches but we are still here
                  // that means this is a regular match so we should fire that
                  if (!processedSequenceCallback) {
                      _fireCallback(callbacks[i].callback, e, callbacks[i].combo);
                  }
              }

              // if the key you pressed matches the type of sequence without
              // being a modifier (ie "keyup" or "keypress") then we should
              // reset all sequences that were not matched by this event
              //
              // this is so, for example, if you have the sequence "h a t" and you
              // type "h e a r t" it does not match.  in this case the "e" will
              // cause the sequence to reset
              //
              // modifier keys are ignored because you can have a sequence
              // that contains modifiers such as "enter ctrl+space" and in most
              // cases the modifier key will be pressed before the next key
              //
              // also if you have a sequence such as "ctrl+b a" then pressing the
              // "b" key will trigger a "keypress" and a "keydown"
              //
              // the "keydown" is expected when there is a modifier, but the
              // "keypress" ends up matching the _nextExpectedAction since it occurs
              // after and that causes the sequence to reset
              //
              // we ignore keypresses in a sequence that directly follow a keydown
              // for the same character
              var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;
              if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {
                  _resetSequences(doNotReset);
              }

              _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';
          };

          /**
           * handles a keydown event
           *
           * @param {Event} e
           * @returns void
           */
          function _handleKeyEvent(e) {

              // normalize e.which for key events
              // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
              if (typeof e.which !== 'number') {
                  e.which = e.keyCode;
              }

              var character = _characterFromEvent(e);

              // no character found then stop
              if (!character) {
                  return;
              }

              // need to use === for the character check because the character can be 0
              if (e.type == 'keyup' && _ignoreNextKeyup === character) {
                  _ignoreNextKeyup = false;
                  return;
              }

              self.handleKey(character, _eventModifiers(e), e);
          }

          /**
           * called to set a 1 second timeout on the specified sequence
           *
           * this is so after each key press in the sequence you have 1 second
           * to press the next key before you have to start over
           *
           * @returns void
           */
          function _resetSequenceTimer() {
              clearTimeout(_resetTimer);
              _resetTimer = setTimeout(_resetSequences, 1000);
          }

          /**
           * binds a key sequence to an event
           *
           * @param {string} combo - combo specified in bind call
           * @param {Array} keys
           * @param {Function} callback
           * @param {string=} action
           * @returns void
           */
          function _bindSequence(combo, keys, callback, action) {

              // start off by adding a sequence level record for this combination
              // and setting the level to 0
              _sequenceLevels[combo] = 0;

              /**
               * callback to increase the sequence level for this sequence and reset
               * all other sequences that were active
               *
               * @param {string} nextAction
               * @returns {Function}
               */
              function _increaseSequence(nextAction) {
                  return function() {
                      _nextExpectedAction = nextAction;
                      ++_sequenceLevels[combo];
                      _resetSequenceTimer();
                  };
              }

              /**
               * wraps the specified callback inside of another function in order
               * to reset all sequence counters as soon as this sequence is done
               *
               * @param {Event} e
               * @returns void
               */
              function _callbackAndReset(e) {
                  _fireCallback(callback, e, combo);

                  // we should ignore the next key up if the action is key down
                  // or keypress.  this is so if you finish a sequence and
                  // release the key the final key will not trigger a keyup
                  if (action !== 'keyup') {
                      _ignoreNextKeyup = _characterFromEvent(e);
                  }

                  // weird race condition if a sequence ends with the key
                  // another sequence begins with
                  setTimeout(_resetSequences, 10);
              }

              // loop through keys one at a time and bind the appropriate callback
              // function.  for any key leading up to the final one it should
              // increase the sequence. after the final, it should reset all sequences
              //
              // if an action is specified in the original bind call then that will
              // be used throughout.  otherwise we will pass the action that the
              // next key in the sequence should match.  this allows a sequence
              // to mix and match keypress and keydown events depending on which
              // ones are better suited to the key provided
              for (var i = 0; i < keys.length; ++i) {
                  var isFinal = i + 1 === keys.length;
                  var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);
                  _bindSingle(keys[i], wrappedCallback, action, combo, i);
              }
          }

          /**
           * binds a single keyboard combination
           *
           * @param {string} combination
           * @param {Function} callback
           * @param {string=} action
           * @param {string=} sequenceName - name of sequence if part of sequence
           * @param {number=} level - what part of the sequence the command is
           * @returns void
           */
          function _bindSingle(combination, callback, action, sequenceName, level) {

              // store a direct mapped reference for use with Mousetrap.trigger
              self._directMap[combination + ':' + action] = callback;

              // make sure multiple spaces in a row become a single space
              combination = combination.replace(/\s+/g, ' ');

              var sequence = combination.split(' ');
              var info;

              // if this pattern is a sequence of keys then run through this method
              // to reprocess each pattern one key at a time
              if (sequence.length > 1) {
                  _bindSequence(combination, sequence, callback, action);
                  return;
              }

              info = _getKeyInfo(combination, action);

              // make sure to initialize array if this is the first time
              // a callback is added for this key
              self._callbacks[info.key] = self._callbacks[info.key] || [];

              // remove an existing match if there is one
              _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);

              // add this call back to the array
              // if it is a sequence put it at the beginning
              // if not put it at the end
              //
              // this is important because the way these are processed expects
              // the sequence ones to come first
              self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({
                  callback: callback,
                  modifiers: info.modifiers,
                  action: info.action,
                  seq: sequenceName,
                  level: level,
                  combo: combination
              });
          }

          /**
           * binds multiple combinations to the same callback
           *
           * @param {Array} combinations
           * @param {Function} callback
           * @param {string|undefined} action
           * @returns void
           */
          self._bindMultiple = function(combinations, callback, action) {
              for (var i = 0; i < combinations.length; ++i) {
                  _bindSingle(combinations[i], callback, action);
              }
          };

          // start!
          _addEvent(targetElement, 'keypress', _handleKeyEvent);
          _addEvent(targetElement, 'keydown', _handleKeyEvent);
          _addEvent(targetElement, 'keyup', _handleKeyEvent);
      }

      /**
       * binds an event to mousetrap
       *
       * can be a single key, a combination of keys separated with +,
       * an array of keys, or a sequence of keys separated by spaces
       *
       * be sure to list the modifier keys first to make sure that the
       * correct key ends up getting bound (the last key in the pattern)
       *
       * @param {string|Array} keys
       * @param {Function} callback
       * @param {string=} action - 'keypress', 'keydown', or 'keyup'
       * @returns void
       */
      Mousetrap.prototype.bind = function(keys, callback, action) {
          var self = this;
          keys = keys instanceof Array ? keys : [keys];
          self._bindMultiple.call(self, keys, callback, action);
          return self;
      };

      /**
       * unbinds an event to mousetrap
       *
       * the unbinding sets the callback function of the specified key combo
       * to an empty function and deletes the corresponding key in the
       * _directMap dict.
       *
       * TODO: actually remove this from the _callbacks dictionary instead
       * of binding an empty function
       *
       * the keycombo+action has to be exactly the same as
       * it was defined in the bind method
       *
       * @param {string|Array} keys
       * @param {string} action
       * @returns void
       */
      Mousetrap.prototype.unbind = function(keys, action) {
          var self = this;
          return self.bind.call(self, keys, function() {}, action);
      };

      /**
       * triggers an event that has already been bound
       *
       * @param {string} keys
       * @param {string=} action
       * @returns void
       */
      Mousetrap.prototype.trigger = function(keys, action) {
          var self = this;
          if (self._directMap[keys + ':' + action]) {
              self._directMap[keys + ':' + action]({}, keys);
          }
          return self;
      };

      /**
       * resets the library back to its initial state.  this is useful
       * if you want to clear out the current keyboard shortcuts and bind
       * new ones - for example if you switch to another page
       *
       * @returns void
       */
      Mousetrap.prototype.reset = function() {
          var self = this;
          self._callbacks = {};
          self._directMap = {};
          return self;
      };

      /**
       * should we stop this event before firing off callbacks
       *
       * @param {Event} e
       * @param {Element} element
       * @return {boolean}
       */
      Mousetrap.prototype.stopCallback = function(e, element) {
          var self = this;

          // if the element has the class "mousetrap" then no need to stop
          if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
              return false;
          }

          if (_belongsTo(element, self.target)) {
              return false;
          }

          // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,
          // not the initial event target in the shadow tree. Note that not all events cross the
          // shadow boundary.
          // For shadow trees with `mode: 'open'`, the initial event target is the first element in
          // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event
          // target cannot be obtained.
          if ('composedPath' in e && typeof e.composedPath === 'function') {
              // For open shadow trees, update `element` so that the following check works.
              var initialEventTarget = e.composedPath()[0];
              if (initialEventTarget !== e.target) {
                  element = initialEventTarget;
              }
          }

          // stop for input, select, and textarea
          return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;
      };

      /**
       * exposes _handleKey publicly so it can be overwritten by extensions
       */
      Mousetrap.prototype.handleKey = function() {
          var self = this;
          return self._handleKey.apply(self, arguments);
      };

      /**
       * allow custom key mappings
       */
      Mousetrap.addKeycodes = function(object) {
          for (var key in object) {
              if (object.hasOwnProperty(key)) {
                  _MAP[key] = object[key];
              }
          }
          _REVERSE_MAP = null;
      };

      /**
       * Init the global mousetrap functions
       *
       * This method is needed to allow the global mousetrap functions to work
       * now that mousetrap is a constructor function.
       */
      Mousetrap.init = function() {
          var documentMousetrap = Mousetrap(document);
          for (var method in documentMousetrap) {
              if (method.charAt(0) !== '_') {
                  Mousetrap[method] = (function(method) {
                      return function() {
                          return documentMousetrap[method].apply(documentMousetrap, arguments);
                      };
                  } (method));
              }
          }
      };

      Mousetrap.init();

      // expose mousetrap to the global object
      window.Mousetrap = Mousetrap;

      // expose as a common js module
      if ( module.exports) {
          module.exports = Mousetrap;
      }

      // expose mousetrap as an AMD module
      if (typeof undefined$1 === 'function' && undefined$1.amd) {
          undefined$1(function() {
              return Mousetrap;
          });
      }
  }) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);
  });

  /**
   * Gets the first element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias first
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the first element of `array`.
   * @example
   *
   * _.head([1, 2, 3]);
   * // => 1
   *
   * _.head([]);
   * // => undefined
   */
  function head(array) {
    return (array && array.length) ? array[0] : undefined;
  }

  var head_1 = head;

  var first = head_1;

  /**
   * 获取feature唯一id
   */
  var getUuid = function () {
    var count = 1;
    return function (prefix) {
      return "".concat(prefix, "-").concat(count++);
    };
  }();
  /**
   * 根据id判断两个feature是否为同一feature
   * @param feature1
   * @param feature2
   */
  var isSameFeature = function isSameFeature(feature1, feature2) {
    var _feature1$properties, _feature2$properties;
    return !!(feature1 && feature2 && ((_feature1$properties = feature1.properties) === null || _feature1$properties === void 0 ? void 0 : _feature1$properties.id) === ((_feature2$properties = feature2.properties) === null || _feature2$properties === void 0 ? void 0 : _feature2$properties.id));
  };
  /**
   * 对target数据使用targetHandler，对target以外数据采用otherHandler
   * @param target
   * @param data
   * @param targetHandler
   * @param otherHandler
   */
  var updateTargetFeature = function updateTargetFeature(_ref) {
    var target = _ref.target,
      data = _ref.data,
      targetHandler = _ref.targetHandler,
      otherHandler = _ref.otherHandler;
    return data.map(function (item, index) {
      var _handler;
      var handler = isSameFeature(item, target) ? targetHandler : otherHandler;
      return (_handler = handler === null || handler === void 0 ? void 0 : handler(item, index)) !== null && _handler !== void 0 ? _handler : item;
    });
  };
  var getDefaultPointProperties = function getDefaultPointProperties() {
    return {
      id: getUuid('point'),
      isHover: false,
      isActive: false,
      isDrag: false,
      createTime: Date.now()
    };
  };
  var getDefaultLineProperties = function getDefaultLineProperties() {
    return {
      id: getUuid('line'),
      isHover: false,
      isActive: false,
      isDrag: false,
      isDraw: false,
      createTime: Date.now()
    };
  };
  var getDefaultPolygonProperties = function getDefaultPolygonProperties() {
    return {
      id: getUuid('polygon'),
      isHover: false,
      isActive: false,
      isDrag: false,
      isDraw: false,
      createTime: Date.now()
    };
  };
  // export const getDefaultLinePro
  /**
   * 创建
   * @param position
   * @param properties
   */
  var createPointFeature = function createPointFeature(position) {
    var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return point(position, _objectSpread2(_objectSpread2({}, getDefaultPointProperties()), properties));
  };
  var createLineFeature = function createLineFeature(nodes) {
    var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return {
      type: 'Feature',
      properties: _objectSpread2(_objectSpread2({}, getDefaultLineProperties()), {}, {
        nodes: nodes
      }, properties),
      geometry: {
        type: 'LineString',
        coordinates: coordAll(featureCollection(nodes))
      }
    };
  };
  var createDashLine = function createDashLine(positions) {
    return lineString(positions, {
      id: getUuid('dashLine')
    });
  };
  var createPolygonFeature = function createPolygonFeature(nodes) {
    var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return {
      type: 'Feature',
      properties: _objectSpread2(_objectSpread2({}, getDefaultPolygonProperties()), {}, {
        nodes: nodes
      }, properties),
      geometry: {
        type: 'Polygon',
        coordinates: [coordAll(featureCollection([].concat(_toConsumableArray(nodes), [first(nodes)])))]
      }
    };
  };
  /**
   * 为 feature 加入 bbox 属性
   * @param features
   * @returns
   */
  var injectFeaturesBBox = function injectFeaturesBBox(features) {
    features.forEach(function (feature) {
      feature.bbox = bbox(feature);
    });
    return features;
  };
  /**
   * 在 setData 时调用，将数据中的 Multi 元素拆分成多个单元素，并赋予 multiIndex，以便在 getData 时组装
   * @param features
   * @returns
   */
  var splitMultiFeatures = function splitMultiFeatures(features) {
    return features.map(function (feature, index) {
      if (feature.geometry.type.startsWith('Multi')) {
        var newType = feature.geometry.type.replace('Multi', '');
        return feature.geometry.coordinates.map(function (coordinates) {
          return {
            type: 'Feature',
            properties: _objectSpread2(_objectSpread2({}, feature.properties), {}, {
              multiIndex: index
            }),
            geometry: {
              type: newType,
              coordinates: coordinates
            }
          };
        });
      }
      return feature;
    }).flat();
  };
  /**
   * 在 getData 时调用，将分散的 Multi 数据组装成原始 Multi 结构的 feature
   * @param features
   * @returns
   */
  var joinMultiFeatures = function joinMultiFeatures(features) {
    var newFeatures = [];
    var multiFeatureMap = {};
    features.forEach(function (feature) {
      var _feature$properties;
      var multiIndex = (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.multiIndex;
      if (typeof multiIndex === 'number') {
        var targetMultiFeature = multiFeatureMap[multiIndex];
        if (targetMultiFeature) {
          targetMultiFeature.geometry.coordinates.push(feature.geometry.coordinates);
        } else {
          var newType = "Multi".concat(feature.geometry.type);
          var newMultiFeature = {
            type: 'Feature',
            properties: _objectSpread2({}, feature.properties),
            geometry: {
              type: newType,
              coordinates: [feature.geometry.coordinates]
            }
          };
          multiFeatureMap[multiIndex] = newMultiFeature;
          newFeatures.push(newMultiFeature);
        }
      } else {
        newFeatures.push(feature);
      }
    });
    return newFeatures;
  };

  /**
   * 将数字转四舍五入为目标精度位数的数字
   * @param num
   * @param precision
   * @returns
   */
  var getPrecisionNumber = function getPrecisionNumber(num) {
    var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;
    return Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision);
  };
  /**
   * 获取线段的中心点Feature
   * @param feature
   */
  var getLineCenterPoint = function getLineCenterPoint(feature) {
    var dis = length(feature, {
      units: 'meters'
    });
    return along(feature, dis / 2, {
      units: 'meters'
    });
  };
  /**
   * 返回线段对应的距离文本
   * @param feature
   * @param showTotalDistance
   * @param format
   * @param properties
   */
  var calcDistanceTextsByLine = function calcDistanceTextsByLine(feature, _ref) {
    var showTotalDistance = _ref.showTotalDistance,
      format = _ref.format;
    var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var textList = [];
    if (showTotalDistance) {
      var text = getLineCenterPoint(feature);
      var meters = length(feature, {
        units: 'meters'
      });
      var pointFeatures = coordAll(feature).map(function (item) {
        return point(item);
      });
      text.properties = _objectSpread2({
        id: getUuid('text'),
        isActive: false,
        meters: meters,
        text: format(meters, pointFeatures),
        type: 'totalDistance'
      }, properties);
      textList.push(text);
    } else {
      var coordinates = feature.geometry.coordinates;
      for (var index = 0; index < coordinates.length - 1; index++) {
        var currentPoint = point(coordinates[index]);
        var nextPoint = point(coordinates[index + 1]);
        var _meters = distance(currentPoint, nextPoint, {
          units: 'meters'
        });
        var _text = center(featureCollection([currentPoint, nextPoint]));
        _text.properties = _objectSpread2({
          id: getUuid('text'),
          isActive: false,
          meters: _meters,
          text: format(_meters, [currentPoint, nextPoint]),
          type: 'distance'
        }, properties);
        textList.push(_text);
      }
    }
    return textList;
  };
  /**
   * 根据传入的polygon和options配置获取面积文本Feature
   * @param feature
   * @param options
   * @param properties
   */
  var calcAreaText = function calcAreaText(feature, options) {
    var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var format = options.format;
    var meters = area(feature);
    return centerOfMass(feature, {
      properties: _objectSpread2({
        meters: meters,
        text: format(meters, feature),
        type: 'area',
        isActive: false
      }, properties)
    });
  };

  // @ts-ignore
  var isDev = "development" === 'development';
  /**
   * 获取完全覆盖地图区域的DOM，会根据地图类型返回不同的结果
   * @param scene
   */
  var getMapDom = function getMapDom(scene) {
    var _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _container$querySelec;
    var container = scene.getContainer();
    return (_ref = (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_ref6 = (_container$querySelec = container === null || container === void 0 ? void 0 : container.querySelector('.l7-marker-container')) !== null && _container$querySelec !== void 0 ? _container$querySelec : container === null || container === void 0 ? void 0 : container.querySelector('.BMap_mask')) !== null && _ref6 !== void 0 ? _ref6 : container === null || container === void 0 ? void 0 : container.querySelector('#tdt-L7')) !== null && _ref5 !== void 0 ? _ref5 : scene.getMapCanvasContainer()) !== null && _ref4 !== void 0 ? _ref4 : container === null || container === void 0 ? void 0 : container.querySelector('.l7-scene')) !== null && _ref3 !== void 0 ? _ref3 : container === null || container === void 0 ? void 0 : container.querySelector('.l7-control-container')) !== null && _ref2 !== void 0 ? _ref2 : container === null || container === void 0 ? void 0 : container.querySelector('.l7-marker-container2')) !== null && _ref !== void 0 ? _ref : null;
  };
  /**
   * 磨平L7 Scene 鼠标事件返回的经纬度差异
   * @param e
   */
  var getLngLat = function getLngLat(e) {
    // @ts-ignore
    return e.lngLat || e.lnglat || e.latlng;
  };
  var getPosition = function getPosition(e) {
    var _getLngLat = getLngLat(e),
      lng = _getLngLat.lng,
      lat = _getLngLat.lat;
    return [lng, lat];
  };
  /**
   * 将lnglat转换为position格式
   * @param lng
   * @param lat
   */
  var transLngLat2Position = function transLngLat2Position(_ref7) {
    var lng = _ref7.lng,
      lat = _ref7.lat;
    return [lng, lat];
  };
  /**
   * 找到最小值的下标
   * @param array
   */
  var findMinIndex = function findMinIndex(array) {
    var maxValue = Number.MAX_SAFE_INTEGER;
    var maxIndex = 0;
    var length = array.length;
    for (var index = 0; index < length; index++) {
      if (array[index] < maxValue) {
        maxValue = array[index];
        maxIndex = index;
      }
    }
    return maxIndex;
  };
  var splitByPosition = function splitByPosition(positions, splitPosition) {
    var linePositionsList = [];
    var linePositions = [];
    positions.forEach(function (position) {
      if (!isEqual_1(position, splitPosition)) {
        linePositions.push(position);
      } else if (linePositions.length) {
        linePositionsList.push(linePositions);
        linePositions = [];
      }
    });
    if (linePositions.length) {
      linePositionsList.push(linePositions);
    }
    return linePositionsList;
  };

  var getAdsorbPoint = function getAdsorbPoint(position, features, options, scene) {
    var pointAdsorbPixel = options.pointAdsorbPixel;
    var points = [];
    // 获取 features 中所有的点
    if (features.length) points = features.map(function (feature) {
      var _feature$properties;
      var _ref = (_feature$properties = feature.properties) !== null && _feature$properties !== void 0 ? _feature$properties : {},
        _ref$nodes = _ref.nodes,
        nodes = _ref$nodes === void 0 ? [] : _ref$nodes,
        _ref$isActive = _ref.isActive,
        isActive = _ref$isActive === void 0 ? false : _ref$isActive;
      return isActive ? nodes.filter(function (node) {
        return !isEqual_1(node.geometry.coordinates, position);
      }) : nodes;
    }).flat().filter(function (feature) {
      return feature;
    });
    if (!points.length) {
      points = coordAll(featureCollection(features)).map(function (position) {
        return point(position);
      });
    }
    // 通过计算当前鼠标向外扩展 pixel 的 bbox 快速筛选 points
    points = points.filter(function (point) {
      var pointExpandBBox = getPixelExpandBBox(point, scene, pointAdsorbPixel);
      return isPositionInBBox(position, pointExpandBBox);
    });
    if (!points.length) {
      return null;
    }
    var _position = _slicedToArray(position, 2),
      lng = _position[0],
      lat = _position[1];
    var _scene$lngLatToPixel = scene.lngLatToPixel([lng, lat]),
      mouseX = _scene$lngLatToPixel.x,
      mouseY = _scene$lngLatToPixel.y;
    var squareDistanceList = points.map(function (point) {
      var _point$geometry$coord = _slicedToArray(point.geometry.coordinates, 2),
        lng = _point$geometry$coord[0],
        lat = _point$geometry$coord[1];
      var _scene$lngLatToPixel2 = scene.lngLatToPixel([lng, lat]),
        x = _scene$lngLatToPixel2.x,
        y = _scene$lngLatToPixel2.y;
      return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2);
    });
    var minIndex = findMinIndex(squareDistanceList);
    var minDistance = Math.pow(squareDistanceList[minIndex], 0.5);
    if (minDistance <= pointAdsorbPixel) {
      return points[minIndex].geometry.coordinates;
    } else {
      return null;
    }
  };
  var getAdsorbLine = function getAdsorbLine(position, features, options, scene) {
    var lines = [];
    lines = features.map(function (feature) {
      var _feature$properties2, _feature$properties3;
      var line = (_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.line;
      if (((_feature$properties3 = feature.properties) === null || _feature$properties3 === void 0 ? void 0 : _feature$properties3.isActive) && line) {
        var nodes = line.properties.nodes;
        var positionsList = splitByPosition(nodes.map(function (node) {
          return node.geometry.coordinates;
        }), position).filter(function (positions) {
          return positions.length > 1;
        });
        return positionsList.map(function (positions) {
          return lineString(positions);
        });
      }
      return [line];
    }).flat().filter(function (feature) {
      return feature;
    });
    if (!lines.length) {
      features.forEach(function (feature) {
        var featureType = getType(feature);
        if (/linestring/i.test(featureType)) {
          lines.push(feature);
        }
        if (/polygon/i.test(featureType)) {
          var _lines, _result$features;
          var result = polygonToLine(feature);
          // @ts-ignore
          return (_lines = lines).push.apply(_lines, _toConsumableArray((_result$features = result === null || result === void 0 ? void 0 : result.features) !== null && _result$features !== void 0 ? _result$features : [result]));
        }
      });
    }
    var lineAdsorbPixel = options.lineAdsorbPixel;
    var _position2 = _slicedToArray(position, 2),
      lng = _position2[0],
      lat = _position2[1];
    var _scene$lngLatToPixel3 = scene.lngLatToPixel([lng, lat]),
      mouseX = _scene$lngLatToPixel3.x,
      mouseY = _scene$lngLatToPixel3.y;
    var nearestPointList = lines.filter(function (line) {
      return coordAll(line).length > 1;
    }).map(function (line) {
      return nearestPointOnLine(line, position);
    });
    if (!nearestPointList.length) {
      return null;
    }
    var squareDistanceList = nearestPointList.map(function (point) {
      var _point$geometry$coord2 = _slicedToArray(point.geometry.coordinates, 2),
        lng = _point$geometry$coord2[0],
        lat = _point$geometry$coord2[1];
      var _scene$lngLatToPixel4 = scene.lngLatToPixel([lng, lat]),
        x = _scene$lngLatToPixel4.x,
        y = _scene$lngLatToPixel4.y;
      return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2);
    });
    var minIndex = findMinIndex(squareDistanceList);
    var minDistance = Math.pow(squareDistanceList[minIndex], 0.5);
    if (minDistance <= lineAdsorbPixel) {
      return nearestPointList[minIndex].geometry.coordinates;
    } else {
      return null;
    }
  };
  /**
   * 返回 feature 的 bbox 向外扩展 expandPixel 像素后的新 bbox
   * @param feature
   * @param scene
   * @param expandPixel
   * @returns
   */
  var getPixelExpandBBox = function getPixelExpandBBox(feature, scene, expandPixel) {
    var _feature$bbox;
    var bbox = (_feature$bbox = feature.bbox) !== null && _feature$bbox !== void 0 ? _feature$bbox : injectFeaturesBBox([feature])[0].bbox;
    var _bbox = _slicedToArray(bbox, 4),
      minLng = _bbox[0],
      minLat = _bbox[1],
      maxLng = _bbox[2],
      maxLat = _bbox[3];
    var _scene$lngLatToContai = scene.lngLatToContainer([minLng, minLat]),
      minX = _scene$lngLatToContai.x,
      minY = _scene$lngLatToContai.y;
    var _scene$lngLatToContai2 = scene.lngLatToContainer([maxLng, maxLat]),
      maxX = _scene$lngLatToContai2.x,
      maxY = _scene$lngLatToContai2.y;
    var _scene$containerToLng = scene.containerToLngLat([minX - expandPixel, minY + expandPixel]),
      lng1 = _scene$containerToLng.lng,
      lat1 = _scene$containerToLng.lat;
    var _scene$containerToLng2 = scene.containerToLngLat([maxX + expandPixel, maxY - expandPixel]),
      lng2 = _scene$containerToLng2.lng,
      lat2 = _scene$containerToLng2.lat;
    return [Math.min(lng1, lng2), Math.min(lat1, lat2), Math.max(lng1, lng2), Math.max(lat1, lat2)];
  };
  /**
   * 判断 position 是否在 bbox 内
   * @param position
   * @param bbox
   * @returns
   */
  var isPositionInBBox = function isPositionInBBox(position, bbox) {
    var _bbox2 = _slicedToArray(bbox, 4),
      minLng = _bbox2[0],
      minLat = _bbox2[1],
      maxLng = _bbox2[2],
      maxLat = _bbox2[3];
    var _position3 = _slicedToArray(position, 2),
      lng = _position3[0],
      lat = _position3[1];
    return lng >= minLng && lng <= maxLng && lat >= minLat && lat <= maxLat;
  };
  /**
   * 获取当前数据对应的吸附点、线数组
   * @param adsorbDataConfig
   * @param draw
   * @param position
   */
  var getAdsorbPosition = function getAdsorbPosition(_ref2) {
    var adsorbOptions = _ref2.adsorbOptions,
      draw = _ref2.draw,
      position = _ref2.position,
      scene = _ref2.scene;
    var adsorbData = adsorbOptions.data,
      pointAdsorbPixel = adsorbOptions.pointAdsorbPixel,
      lineAdsorbPixel = adsorbOptions.lineAdsorbPixel;
    var features = [];
    if (adsorbData === 'allDrawData') {
      features = BaseMode.instances.map(function (draw) {
        return draw.getData(true);
      }).flat();
    } else if (adsorbData === 'drawData') {
      features = draw.getData(true);
    } else if (adsorbData instanceof Function) {
      features = adsorbData(position);
    } else {
      features = adsorbData;
    }
    // 通过 bbox 筛选出在吸附范围的 features
    features = features.filter(function (feature) {
      var _feature$properties4;
      if ((_feature$properties4 = feature.properties) === null || _feature$properties4 === void 0 ? void 0 : _feature$properties4.isActive) {
        return true;
      }
      var pointExpandBBox = getPixelExpandBBox(feature, scene, pointAdsorbPixel);
      if (isPositionInBBox(position, pointExpandBBox)) {
        return true;
      }
      var lineExpandBBox = getPixelExpandBBox(feature, scene, lineAdsorbPixel);
      if (isPositionInBBox(position, lineExpandBBox)) {
        return true;
      }
      return false;
    });
    if (adsorbOptions.pointAdsorbPixel > 0) {
      // 获取 features 中距离最近的点
      var adsorbPointPosition = getAdsorbPoint(position, features, adsorbOptions, scene);
      if (adsorbPointPosition) {
        return adsorbPointPosition;
      }
    }
    if (adsorbOptions.lineAdsorbPixel > 0) {
      var adsorbLinePosition = getAdsorbLine(position, features, adsorbOptions, scene);
      if (adsorbLinePosition) {
        return adsorbLinePosition;
      }
    }
    return position;
  };

  var resetEventLngLat = function resetEventLngLat(e, position) {
    var _position = _slicedToArray(position, 2),
      lng = _position[0],
      lat = _position[1];
    if (e.lngLat) {
      e.lngLat = {
        lng: lng,
        lat: lat
      };
    }
    // @ts-ignore
    if (e.lnglat) {
      // @ts-ignore
      e.lnglat = {
        lng: lng,
        lat: lat
      };
    }
  };

  /**
   * 获取单个颜色的 style 供 draw 实例使用
   * @param color
   * @returns
   */
  function getSingleColorStyle(color) {
    return {
      point: {
        normal: {
          color: color
        },
        hover: {
          color: color
        },
        active: {
          color: color
        }
      },
      line: {
        normal: {
          color: color
        },
        hover: {
          color: color
        },
        active: {
          color: color
        }
      },
      polygon: {
        normal: {
          color: color
        },
        hover: {
          color: color
        },
        active: {
          color: color
        },
        style: {
          // @ts-ignore
          opacity: 0.2
        }
      },
      text: {
        normal: {
          color: color
        },
        active: {
          color: color
        }
      },
      midPoint: {
        normal: {
          color: color
        }
      },
      dashLine: {
        normal: {
          color: color
        }
      }
    };
  }

  var Cursor = /*#__PURE__*/function () {
    function Cursor(scene, options) {
      _classCallCheck(this, Cursor);
      this.container = void 0;
      this.cursor = null;
      this.options = void 0;
      this.container = getMapDom(scene);
      this.options = options;
    }
    return _createClass(Cursor, [{
      key: "setCursor",
      value: function setCursor(cursor) {
        if (cursor !== this.cursor && this.container) {
          this.container.style.cursor = cursor ? this.options[cursor] : '';
          this.cursor = cursor;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.setCursor(null);
      }
    }]);
  }();

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (!css || typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = ".tippy-box[data-animation=fade][data-state=hidden]{opacity:0}[data-tippy-root]{max-width:calc(100vw - 10px)}.tippy-box{position:relative;background-color:#333;color:#fff;border-radius:4px;font-size:14px;line-height:1.4;white-space:normal;outline:0;transition-property:transform,visibility,opacity}.tippy-box[data-placement^=top]>.tippy-arrow{bottom:0}.tippy-box[data-placement^=top]>.tippy-arrow:before{bottom:-7px;left:0;border-width:8px 8px 0;border-top-color:initial;transform-origin:center top}.tippy-box[data-placement^=bottom]>.tippy-arrow{top:0}.tippy-box[data-placement^=bottom]>.tippy-arrow:before{top:-7px;left:0;border-width:0 8px 8px;border-bottom-color:initial;transform-origin:center bottom}.tippy-box[data-placement^=left]>.tippy-arrow{right:0}.tippy-box[data-placement^=left]>.tippy-arrow:before{border-width:8px 0 8px 8px;border-left-color:initial;right:-7px;transform-origin:center left}.tippy-box[data-placement^=right]>.tippy-arrow{left:0}.tippy-box[data-placement^=right]>.tippy-arrow:before{left:-7px;border-width:8px 8px 8px 0;border-right-color:initial;transform-origin:center right}.tippy-box[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-arrow{width:16px;height:16px;color:#333}.tippy-arrow:before{content:\"\";position:absolute;border-color:transparent;border-style:solid}.tippy-content{position:relative;padding:5px 9px;z-index:1}";
  styleInject(css_248z);

  var css_248z$1 = ".tippy-box[data-theme~=light]{color:#26323d;box-shadow:0 0 20px 4px rgba(154,161,177,.15),0 4px 80px -8px rgba(36,40,47,.25),0 4px 4px -2px rgba(91,94,105,.15);background-color:#fff}.tippy-box[data-theme~=light][data-placement^=top]>.tippy-arrow:before{border-top-color:#fff}.tippy-box[data-theme~=light][data-placement^=bottom]>.tippy-arrow:before{border-bottom-color:#fff}.tippy-box[data-theme~=light][data-placement^=left]>.tippy-arrow:before{border-left-color:#fff}.tippy-box[data-theme~=light][data-placement^=right]>.tippy-arrow:before{border-right-color:#fff}.tippy-box[data-theme~=light]>.tippy-backdrop{background-color:#fff}.tippy-box[data-theme~=light]>.tippy-svg-arrow{fill:#fff}";
  styleInject(css_248z$1);

  var Popup = /*#__PURE__*/function () {
    function Popup(scene, tippyProps) {
      var _this = this;
      _classCallCheck(this, Popup);
      this.content = '';
      this.tippy = void 0;
      this.scene = void 0;
      this.isMouseInner = false;
      this.onMouseMove = function () {
        _this.isMouseInner = true;
        _this.checkTippyShow();
      };
      this.onMouseOut = function () {
        _this.isMouseInner = false;
        _this.checkTippyShow();
      };
      this.setContent = debounce_1(function (content) {
        var _this$tippy;
        _this.content = content !== null && content !== void 0 ? content : '';
        (_this$tippy = _this.tippy) === null || _this$tippy === void 0 ? void 0 : _this$tippy.setContent(content !== null && content !== void 0 ? content : '');
        _this.checkTippyShow();
      }, 16, {
        maxWait: 16
      });
      var container = getMapDom(scene);
      this.scene = scene;
      if (container) {
        this.tippy = tippy(getMapDom(scene), _objectSpread2(_objectSpread2({}, DEFAULT_POPUP_CONFIG), tippyProps));
        this.tippy.hide();
        scene.on(exports.SceneEvent.Mousemove, this.onMouseMove);
        scene.on(exports.SceneEvent.Mouseout, this.onMouseOut);
      }
    }
    return _createClass(Popup, [{
      key: "getContent",
      value: function getContent() {
        return this.content;
      }
    }, {
      key: "checkTippyShow",
      value: function checkTippyShow() {
        if (this.content && this.isMouseInner) {
          var _this$tippy2;
          (_this$tippy2 = this.tippy) === null || _this$tippy2 === void 0 ? void 0 : _this$tippy2.show();
        } else {
          var _this$tippy3;
          (_this$tippy3 = this.tippy) === null || _this$tippy3 === void 0 ? void 0 : _this$tippy3.hide();
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _this$tippy4;
        this.scene.off(exports.SceneEvent.Mousemove, this.onMouseMove);
        this.scene.off(exports.SceneEvent.Mouseout, this.onMouseOut);
        (_this$tippy4 = this.tippy) === null || _this$tippy4 === void 0 ? void 0 : _this$tippy4.destroy();
      }
    }]);
  }();

  var History = /*#__PURE__*/function () {
    function History(_ref) {
      var config = _ref.config;
      _classCallCheck(this, History);
      /**
       * 保存历史数组的队列，越新的数据越靠前
       * @protected
       */
      this.historyList = [];
      /**
       * 当前回退/重做操作后对应的index下标，回退对应index++，重做对应index--
       * @protected
       */
      this.historyIndex = 0;
      /**
       * 配置
       * @protected
       */
      this.config = void 0;
      this.config = config;
    }
    return _createClass(History, [{
      key: "save",
      value: function save(data) {
        if (!this.config) {
          return;
        }
        var maxSize = this.config.maxSize;
        if (this.historyIndex) {
          this.historyList = this.historyList.slice(this.historyIndex);
          this.historyIndex = 0;
        }
        if (this.historyList.length >= maxSize) {
          this.historyList.pop();
        }
        var cloneData = cloneDeep_1(data);
        this.historyList.unshift(cloneData);
        return cloneData;
      }
    }, {
      key: "revert",
      value: function revert() {
        if (!this.historyList.length || this.historyIndex >= this.historyList.length - 1) {
          return;
        }
        var previousData = this.historyList[++this.historyIndex];
        if (previousData) {
          return cloneDeep_1(previousData);
        }
      }
    }, {
      key: "redo",
      value: function redo() {
        if (!this.historyList.length || this.historyIndex <= 0) {
          return;
        }
        var nextData = this.historyList[--this.historyIndex];
        if (nextData) {
          return cloneDeep_1(nextData);
        }
      }
    }]);
  }();

  var Source = /*#__PURE__*/function (_EventEmitter) {
    function Source(_ref) {
      var _this;
      var data = _ref.data,
        render = _ref.render,
        historyConfig = _ref.history,
        scene = _ref.scene,
        bbox = _ref.bbox;
      _classCallCheck(this, Source);
      _this = _callSuper(this, Source);
      _this.scene = void 0;
      /**
       * 用于存储渲染器render映射
       * @protected
       */
      _this.render = void 0;
      /**
       * 用于存储当前最新数据
       * @protected
       */
      _this.data = cloneDeep_1(DEFAULT_SOURCE_DATA);
      /**
       * 存储当前延迟更新函数的timeout
       * @protected
       */
      _this.timeout = null;
      /**
       * 用于需要待更新的renderType以及对应的最新数据
       * @protected
       */
      _this.diffData = {};
      _this.enableBBox = void 0;
      _this.featureType = void 0;
      /**
       *
       * @protected
       */
      _this.history = void 0;
      _this.scene = scene;
      _this.render = render;
      if (historyConfig) {
        _this.history = new History({
          config: historyConfig
        });
      }
      if (data) {
        _this.setData(data);
      }
      _this.featureType = function () {
        if (render.polygon) {
          return 'polygon';
        }
        if (render.line) {
          return 'line';
        }
        return 'point';
      }();
      _this.enableBBox = bbox;
      return _this;
    }
    _inherits(Source, _EventEmitter);
    return _createClass(Source, [{
      key: "saveHistory",
      value: function saveHistory() {
        var _this$history;
        return (_this$history = this.history) === null || _this$history === void 0 ? void 0 : _this$history.save(this.data);
      }
    }, {
      key: "revertHistory",
      value: function revertHistory() {
        var _this$history2;
        var data = (_this$history2 = this.history) === null || _this$history2 === void 0 ? void 0 : _this$history2.revert();
        if (data) {
          this.setData(data);
          return data;
        }
      }
    }, {
      key: "redoHistory",
      value: function redoHistory() {
        var _this$history3;
        var data = (_this$history3 = this.history) === null || _this$history3 === void 0 ? void 0 : _this$history3.redo();
        if (data) {
          this.setData(data);
          return data;
        }
      }
      /**
       * 更新数据的方法，新的数据会累积延迟更新
       * @param data
       */
    }, {
      key: "setData",
      value: function setData(data) {
        var _this2 = this;
        if (Object.keys(data).length) {
          var _data$this$featureTyp;
          if (this.enableBBox && ((_data$this$featureTyp = data[this.featureType]) === null || _data$this$featureTyp === void 0 ? void 0 : _data$this$featureTyp.length)) {
            // @ts-ignore
            data[this.featureType] = injectFeaturesBBox(data[this.featureType]);
          }
          this.data = _objectSpread2(_objectSpread2({}, this.data), data);
          this.diffData = _objectSpread2(_objectSpread2({}, this.diffData), data);
          if (!this.timeout) {
            this.timeout = requestAnimationFrame(function () {
              return _this2.updateDiffData();
            });
          }
          this.emit(exports.SourceEvent.Change, {
            data: this.data
          });
        }
        return this.data;
      }
      /**
       * 获取全量source数据
       */
    }, {
      key: "getData",
      value: function getData() {
        return this.data;
      }
      /**
       * 获取单项source数据
       * @param renderType
       */
    }, {
      key: "getRenderData",
      value: function getRenderData(renderType) {
        return this.data[renderType];
      }
      /**
       * 设置单项
       * @param renderType
       * @param updater
       */
    }, {
      key: "setRenderData",
      value: function setRenderData(renderType, updater) {
        var data = typeof updater === 'function' ? updater(this.getRenderData(renderType)) : updater;
        this.setData(_defineProperty({}, renderType, data));
        this.emit(exports.SourceEvent.Change, this.data);
        return data;
      }
      /**
       * 根据当前diffData中积累的数据更新对应render
       */
    }, {
      key: "updateDiffData",
      value: function updateDiffData() {
        var _this3 = this;
        var renderTypes = Object.entries(this.diffData);
        if (renderTypes.length) {
          renderTypes.forEach(function (_ref2) {
            var _ref3 = _slicedToArray(_ref2, 2),
              renderType = _ref3[0],
              renderData = _ref3[1];
            if (Array.isArray(renderData)) {
              var _this3$getRender;
              (_this3$getRender = _this3.getRender(renderType)) === null || _this3$getRender === void 0 ? void 0 : _this3$getRender.setData(renderData);
            }
          });
          this.emit(exports.SourceEvent.Update, this.data, this.diffData);
          this.diffData = {};
          this.timeout = null;
          requestAnimationFrame(function () {
            _this3.scene.render();
          });
        }
      }
      /**
       * 获取对应renderType类型的render实例，如果没有获取到则代表
       * @param type
       */
    }, {
      key: "getRender",
      value: function getRender(type) {
        return this.render[type];
      }
      /**
       * 清空所有数据
       */
    }, {
      key: "clear",
      value: function clear() {
        this.setData(fromPairs_1(Object.keys(this.render).map(function (renderType) {
          return [renderType, []];
        })));
      }
    }]);
  }(eventemitter3);

  var BaseMode = /*#__PURE__*/function (_EventEmitter) {
    function BaseMode(scene, options) {
      var _this$options$bbox;
      var _this;
      _classCallCheck(this, BaseMode);
      _this = _callSuper(this, BaseMode);
      /**
       * L7 场景实例，在构造器中传入
       */
      _this.scene = void 0;
      /**
       * 数据管理中心
       */
      _this.source = void 0;
      /**
       * 渲染器render对象
       */
      _this.render = void 0;
      /**
       * 指针管理器
       * @protected
       */
      _this.cursor = void 0;
      /**
       * Drawer 配置
       */
      _this.options = void 0;
      /**
       * 当前Drawer是否为开启绘制状态
       */
      _this.enabled = false;
      // 在 enable 时传入，用于判断当前是否支持添加操作
      _this.allowCreate = false;
      /**
       * scene相关事件管理
       * @protected
       */
      _this.sceneRender = void 0;
      /**
       * 光标在地图上的经纬度位置
       * @protected
       */
      _this.mouseLngLat = {
        lng: 0,
        lat: 0
      };
      _this.popup = void 0;
      /**
       * 本次enable添加的绘制物个数
       * @protected
       */
      _this.addCount = 0;
      // 用于收集当前鼠标所在经纬度的回调函数，用于在数据回退时，若有存在绘制中的数据，伪造mousemove事件时使用
      _this.saveMouseLngLat = debounce_1(function (e) {
        _this.mouseLngLat = getLngLat(e);
      }, 100, {
        maxWait: 100
      });
      /**
       * 保存当前数据备份
       */
      _this.saveHistory = debounce_1(function () {
        if (!_this.options.history) {
          return;
        }
        _this.source.saveHistory();
      }, 100);
      _this.bindThis();
      _this.scene = scene;
      _this.sceneRender = new SceneRender(scene);
      _this.options = merge_1({}, _this.getDefaultOptions(options), options);
      _this.render = _this.initRender();
      _this.source = new Source({
        render: _this.render,
        history: _this.options.history || undefined,
        scene: scene,
        bbox: (_this$options$bbox = _this.options.bbox) !== null && _this$options$bbox !== void 0 ? _this$options$bbox : false
      });
      _this.cursor = new Cursor(scene, _this.options.cursor);
      var _this$options = _this.options,
        initialData = _this$options.initialData,
        popup = _this$options.popup;
      if (initialData) {
        _this.setData(initialData);
      }
      if (popup) {
        _this.popup = new Popup(scene, popup instanceof Object ? popup : {});
      }
      _this.saveHistory();
      _this.bindCommonEvent();
      _this.emit(exports.DrawEvent.Init, _this);
      _this.bindEnableEvent();
      BaseMode.instances.push(_this);
      return _this;
    }
    /**
     * 获取当前options配置的方法
     */
    _inherits(BaseMode, _EventEmitter);
    return _createClass(BaseMode, [{
      key: "addable",
      get:
      /**
       * 当期是否可以添加新的绘制物
       */
      function get() {
        var data = this.getData();
        var _this$options2 = this.options,
          multiple = _this$options2.multiple,
          maxCount = _this$options2.maxCount;
        var drawItem = data.find(function (item) {
          var _item$properties;
          return (_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.isDraw;
        });
        if (!this.enabled || !this.allowCreate) {
          return false;
        }
        if (multiple && maxCount <= 0 || drawItem) {
          return true;
        }
        if (!multiple && this.addCount >= 1) {
          return false;
        }
        if (maxCount > 0 && data.length >= maxCount) {
          return false;
        }
        return true;
      }
    }, {
      key: "getOptions",
      value: function getOptions() {
        return this.options;
      }
      /**
       * 获取当前激活的绘制项
       */
    }, {
      key: "getEditItem",
      value: function getEditItem() {
        return this.editItem;
      }
      /**
       * 获取当前正在被拖拽的绘制项
       */
    }, {
      key: "getDragItem",
      value: function getDragItem() {
        return this.dragItem;
      }
    }, {
      key: "setHelper",
      value: function setHelper(type) {
        var _ref, _this$popup;
        var helper = this.options.helper;
        if (!helper) {
          return;
        }
        // @ts-ignore
        var content = (_ref = type in helper ? helper[type] : type) !== null && _ref !== void 0 ? _ref : null;
        (_this$popup = this.popup) === null || _this$popup === void 0 ? void 0 : _this$popup.setContent(content);
      }
      /**
       * 获取当前是否为编辑态
       */
    }, {
      key: "isEnable",
      value: function isEnable() {
        return this.enabled;
      }
      /**
       * 绑定回调函数的this指向
       */
    }, {
      key: "bindThis",
      value: function bindThis() {
        this.initRender = this.initRender.bind(this);
        this.getData = this.getData.bind(this);
        this.setData = this.setData.bind(this);
        this.emitChangeEvent = this.emitChangeEvent.bind(this);
        this.saveHistory = this.saveHistory.bind(this);
        this.onSceneMouseMove = this.onSceneMouseMove.bind(this);
        this.revertHistory = this.revertHistory.bind(this);
        this.redoHistory = this.redoHistory.bind(this);
        this.removeActiveFeature = this.removeActiveFeature.bind(this);
        this.bindCommonEvent = this.bindCommonEvent.bind(this);
        this.bindEnableEvent = this.bindEnableEvent.bind(this);
        this.unbindEnableEvent = this.unbindEnableEvent.bind(this);
        this.setActiveFeature = this.setActiveFeature.bind(this);
      }
    }, {
      key: "bindCommonEvent",
      value: function bindCommonEvent() {
        var _this2 = this;
        this.on(exports.DrawEvent.Add, this.emitChangeEvent);
        this.on(exports.DrawEvent.Add, function () {
          _this2.addCount++;
        });
        this.on(exports.DrawEvent.Edit, this.emitChangeEvent);
        this.on(exports.DrawEvent.Remove, this.emitChangeEvent);
        this.on(exports.DrawEvent.Clear, this.emitChangeEvent);
        this.on(exports.DrawEvent.AddNode, this.saveHistory);
        this.on(exports.DrawEvent.RemoveNode, this.emitChangeEvent);
        this.bindEmitSelectEvent(true);
      }
      /**
       * 绑定判断 select 事件方法
       * @param emit
       */
    }, {
      key: "bindEmitSelectEvent",
      value: function bindEmitSelectEvent() {
        var _this3 = this;
        var emit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var previousSelectFeature = null;
        var onSourceChange = function onSourceChange() {
          var _previousSelectFeatur, _previousSelectFeatur2, _newSelectFeature$pro;
          var newSelectFeature = _this3.getData(true).find(function (feature) {
            var _feature$properties;
            return (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.isActive;
          }) || null;
          if (((_previousSelectFeatur = previousSelectFeature) === null || _previousSelectFeatur === void 0 ? void 0 : (_previousSelectFeatur2 = _previousSelectFeatur.properties) === null || _previousSelectFeatur2 === void 0 ? void 0 : _previousSelectFeatur2.id) !== (newSelectFeature === null || newSelectFeature === void 0 ? void 0 : (_newSelectFeature$pro = newSelectFeature.properties) === null || _newSelectFeature$pro === void 0 ? void 0 : _newSelectFeature$pro.id)) {
            // @ts-ignore
            previousSelectFeature = newSelectFeature;
            _this3.emit(exports.DrawEvent.Select, newSelectFeature);
          }
        };
        this.source.on(exports.SourceEvent.Change, onSourceChange);
        if (emit) {
          onSourceChange();
        }
      }
      /**
       * 监听通用事件
       */
    }, {
      key: "bindEnableEvent",
      value: function bindEnableEvent() {
        this.unbindKeyboardEvent();
        this.scene.setMapStatus({
          doubleClickZoom: false
        });
        this.scene.on(exports.SceneEvent.Mousemove, this.saveMouseLngLat);
        this.bindKeyboardEvent();
      }
      /**
       * 监听通用事件
       */
    }, {
      key: "unbindEnableEvent",
      value: function unbindEnableEvent() {
        this.scene.setMapStatus({
          doubleClickZoom: true
        });
        this.scene.off(exports.SceneEvent.Mousemove, this.saveMouseLngLat);
        this.unbindKeyboardEvent();
      }
      // 快捷键绑定
    }, {
      key: "bindKeyboardEvent",
      value: function bindKeyboardEvent() {
        var _this4 = this;
        var _ref2 = this.options.keyboard || {},
          revert = _ref2.revert,
          redo = _ref2.redo,
          remove = _ref2.remove;
        remove && mousetrap.bind(remove, function () {
          _this4.removeActiveFeature();
        });
        if (this.options.history) {
          revert && mousetrap.bind(revert, this.revertHistory);
          redo && mousetrap.bind(redo, this.redoHistory);
        }
      }
      // 快捷键解绑
    }, {
      key: "unbindKeyboardEvent",
      value: function unbindKeyboardEvent() {
        var _ref3 = this.options.keyboard || {},
          revert = _ref3.revert,
          redo = _ref3.redo,
          remove = _ref3.remove;
        remove && mousetrap.unbind(remove);
        if (this.options.history) {
          revert && mousetrap.unbind(revert);
          redo && mousetrap.unbind(redo);
        }
      }
    }, {
      key: "emitChangeEvent",
      value:
      /**
       * 触发change事件，同时触发保存数据备份
       */
      function emitChangeEvent() {
        this.emit(exports.DrawEvent.Change, this.getData());
        this.saveHistory();
      }
    }, {
      key: "revertHistory",
      value:
      /**
       * 回退至上一次数据备份
       */
      function revertHistory() {
        if (!this.enabled || !this.options.history) {
          return;
        }
        if (this.source.revertHistory()) {
          this.correctDrawItem();
          this.emit(exports.DrawEvent.Change, this.getData());
        }
      }
      /**
       * 重做回退之前的数据备份
       */
    }, {
      key: "redoHistory",
      value: function redoHistory() {
        if (!this.enabled || !this.options.history) {
          return;
        }
        if (this.source.redoHistory()) {
          this.correctDrawItem();
          this.emit(exports.DrawEvent.Change, this.getData());
        }
      }
      /**
       * 获取 renderType 与对应 L7图层的键值对
       */
    }, {
      key: "getRenderLayers",
      value: function getRenderLayers() {
        return fromPairs_1(toPairs_1(this.render).map(function (_ref4) {
          var _ref5 = _slicedToArray(_ref4, 2),
            renderType = _ref5[0],
            render = _ref5[1];
          return [renderType, render.getLayers()];
        }));
      }
      // 传入 Feature 或者 id 获取当前数据中的目标 Feature
    }, {
      key: "getTargetFeature",
      value: function getTargetFeature(target) {
        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getData(true);
        var targetFeature = null;
        if (target) {
          var _data$find;
          targetFeature = (_data$find = data.find(function (feature) {
            var _feature$properties2, _target$properties;
            return ((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.id) === (typeof target === 'string' ? target : (_target$properties = target.properties) === null || _target$properties === void 0 ? void 0 : _target$properties.id);
          })) !== null && _data$find !== void 0 ? _data$find : null;
          if (!targetFeature && target instanceof Object) {
            var _data$find2;
            targetFeature = (_data$find2 = data.find(function (feature) {
              return isEqual_1(target.geometry, feature.geometry);
            })) !== null && _data$find2 !== void 0 ? _data$find2 : null;
          }
        }
        return targetFeature;
      }
      /**
       * 删除当前active的绘制物
       */
    }, {
      key: "removeActiveFeature",
      value: function removeActiveFeature() {
        var activeItem = this.getData(true).find(function (item) {
          var _item$properties2;
          var _ref6 = (_item$properties2 = item.properties) !== null && _item$properties2 !== void 0 ? _item$properties2 : {},
            isActive = _ref6.isActive,
            isDraw = _ref6.isDraw;
          return isActive || isDraw;
        });
        if (activeItem) {
          this.removeFeature(activeItem);
        }
        return activeItem;
      }
      /**
       * 删除指定
       * @param target
       */
    }, {
      key: "removeFeature",
      value: function removeFeature(target) {
        var data = this.getData(true);
        var targetFeature = this.getTargetFeature(target);
        if (targetFeature) {
          this.setData(
          // @ts-ignore
          data.filter(function (feature) {
            return !isSameFeature(targetFeature, feature);
          }));
          this.emit(exports.DrawEvent.Remove, target, this.getData());
        }
      }
      /**
       * 矫正正在绘制Feature的虚线部分（Drawer中都是在onSceneMouseMove中进行绘制）
       */
    }, {
      key: "correctDrawItem",
      value: function correctDrawItem() {
        var drawItem = this.getData(true).find(function (item) {
          var _item$properties3;
          return (_item$properties3 = item.properties) === null || _item$properties3 === void 0 ? void 0 : _item$properties3.isDraw;
        });
        // 如果当前有正在绘制的元素，需要将虚线部分与鼠标位置表现一致，而非history保存时的虚线位置
        if (drawItem) {
          this.onSceneMouseMove({
            type: 'mousemove',
            lnglat: this.mouseLngLat,
            lngLat: this.mouseLngLat
          });
        }
      }
      /**
       * 根据子类实现的 getRenderTypes 方法，初始化对应的Render实例。
       */
    }, {
      key: "initRender",
      value: function initRender() {
        var renderMap = {};
        var renderTypeList = this.getRenderTypes();
        var _iterator = _createForOfIteratorHelper(renderTypeList),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var renderType = _step.value;
            var Render = RENDER_MAP[renderType];
            var style = this.options.style[renderType];
            // @ts-ignore
            renderMap[renderType] = new Render(this.scene, {
              // @ts-ignore
              style: style
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        return renderMap;
      }
      /**
       * 根据用户传入的options返回通用的options默认配置
       * @param options
       */
    }, {
      key: "getCommonOptions",
      value: function getCommonOptions(options) {
        return {
          initialData: [],
          autoActive: true,
          cursor: cloneDeep_1(DEFAULT_CURSOR_MAP),
          editable: true,
          style: cloneDeep_1(DEFAULT_STYLE),
          multiple: true,
          history: cloneDeep_1(DEFAULT_HISTORY_CONFIG),
          keyboard: cloneDeep_1(DEFAULT_KEYBOARD_CONFIG),
          popup: true,
          helper: {},
          maxCount: -1
        };
      }
      /**
       * 设置地图上光标样式类型
       * @param cursor
       */
    }, {
      key: "setCursor",
      value: function setCursor(cursor) {
        this.cursor.setCursor(cursor);
      }
      /**
       * 重置光标到常规状态
       */
    }, {
      key: "resetCursor",
      value: function resetCursor() {
        this.setCursor(this.addable ? 'draw' : null);
      }
      /**
       * 启用 Drawer
       * @param allowCreate 是否支持添加操作
       */
    }, {
      key: "enable",
      value: function enable() {
        var _this5 = this;
        var allowCreate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this.allowCreate = allowCreate;
        this.addCount = 0;
        this.enabled = true;
        this.bindEnableEvent();
        this.resetCursor();
        this.setHelper(this.addable ? 'draw' : null);
        setTimeout(function () {
          _this5.emit(exports.DrawEvent.Enable, _this5);
        }, 0);
      }
      /**
       * 禁用Drawer
       */
    }, {
      key: "disable",
      value: function disable() {
        var _this6 = this;
        this.resetFeatures();
        this.enabled = false;
        this.setCursor(null);
        this.unbindEnableEvent();
        this.addCount = 0;
        this.setHelper(null);
        setTimeout(function () {
          _this6.emit(exports.DrawEvent.Disable, _this6);
        }, 0);
      }
      /**
       * 清空所有数据
       */
    }, {
      key: "clear",
      value: function clear() {
        var disable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        this.source.clear();
        this.emit(exports.DrawEvent.Clear, this);
        if (disable) {
          this.disable();
        }
      }
      /**
       * 显示该Drawer下所有图层
       */
    }, {
      key: "show",
      value: function show() {
        return Object.values(this.render).forEach(function (render) {
          render.show();
        });
      }
      /**
       * 隐藏该Drawer下所有图层
       */
    }, {
      key: "hide",
      value: function hide() {
        return Object.values(this.render).forEach(function (render) {
          render.hide();
        });
      }
      /**
       * 销毁当前Drawer
       */
    }, {
      key: "destroy",
      value: function destroy() {
        var _this7 = this,
          _this$popup2;
        Object.values(this.render).forEach(function (render) {
          render.destroy();
        });
        Object.values(exports.RenderEvent).forEach(function (EventName) {
          Object.values(_this7.render).forEach(function (render) {
            render.removeAllListeners(EventName);
          });
          _this7.sceneRender.removeAllListeners(EventName);
        });
        setTimeout(function () {
          Object.values(exports.DrawEvent).forEach(function (EventName) {
            _this7.removeAllListeners(EventName);
          });
        }, 0);
        (_this$popup2 = this.popup) === null || _this$popup2 === void 0 ? void 0 : _this$popup2.destroy();
        this.cursor.destroy();
        this.emit(exports.DrawEvent.Destroy, this);
        var targetIndex = BaseMode.instances.indexOf(this);
        if (targetIndex > -1) {
          BaseMode.instances.splice(targetIndex, 1);
        }
      }
    }]);
  }(eventemitter3);
  BaseMode.instances = [];

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  var last_1 = last;

  var PointMode = /*#__PURE__*/function (_BaseMode) {
    function PointMode() {
      _classCallCheck(this, PointMode);
      return _callSuper(this, PointMode, arguments);
    }
    _inherits(PointMode, _BaseMode);
    return _createClass(PointMode, [{
      key: "pointRender",
      get:
      /**
       * 获取point类型对应的render
       * @protected
       */
      function get() {
        return this.render.point;
      }
      /**
       * 获取正在被拖拽的结点
       * @protected
       */
    }, {
      key: "dragPoint",
      get: function get() {
        return this.getPointData().find(function (feature) {
          return feature.properties.isDrag;
        });
      }
      /**
       * 当前高亮的结点
       * @protected
       */
    }, {
      key: "editPoint",
      get: function get() {
        return this.getPointData().find(function (feature) {
          return feature.properties.isActive;
        });
      }
      /**
       * 当前悬停的结点
       * @protected
       */
    }, {
      key: "hoverPoint",
      get: function get() {
        return this.getPointData().find(function (feature) {
          return feature.properties.isHover;
        });
      }
    }, {
      key: "getDragPoint",
      value: function getDragPoint() {
        return this.dragPoint;
      }
    }, {
      key: "getEditPoint",
      value: function getEditPoint() {
        return this.editPoint;
      }
      /**
       * 获取点数据
       */
    }, {
      key: "getPointData",
      value: function getPointData() {
        return this.source.getRenderData('point');
      }
      /**
       * 设置点数据
       * @param data
       */
    }, {
      key: "setPointData",
      value: function setPointData(data) {
        return this.source.setRenderData('point', data);
      }
      /**
       * 绑定点Render相关事件
       */
    }, {
      key: "bindPointRenderEvent",
      value: function bindPointRenderEvent() {
        var _this$pointRender, _this$pointRender2, _this$pointRender3, _this$pointRender4, _this$pointRender5, _this$pointRender6;
        (_this$pointRender = this.pointRender) === null || _this$pointRender === void 0 ? void 0 : _this$pointRender.on(exports.RenderEvent.UnClick, this.onPointCreate.bind(this));
        (_this$pointRender2 = this.pointRender) === null || _this$pointRender2 === void 0 ? void 0 : _this$pointRender2.on(exports.RenderEvent.Mousemove, this.onPointMouseMove.bind(this));
        (_this$pointRender3 = this.pointRender) === null || _this$pointRender3 === void 0 ? void 0 : _this$pointRender3.on(exports.RenderEvent.Mouseout, this.onPointMouseOut.bind(this));
        (_this$pointRender4 = this.pointRender) === null || _this$pointRender4 === void 0 ? void 0 : _this$pointRender4.on(exports.RenderEvent.Dragstart, this.onPointDragStart.bind(this));
        (_this$pointRender5 = this.pointRender) === null || _this$pointRender5 === void 0 ? void 0 : _this$pointRender5.on(exports.RenderEvent.Dragging, this.onPointDragging.bind(this));
        (_this$pointRender6 = this.pointRender) === null || _this$pointRender6 === void 0 ? void 0 : _this$pointRender6.on(exports.RenderEvent.Dragend, this.onPointDragEnd.bind(this));
      }
      /**
       * 创建点Feature
       * @param position
       */
    }, {
      key: "handleCreatePoint",
      value: function handleCreatePoint(position) {
        var _this$options = this.options,
          autoActive = _this$options.autoActive,
          editable = _this$options.editable;
        var newFeature = createPointFeature(position);
        this.setPointData(function (oldData) {
          return updateTargetFeature({
            target: newFeature,
            data: [].concat(_toConsumableArray(oldData), [newFeature]),
            targetHandler: function targetHandler(item) {
              item.properties = _objectSpread2(_objectSpread2({}, item.properties), {}, {
                isHover: editable,
                isActive: autoActive && editable
              });
            },
            otherHandler: function otherHandler(item) {
              item.properties = _objectSpread2(_objectSpread2({}, item.properties), {}, {
                isHover: false,
                isActive: false,
                isDrag: false
              });
            }
          });
        });
        return newFeature;
      }
    }, {
      key: "handlePointHover",
      value: function handlePointHover(point) {
        this.setCursor('pointHover');
        if (!isSameFeature(point, this.hoverPoint)) {
          this.setPointData(function (features) {
            return updateTargetFeature({
              target: point,
              data: features,
              targetHandler: function targetHandler(item) {
                item.properties.isHover = true;
              },
              otherHandler: function otherHandler(item) {
                item.properties.isHover = false;
              }
            });
          });
        }
        return point;
      }
    }, {
      key: "handlePointUnHover",
      value: function handlePointUnHover(point) {
        this.resetCursor();
        this.setPointData(function (features) {
          return features.map(function (feature) {
            feature.properties.isHover = false;
            return feature;
          });
        });
        return point;
      }
    }, {
      key: "handlePointDragStart",
      value: function handlePointDragStart(point) {
        this.setPointData(function (features) {
          return updateTargetFeature({
            target: point,
            data: features,
            targetHandler: function targetHandler(item) {
              item.properties = _objectSpread2(_objectSpread2({}, item.properties), {}, {
                isDrag: true,
                isActive: true
              });
            },
            otherHandler: function otherHandler(item) {
              item.properties = _objectSpread2(_objectSpread2({}, item.properties), {}, {
                isDrag: false,
                isActive: false
              });
            }
          });
        });
        this.scene.setMapStatus({
          dragEnable: false
        });
        this.setCursor('pointDrag');
        return point;
      }
    }, {
      key: "handlePointDragging",
      value: function handlePointDragging(point, lngLat) {
        this.setPointData(function (features) {
          return updateTargetFeature({
            target: point,
            data: features,
            targetHandler: function targetHandler(item) {
              item.geometry.coordinates = transLngLat2Position(lngLat);
            }
          });
        });
        this.scene.setMapStatus({
          dragEnable: false
        });
        this.setCursor('pointDrag');
        return point;
      }
    }, {
      key: "handlePointDragEnd",
      value: function handlePointDragEnd(point) {
        this.setPointData(function (features) {
          return updateTargetFeature({
            target: point,
            data: features,
            targetHandler: function targetHandler(item) {
              item.properties.isDrag = false;
            }
          });
        });
        this.scene.setMapStatus({
          dragEnable: true
        });
        this.setCursor('pointHover');
        return point;
      }
      /**
       * 创建点回调
       * @param e
       */
    }, {
      key: "onPointCreate",
      value: function onPointCreate(e) {
        return this.handleCreatePoint(transLngLat2Position(getLngLat(e)));
      }
    }, {
      key: "onPointMouseMove",
      value: function onPointMouseMove(e) {
        return this.handlePointHover(e.feature);
      }
    }, {
      key: "onPointMouseOut",
      value: function onPointMouseOut(e) {
        return this.handlePointUnHover(e.feature);
      }
      /**
       * 开始拖拽点回调
       * @param e
       */
    }, {
      key: "onPointDragStart",
      value: function onPointDragStart(e) {
        if (!this.options.editable) {
          return;
        }
        return this.handlePointDragStart(e.feature);
      }
      /**
       * 拖拽中点回调
       * @param e
       */
    }, {
      key: "onPointDragging",
      value: function onPointDragging(e) {
        var dragPoint = this.dragPoint;
        if (!this.options.editable || !dragPoint) {
          return;
        }
        return this.handlePointDragging(dragPoint, getLngLat(e));
      }
      /**
       * 拖拽结束点回调
       * @param e
       */
    }, {
      key: "onPointDragEnd",
      value: function onPointDragEnd(e) {
        var dragPoint = this.dragPoint;
        if (!this.options.editable || !dragPoint) {
          return;
        }
        return this.handlePointDragEnd(dragPoint);
      }
    }, {
      key: "enablePointRenderAction",
      value: function enablePointRenderAction() {
        var _this$pointRender8;
        var editable = this.options.editable;
        if (this.enabled) {
          var _this$pointRender7;
          (_this$pointRender7 = this.pointRender) === null || _this$pointRender7 === void 0 ? void 0 : _this$pointRender7.enableCreate();
        }
        (_this$pointRender8 = this.pointRender) === null || _this$pointRender8 === void 0 ? void 0 : _this$pointRender8.enableClick();
        if (editable) {
          var _this$pointRender9, _this$pointRender10;
          (_this$pointRender9 = this.pointRender) === null || _this$pointRender9 === void 0 ? void 0 : _this$pointRender9.enableHover();
          (_this$pointRender10 = this.pointRender) === null || _this$pointRender10 === void 0 ? void 0 : _this$pointRender10.enableDrag();
        }
      }
    }, {
      key: "disablePointRenderAction",
      value: function disablePointRenderAction() {
        var _this$pointRender11, _this$pointRender12, _this$pointRender13, _this$pointRender14;
        (_this$pointRender11 = this.pointRender) === null || _this$pointRender11 === void 0 ? void 0 : _this$pointRender11.disableCreate();
        (_this$pointRender12 = this.pointRender) === null || _this$pointRender12 === void 0 ? void 0 : _this$pointRender12.disableHover();
        (_this$pointRender13 = this.pointRender) === null || _this$pointRender13 === void 0 ? void 0 : _this$pointRender13.disableDrag();
        (_this$pointRender14 = this.pointRender) === null || _this$pointRender14 === void 0 ? void 0 : _this$pointRender14.disableClick();
      }
    }]);
  }(BaseMode);

  var MidPointMode = /*#__PURE__*/function (_PointMode) {
    function MidPointMode() {
      _classCallCheck(this, MidPointMode);
      return _callSuper(this, MidPointMode, arguments);
    }
    _inherits(MidPointMode, _PointMode);
    return _createClass(MidPointMode, [{
      key: "midPointRender",
      get:
      /**
       * 获取midPoint类型对应的render
       * @protected
       */
      function get() {
        return this.render.midPoint;
      }
    }, {
      key: "getCommonOptions",
      value: function getCommonOptions(options) {
        // @ts-ignore
        return _objectSpread2(_objectSpread2({}, _get(_getPrototypeOf(MidPointMode.prototype), "getCommonOptions", this).call(this, options)), {}, {
          showMidPoint: true
        });
      }
    }, {
      key: "bindMidPointRenderEvent",
      value: function bindMidPointRenderEvent() {
        var _this$midPointRender, _this$midPointRender2, _this$midPointRender3;
        (_this$midPointRender = this.midPointRender) === null || _this$midPointRender === void 0 ? void 0 : _this$midPointRender.on(exports.RenderEvent.Click, this.onMidPointClick.bind(this));
        (_this$midPointRender2 = this.midPointRender) === null || _this$midPointRender2 === void 0 ? void 0 : _this$midPointRender2.on(exports.RenderEvent.Mousemove, this.onMidPointHover.bind(this));
        (_this$midPointRender3 = this.midPointRender) === null || _this$midPointRender3 === void 0 ? void 0 : _this$midPointRender3.on(exports.RenderEvent.Mouseout, this.onMidPointUnHover.bind(this));
      }
      /**
       * 获取中点数据
       */
    }, {
      key: "getMidPointData",
      value: function getMidPointData() {
        return this.source.getRenderData('midPoint');
      }
      /**
       * 设置中点数据
       * @param data
       */
    }, {
      key: "setMidPointData",
      value: function setMidPointData(data) {
        return this.source.setRenderData('midPoint', data);
      }
      /**
       * 计算并返回传入线段的中点数组
       * @param line
       */
    }, {
      key: "getMidPointsByLine",
      value: function getMidPointsByLine(line) {
        var nodes = line.properties.nodes;
        if (!this.options.showMidPoint || nodes.length < 2) {
          return [];
        }
        var midPoints = [];
        for (var index = 0; index < nodes.length - 1; index++) {
          var _nodes$index$properti, _nodes$index$properti2, _nodes$properties$id, _nodes$properties;
          var newMidPoint = center(featureCollection([nodes[index], nodes[index + 1]]), {
            properties: {
              id: getUuid('midPoint'),
              startId: (_nodes$index$properti = (_nodes$index$properti2 = nodes[index].properties) === null || _nodes$index$properti2 === void 0 ? void 0 : _nodes$index$properti2.id) !== null && _nodes$index$properti !== void 0 ? _nodes$index$properti : '',
              endId: (_nodes$properties$id = (_nodes$properties = nodes[index + 1].properties) === null || _nodes$properties === void 0 ? void 0 : _nodes$properties.id) !== null && _nodes$properties$id !== void 0 ? _nodes$properties$id : ''
            }
          });
          midPoints.push(newMidPoint);
        }
        return midPoints;
      }
    }, {
      key: "onMidPointHover",
      value: function onMidPointHover(e) {
        this.setCursor('pointHover');
      }
    }, {
      key: "onMidPointUnHover",
      value: function onMidPointUnHover(e) {
        this.resetCursor();
      }
    }, {
      key: "enableMidPointRenderAction",
      value: function enableMidPointRenderAction() {
        var _this$midPointRender4, _this$midPointRender5;
        (_this$midPointRender4 = this.midPointRender) === null || _this$midPointRender4 === void 0 ? void 0 : _this$midPointRender4.enableClick();
        (_this$midPointRender5 = this.midPointRender) === null || _this$midPointRender5 === void 0 ? void 0 : _this$midPointRender5.enableHover();
      }
    }, {
      key: "disableMidPointRenderAction",
      value: function disableMidPointRenderAction() {
        var _this$midPointRender6, _this$midPointRender7;
        (_this$midPointRender6 = this.midPointRender) === null || _this$midPointRender6 === void 0 ? void 0 : _this$midPointRender6.disableClick();
        (_this$midPointRender7 = this.midPointRender) === null || _this$midPointRender7 === void 0 ? void 0 : _this$midPointRender7.disableHover();
      }
    }]);
  }(PointMode);

  var LineMode = /*#__PURE__*/function (_MidPointMode) {
    function LineMode() {
      var _this;
      _classCallCheck(this, LineMode);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, LineMode, [].concat(args));
      _this.prevCreateTime = Date.now();
      _this.previousPosition = [0, 0];
      return _this;
    }
    _inherits(LineMode, _MidPointMode);
    return _createClass(LineMode, [{
      key: "isDragTrigger",
      get: function get() {
        return this.options.trigger === 'drag';
      }
    }, {
      key: "isClickTrigger",
      get: function get() {
        return this.options.trigger === 'click';
      }
      /**
       * 当前高亮的结点
       * @protected
       */
    }, {
      key: "editLine",
      get: function get() {
        return this.getLineData().find(function (feature) {
          var _feature$properties = feature.properties,
            isActive = _feature$properties.isActive,
            isDraw = _feature$properties.isDraw;
          return !isDraw && isActive;
        });
      }
      /**
       * 获取line类型对应的render
       * @protected
       */
    }, {
      key: "lineRender",
      get: function get() {
        return this.render.line;
      }
      /**
       * 获取正在被拖拽的线
       * @protected
       */
    }, {
      key: "dragLine",
      get: function get() {
        return this.getLineData().find(function (feature) {
          return feature.properties.isDrag;
        });
      }
      /**
       * 正在绘制的线
       * @protected
       */
    }, {
      key: "drawLine",
      get: function get() {
        return this.getLineData().find(function (feature) {
          return feature.properties.isDraw;
        });
      }
      /**
       * 当前悬停的线
       * @protected
       */
    }, {
      key: "hoverLine",
      get: function get() {
        return this.getLineData().find(function (feature) {
          return feature.properties.isHover;
        });
      }
    }, {
      key: "getDragLine",
      value: function getDragLine() {
        return this.dragLine;
      }
    }, {
      key: "getDrawLine",
      value: function getDrawLine() {
        return this.drawLine;
      }
    }, {
      key: "getEditLine",
      value: function getEditLine() {
        return this.editLine;
      }
    }, {
      key: "getDefaultOptions",
      value: function getDefaultOptions(options) {
        var newOptions = _objectSpread2(_objectSpread2({}, this.getCommonOptions(options)), {}, {
          showMidPoint: true,
          distanceOptions: false,
          helper: cloneDeep_1(DEFAULT_LINE_HELPER_CONFIG),
          dragOptions: cloneDeep_1(DEFAULT_DRAG_OPTIONS)
        });
        if (options.distanceOptions) {
          newOptions.distanceOptions = _objectSpread2(_objectSpread2({}, DEFAULT_DISTANCE_OPTIONS), newOptions.distanceOptions);
        }
        if (options.adsorbOptions) {
          newOptions.adsorbOptions = _objectSpread2(_objectSpread2({}, DEFAULT_ADSORB_CONFIG), newOptions.adsorbOptions);
          // 开启吸附后，默认开启 bbox 加速吸附计算性能
          newOptions.bbox = true;
        }
        if (options.trigger === 'drag') {
          newOptions.autoActive = false;
          newOptions.helper = _objectSpread2(_objectSpread2({}, newOptions.helper), DEFAULT_TRIGGER_DRAG_HELPER_CONFIG);
        }
        return newOptions;
      }
      /**
       * 获取 position 经过吸附作用后的 position，若无吸附效果则返回原始数据
       * @param position
       */
    }, {
      key: "getAdsorbPosition",
      value: function getAdsorbPosition$1(position) {
        var adsorbOptions = this.options.adsorbOptions;
        if (typeof adsorbOptions === 'boolean') {
          return position;
        }
        var scene = this.scene;
        return getAdsorbPosition({
          adsorbOptions: adsorbOptions,
          position: position,
          scene: scene,
          draw: this
        });
      }
    }, {
      key: "bindSceneEvent",
      value: function bindSceneEvent() {
        this.sceneRender.on(exports.RenderEvent.Mousemove, this.onSceneMouseMove.bind(this));
      }
    }, {
      key: "bindPointRenderEvent",
      value: function bindPointRenderEvent() {
        var _this$pointRender;
        _get(_getPrototypeOf(LineMode.prototype), "bindPointRenderEvent", this).call(this);
        (_this$pointRender = this.pointRender) === null || _this$pointRender === void 0 ? void 0 : _this$pointRender.on(exports.RenderEvent.Click, this.onPointClick.bind(this));
      }
    }, {
      key: "bindLineRenderEvent",
      value: function bindLineRenderEvent() {
        var _this$lineRender, _this$lineRender2, _this$lineRender3, _this$lineRender4, _this$lineRender5, _this$lineRender6;
        (_this$lineRender = this.lineRender) === null || _this$lineRender === void 0 ? void 0 : _this$lineRender.on(exports.RenderEvent.UnClick, this.onLineUnClick.bind(this));
        (_this$lineRender2 = this.lineRender) === null || _this$lineRender2 === void 0 ? void 0 : _this$lineRender2.on(exports.RenderEvent.Mousemove, this.onLineMouseMove.bind(this));
        (_this$lineRender3 = this.lineRender) === null || _this$lineRender3 === void 0 ? void 0 : _this$lineRender3.on(exports.RenderEvent.Mouseout, this.onLineMouseOut.bind(this));
        (_this$lineRender4 = this.lineRender) === null || _this$lineRender4 === void 0 ? void 0 : _this$lineRender4.on(exports.RenderEvent.Dragstart, this.onLineDragStart.bind(this));
        (_this$lineRender5 = this.lineRender) === null || _this$lineRender5 === void 0 ? void 0 : _this$lineRender5.on(exports.RenderEvent.Dragging, this.onLineDragging.bind(this));
        (_this$lineRender6 = this.lineRender) === null || _this$lineRender6 === void 0 ? void 0 : _this$lineRender6.on(exports.RenderEvent.Dragend, this.onLineDragEnd.bind(this));
      }
    }, {
      key: "getDashLineDistanceTexts",
      value: function getDashLineDistanceTexts(dashLines, _ref) {
        var showTotalDistance = _ref.showTotalDistance,
          format = _ref.format,
          showDashDistance = _ref.showDashDistance;
        return showDashDistance ? dashLines.map(function (dashLine) {
          return calcDistanceTextsByLine(dashLine, {
            showTotalDistance: showTotalDistance,
            format: format
          }, {
            isActive: true,
            type: 'dash'
          });
        }).flat() : [];
      }
    }, {
      key: "getLineDistanceTexts",
      value: function getLineDistanceTexts(lines, _ref2) {
        var showTotalDistance = _ref2.showTotalDistance,
          format = _ref2.format,
          showWhen = _ref2.showWhen;
        var textList = [];
        if (showWhen.includes('active')) {
          var activeLines = lines.filter(function (line) {
            return line.properties.isActive && line.properties.nodes.length > 1;
          });
          textList.push.apply(textList, _toConsumableArray(activeLines.map(function (line) {
            return calcDistanceTextsByLine(line, {
              showTotalDistance: showTotalDistance,
              format: format
            }, {
              isActive: true
            });
          }).flat()));
        }
        if (showWhen.includes('normal')) {
          var normalLines = lines.filter(function (line) {
            return !line.properties.isActive && line.properties.nodes.length > 1;
          });
          textList.push.apply(textList, _toConsumableArray(normalLines.map(function (line) {
            return calcDistanceTextsByLine(line, {
              showTotalDistance: showTotalDistance,
              format: format
            });
          }).flat()));
        }
        return textList;
      }
    }, {
      key: "getDistanceTexts",
      value: function getDistanceTexts() {
        var distanceOptions = this.options.distanceOptions;
        if (!distanceOptions) {
          return [];
        }
        var textList = [];
        var showWhen = distanceOptions.showWhen,
          showDashDistance = distanceOptions.showDashDistance,
          format = distanceOptions.format,
          showTotalDistance = distanceOptions.showTotalDistance;
        textList.push.apply(textList, _toConsumableArray(this.getDashLineDistanceTexts(this.getDashLineData(), {
          showTotalDistance: false,
          format: format,
          showDashDistance: showDashDistance
        })).concat(_toConsumableArray(this.getLineDistanceTexts(this.getLineData(), {
          showTotalDistance: showTotalDistance,
          format: format,
          showWhen: showWhen
        }))));
        return textList;
      }
    }, {
      key: "getAllTexts",
      value: function getAllTexts() {
        return this.getDistanceTexts();
      }
      /**
       * 创建LineFeature
       * @param point
       */
    }, {
      key: "handleCreateLine",
      value: function handleCreateLine(point) {
        var newLine = createLineFeature([point], {
          isActive: true,
          isDraw: true
        });
        this.setLineData(function (features) {
          return updateTargetFeature({
            target: newLine,
            data: [].concat(_toConsumableArray(features), [newLine]),
            otherHandler: function otherHandler(feature) {
              feature.properties.isActive = false;
            }
          });
        });
        this.setPointData([point]);
        this.setTextData(this.getAllTexts());
        return newLine;
      }
      /**
       * 同步当前编辑线中的结点
       * @param line
       * @param nodes
       */
    }, {
      key: "syncLineNodes",
      value: function syncLineNodes(line, nodes) {
        line.properties.nodes = nodes;
        line.geometry.coordinates = coordAll(featureCollection(nodes));
        this.setLineData(function (features) {
          return features.map(function (feature) {
            if (isSameFeature(feature, line)) {
              return line;
            }
            return feature;
          });
        });
        if (isSameFeature(this.editLine, line)) {
          this.setMidPointData(this.getMidPointsByLine(line));
        }
        this.setPointData(line.properties.nodes);
        this.setTextData(this.getAllTexts());
        return line;
      }
    }, {
      key: "setActiveLine",
      value: function setActiveLine(line) {
        var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.setLineData(function (features) {
          return updateTargetFeature({
            target: line,
            data: features,
            targetHandler: function targetHandler(feature) {
              feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
                isDraw: false,
                isActive: true,
                isDrag: false,
                isHover: false
              }, properties);
            },
            otherHandler: function otherHandler(feature) {
              feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
                isDraw: false,
                isActive: false,
                isDrag: false
              });
            }
          });
        });
        this.setPointData(line.properties.nodes.map(function (feature) {
          feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
            isHover: false,
            isActive: false
          });
          return feature;
        }));
        this.setMidPointData(this.getMidPointsByLine(line));
        this.setDashLineData([]);
        this.setTextData(this.getAllTexts());
        return line;
      }
    }, {
      key: "clearActiveLine",
      value: function clearActiveLine() {
        this.source.setData({
          point: [],
          line: this.getLineData().map(function (feature) {
            feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
              isDrag: false,
              isActive: false,
              isHover: false
            });
            return feature;
          }),
          midPoint: [],
          text: this.getAllTexts()
        });
      }
    }, {
      key: "handleLineUnClick",
      value: function handleLineUnClick(link) {
        this.clearActiveLine();
        return link;
      }
    }, {
      key: "handleLineHover",
      value: function handleLineHover(line) {
        if (this.drawLine) {
          return;
        }
        this.setCursor('lineHover');
        if (!isSameFeature(line, this.hoverLine)) {
          this.setLineData(function (features) {
            return updateTargetFeature({
              target: line,
              data: features,
              targetHandler: function targetHandler(feature) {
                feature.properties.isHover = true;
              },
              otherHandler: function otherHandler(feature) {
                feature.properties.isHover = false;
              }
            });
          });
        }
        return line;
      }
    }, {
      key: "handleLineUnHover",
      value: function handleLineUnHover(line) {
        if (this.drawLine) {
          return;
        }
        this.resetCursor();
        this.setLineData(function (features) {
          return features.map(function (feature) {
            feature.properties.isHover = false;
            return feature;
          });
        });
        return line;
      }
    }, {
      key: "handleLineDragStart",
      value: function handleLineDragStart(line) {
        this.setActiveLine(line, {
          isDrag: true,
          isActive: true
        });
        this.scene.setMapStatus({
          dragEnable: false
        });
        this.setCursor('lineDrag');
        return line;
      }
    }, {
      key: "handleLineDragging",
      value: function handleLineDragging(line, _ref3) {
        var lng = _ref3.lng,
          lat = _ref3.lat;
        var nodes = line.properties.nodes;
        var _this$previousPositio = _slicedToArray(this.previousPosition, 2),
          preLng = _this$previousPositio[0],
          preLat = _this$previousPositio[1];
        nodes.forEach(function (node) {
          var coordinates = node.geometry.coordinates;
          node.geometry.coordinates = [getPrecisionNumber(coordinates[0] + lng - preLng), getPrecisionNumber(coordinates[1] + lat - preLat)];
        });
        this.syncLineNodes(line, nodes);
        this.setActiveLine(line, {
          isDrag: true
        });
        this.setCursor('lineDrag');
        this.previousPosition = [lng, lat];
        return line;
      }
    }, {
      key: "handleLineDragEnd",
      value: function handleLineDragEnd(line) {
        line.properties.isDrag = false;
        this.setLineData(function (features) {
          return features;
        });
        this.scene.setMapStatus({
          dragEnable: true
        });
        return line;
      }
    }, {
      key: "resetAdsorbLngLat",
      value: function resetAdsorbLngLat(e) {
        if (!this.options.adsorbOptions) {
          return;
        }
        var adsorbPosition = this.getAdsorbPosition(transLngLat2Position(getLngLat(e)));
        if (adsorbPosition) {
          resetEventLngLat(e, adsorbPosition);
        }
        return adsorbPosition;
      }
      /**
       * 创建点之后，对应线段的处理
       * @param e
       */
    }, {
      key: "onPointCreate",
      value: function onPointCreate(e) {
        if (this.editLine) {
          return;
        }
        this.resetAdsorbLngLat(e);
        var point = _get(_getPrototypeOf(LineMode.prototype), "onPointCreate", this).call(this, e);
        var drawLine = this.drawLine;
        if (!point) {
          return;
        }
        if (drawLine) {
          this.syncLineNodes(drawLine, [].concat(_toConsumableArray(drawLine.properties.nodes), [point]));
          this.setDashLineData([]);
        } else {
          this.handleCreateLine(point);
        }
        return point;
      }
    }, {
      key: "onPointDragStart",
      value: function onPointDragStart(e) {
        var editLine = this.editLine;
        if (!editLine) {
          return;
        }
        this.setHelper('pointDrag');
        return _get(_getPrototypeOf(LineMode.prototype), "onPointDragStart", this).call(this, e);
      }
    }, {
      key: "onPointDragging",
      value: function onPointDragging(e) {
        var dragPoint = _get(_getPrototypeOf(LineMode.prototype), "onPointDragging", this).call(this, e);
        if (dragPoint) {
          var adsorbPosition = this.resetAdsorbLngLat(e);
          if (adsorbPosition) {
            dragPoint.geometry.coordinates = cloneDeep_1(adsorbPosition);
          }
        }
        var editLine = this.editLine;
        if (editLine && dragPoint) {
          this.syncLineNodes(editLine, editLine.properties.nodes.map(function (node) {
            if (isSameFeature(dragPoint, node)) {
              return dragPoint;
            }
            return node;
          }));
          this.setActiveLine(editLine);
        }
        return dragPoint;
      }
    }, {
      key: "onPointDragEnd",
      value: function onPointDragEnd(e) {
        var editLine = this.editLine;
        if (editLine) {
          var dragPoint = _get(_getPrototypeOf(LineMode.prototype), "onPointDragEnd", this).call(this, e);
          this.setPointData(function (features) {
            return features.map(function (feature) {
              feature.properties.isActive = false;
              return feature;
            });
          });
          this.setHelper('pointHover');
          return dragPoint;
        }
      }
    }, {
      key: "onLineUnClick",
      value: function onLineUnClick(e) {
        var editLine = this.editLine;
        if (!editLine) {
          return;
        }
        return this.handleLineUnClick(editLine);
      }
    }, {
      key: "onLineMouseMove",
      value: function onLineMouseMove(e) {
        if (this.drawLine) {
          return;
        }
        if (!this.dragLine && !this.drawLine && this.options.editable) {
          this.setHelper('lineHover');
        }
        return this.handleLineHover(e.feature);
      }
    }, {
      key: "onLineMouseOut",
      value: function onLineMouseOut(e) {
        if (this.drawLine) {
          return;
        }
        if (!this.dragLine && !this.drawLine) {
          this.setHelper(this.addable ? 'draw' : null);
        }
        return this.handleLineUnHover(e.feature);
      }
    }, {
      key: "onLineDragStart",
      value: function onLineDragStart(e) {
        if (!this.options.editable || this.drawLine) {
          return;
        }
        this.previousPosition = getPosition(e);
        this.setHelper('lineDrag');
        return this.handleLineDragStart(e.feature);
      }
    }, {
      key: "onLineDragging",
      value: function onLineDragging(e) {
        var dragLine = this.dragLine;
        if (!dragLine) {
          return;
        }
        return this.handleLineDragging(dragLine, getLngLat(e));
      }
    }, {
      key: "onLineDragEnd",
      value: function onLineDragEnd(e) {
        var dragLine = this.dragLine;
        if (!dragLine) {
          return;
        }
        this.setHelper('lineHover');
        return this.handleLineDragEnd(dragLine);
      }
    }, {
      key: "onPointMouseMove",
      value: function onPointMouseMove(e) {
        var feature = _get(_getPrototypeOf(LineMode.prototype), "onPointMouseMove", this).call(this, e);
        if (!this.dragLine && !this.drawLine && !this.dragPoint) {
          this.setHelper('pointHover');
        }
        return feature;
      }
    }, {
      key: "onPointMouseOut",
      value: function onPointMouseOut(e) {
        var feature = _get(_getPrototypeOf(LineMode.prototype), "onPointMouseOut", this).call(this, e);
        if (!this.dragLine && !this.drawLine && !this.dragPoint) {
          this.setHelper(this.addable ? 'draw' : null);
        }
        return feature;
      }
    }, {
      key: "onMidPointHover",
      value: function onMidPointHover(e) {
        _get(_getPrototypeOf(LineMode.prototype), "onMidPointHover", this).call(this, e);
        this.setHelper('midPointHover');
      }
    }, {
      key: "onMidPointUnHover",
      value: function onMidPointUnHover(e) {
        _get(_getPrototypeOf(LineMode.prototype), "onMidPointUnHover", this).call(this, e);
        this.setHelper(null);
      }
    }, {
      key: "onPointClick",
      value: function onPointClick(e) {}
      /**
       * 获取线数据
       */
    }, {
      key: "getLineData",
      value: function getLineData() {
        return this.source.getRenderData('line');
      }
      /**
       * 设置线数据
       * @param data
       */
    }, {
      key: "setLineData",
      value: function setLineData(data) {
        return this.source.setRenderData('line', data);
      }
    }, {
      key: "getTextData",
      value: function getTextData() {
        return this.source.getRenderData('text');
      }
    }, {
      key: "setTextData",
      value: function setTextData(data) {
        return this.source.setRenderData('text', data);
      }
      /**
       * 获取线数据
       */
    }, {
      key: "getDashLineData",
      value: function getDashLineData() {
        return this.source.getRenderData('dashLine');
      }
      /**
       * 设置线数据
       * @param data
       */
    }, {
      key: "setDashLineData",
      value: function setDashLineData(data) {
        return this.source.setRenderData('dashLine', data);
      }
    }, {
      key: "onMidPointClick",
      value: function onMidPointClick(e) {
        var editLine = this.editLine;
        var feature = e.feature;
        if (!editLine || !feature || this.dragPoint) {
          return;
        }
        var nodes = editLine.properties.nodes;
        var _feature$properties2 = feature.properties,
          startId = _feature$properties2.startId,
          endId = _feature$properties2.endId;
        var startIndex = nodes.findIndex(function (feature) {
          return feature.properties.id === startId;
        });
        var endIndex = nodes.findIndex(function (feature) {
          return feature.properties.id === endId;
        });
        if (startIndex > -1 && endIndex > -1) {
          var newNode = createPointFeature(feature.geometry.coordinates, {
            isDrag: true,
            isHover: true
          });
          this.setHelper('pointDrag');
          nodes.splice(endIndex, 0, newNode);
          editLine.geometry.coordinates = coordAll(featureCollection(nodes));
          this.syncLineNodes(editLine, nodes);
          this.setActiveLine(editLine);
          return newNode;
        }
      }
    }, {
      key: "enableSceneRenderAction",
      value: function enableSceneRenderAction() {
        this.sceneRender.enableDrag();
        this.sceneRender.enableMouseMove();
        this.sceneRender.enableDblClick();
      }
    }, {
      key: "disableSceneRenderAction",
      value: function disableSceneRenderAction() {
        this.sceneRender.disableDrag();
        this.sceneRender.disableMouseMove();
        this.sceneRender.disableDblClick();
      }
    }, {
      key: "enableLineRenderAction",
      value: function enableLineRenderAction() {
        var _this$lineRender7;
        var editable = this.options.editable;
        (_this$lineRender7 = this.lineRender) === null || _this$lineRender7 === void 0 ? void 0 : _this$lineRender7.enableUnClick();
        if (editable) {
          var _this$lineRender8, _this$lineRender9;
          (_this$lineRender8 = this.lineRender) === null || _this$lineRender8 === void 0 ? void 0 : _this$lineRender8.enableHover();
          (_this$lineRender9 = this.lineRender) === null || _this$lineRender9 === void 0 ? void 0 : _this$lineRender9.enableDrag();
        }
      }
    }, {
      key: "disableLineRenderAction",
      value: function disableLineRenderAction() {
        var _this$lineRender10, _this$lineRender11, _this$lineRender12;
        (_this$lineRender10 = this.lineRender) === null || _this$lineRender10 === void 0 ? void 0 : _this$lineRender10.disableUnClick();
        (_this$lineRender11 = this.lineRender) === null || _this$lineRender11 === void 0 ? void 0 : _this$lineRender11.disableHover();
        (_this$lineRender12 = this.lineRender) === null || _this$lineRender12 === void 0 ? void 0 : _this$lineRender12.disableDrag();
      }
    }, {
      key: "onSceneDragStart",
      value: function onSceneDragStart(e) {
        if (!this.isDragTrigger || !this.addable || this.dragPoint || this.editLine) {
          return;
        }
        this.scene.setMapStatus({
          dragEnable: false
        });
        this.onPointCreate(e);
        this.prevCreateTime = Date.now();
        this.sceneRender.on(exports.RenderEvent.Dragging, this.onSceneDragging);
      }
    }, {
      key: "onSceneDragging",
      value: function onSceneDragging(e) {
        var drawLine = this.drawLine;
        var now = Date.now();
        var _DEFAULT_DRAG_OPTIONS = _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_OPTIONS), this.options.dragOptions),
          dotDistance = _DEFAULT_DRAG_OPTIONS.dotDistance,
          dotDuration = _DEFAULT_DRAG_OPTIONS.dotDuration;
        if (!this.isDragTrigger || !this.addable || !drawLine || dotDuration && now - this.prevCreateTime < dotDuration) {
          return;
        }
        var _getLngLat = getLngLat(e),
          currLng = _getLngLat.lng,
          currLat = _getLngLat.lat;
        var lastPosition = last_1(drawLine.properties.nodes).geometry.coordinates;
        var _this$scene$lngLatToP = this.scene.lngLatToPixel([lastPosition[0], lastPosition[1]]),
          prevX = _this$scene$lngLatToP.x,
          prevY = _this$scene$lngLatToP.y;
        var _this$scene$lngLatToP2 = this.scene.lngLatToPixel([currLng, currLat]),
          currX = _this$scene$lngLatToP2.x,
          currY = _this$scene$lngLatToP2.y;
        if (!dotDistance || Math.pow(currX - prevX, 2) + Math.pow(currY - prevY, 2) > Math.pow(dotDistance, 2)) {
          this.onPointCreate(e);
          this.prevCreateTime = now;
        }
      }
    }, {
      key: "onSceneDragEnd",
      value: function onSceneDragEnd(e) {}
    }, {
      key: "bindSceneDragEvent",
      value: function bindSceneDragEvent() {
        this.unbindSceneDragEvent();
        this.sceneRender.on(exports.RenderEvent.Dragstart, this.onSceneDragStart);
        this.sceneRender.on(exports.RenderEvent.Dragging, this.onSceneDragging);
        this.sceneRender.on(exports.RenderEvent.Dragend, this.onSceneDragEnd);
        this.scene.setMapStatus({
          dragEnable: false
        });
      }
    }, {
      key: "unbindSceneDragEvent",
      value: function unbindSceneDragEvent() {
        this.sceneRender.off(exports.RenderEvent.Dragstart, this.onSceneDragStart);
        this.sceneRender.off(exports.RenderEvent.Dragging, this.onSceneDragging);
        this.sceneRender.off(exports.RenderEvent.Dragend, this.onSceneDragEnd);
        this.scene.setMapStatus({
          dragEnable: true
        });
      }
    }, {
      key: "bindEnableEvent",
      value: function bindEnableEvent() {
        _get(_getPrototypeOf(LineMode.prototype), "bindEnableEvent", this).call(this);
        if (this.isDragTrigger) {
          this.bindSceneDragEvent();
        }
      }
    }, {
      key: "unbindEnableEvent",
      value: function unbindEnableEvent() {
        _get(_getPrototypeOf(LineMode.prototype), "unbindEnableEvent", this).call(this);
        if (this.isDragTrigger) {
          this.unbindSceneDragEvent();
        }
      }
    }, {
      key: "bindThis",
      value: function bindThis() {
        _get(_getPrototypeOf(LineMode.prototype), "bindThis", this).call(this);
        this.onSceneDragStart = this.onSceneDragStart.bind(this);
        this.onSceneDragging = this.onSceneDragging.bind(this);
        this.onSceneDragEnd = this.onSceneDragEnd.bind(this);
      }
    }]);
  }(MidPointMode);

  var PolygonMode = /*#__PURE__*/function (_LineMode) {
    function PolygonMode() {
      _classCallCheck(this, PolygonMode);
      return _callSuper(this, PolygonMode, arguments);
    }
    _inherits(PolygonMode, _LineMode);
    return _createClass(PolygonMode, [{
      key: "dragItem",
      get: function get() {
        return this.dragPolygon;
      }
    }, {
      key: "editItem",
      get: function get() {
        return this.editPolygon;
      }
      /**
       * 获取polygon类型对应的render
       * @protected
       */
    }, {
      key: "polygonRender",
      get: function get() {
        return this.render.polygon;
      }
      /**
       * 获取正在被拖拽的线
       * @protected
       */
    }, {
      key: "dragPolygon",
      get: function get() {
        return this.getPolygonData().find(function (feature) {
          return feature.properties.isDrag;
        });
      }
      /**
       * 正在绘制的线
       * @protected
       */
    }, {
      key: "drawPolygon",
      get: function get() {
        return this.getPolygonData().find(function (feature) {
          return feature.properties.isDraw;
        });
      }
      /**
       * 当前高亮的结点
       * @protected
       */
    }, {
      key: "editPolygon",
      get: function get() {
        return this.getPolygonData().find(function (feature) {
          var _feature$properties = feature.properties,
            isActive = _feature$properties.isActive,
            isDraw = _feature$properties.isDraw;
          return !isDraw && isActive;
        });
      }
      /**
       * 当前悬停的线
       * @protected
       */
    }, {
      key: "hoverPolygon",
      get: function get() {
        return this.getPolygonData().find(function (feature) {
          return feature.properties.isHover;
        });
      }
    }, {
      key: "getDragPolygon",
      value: function getDragPolygon() {
        return this.dragPolygon;
      }
    }, {
      key: "getDrawPolygon",
      value: function getDrawPolygon() {
        return this.drawPolygon;
      }
    }, {
      key: "getEditPolygon",
      value: function getEditPolygon() {
        return this.editPolygon;
      }
    }, {
      key: "getRenderTypes",
      value: function getRenderTypes() {
        return ['polygon', 'line', 'dashLine', 'midPoint', 'point', 'text'];
      }
    }, {
      key: "getData",
      value: function getData() {
        var getOriginData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var polygons = this.getPolygonData();
        if (getOriginData) {
          return polygons;
        }
        return joinMultiFeatures(polygons);
      }
    }, {
      key: "getMainLayer",
      value: function getMainLayer() {
        var _this$render$polygon$, _this$render$polygon;
        return (_this$render$polygon$ = (_this$render$polygon = this.render.polygon) === null || _this$render$polygon === void 0 ? void 0 : _this$render$polygon.getLayers()) !== null && _this$render$polygon$ !== void 0 ? _this$render$polygon$ : [];
      }
    }, {
      key: "getDefaultOptions",
      value: function getDefaultOptions(options) {
        var newOptions = _objectSpread2(_objectSpread2({}, _get(_getPrototypeOf(PolygonMode.prototype), "getDefaultOptions", this).call(this, options)), {}, {
          areaOptions: false,
          helper: cloneDeep_1(DEFAULT_POLYGON_HELPER_CONFIG)
        });
        if (options.areaOptions) {
          newOptions.areaOptions = _objectSpread2(_objectSpread2({}, DEFAULT_AREA_OPTIONS), options.areaOptions);
        }
        return newOptions;
      }
    }, {
      key: "getAreaTexts",
      value: function getAreaTexts(polygons) {
        var areaOptions = this.options.areaOptions;
        if (!areaOptions) {
          return [];
        }
        var format = areaOptions.format,
          showWhen = areaOptions.showWhen;
        var textList = [];
        var polygonData = polygons.filter(function (feature) {
          return feature.geometry.coordinates[0].length >= 4;
        });
        if (showWhen.includes('active')) {
          polygonData.filter(function (feature) {
            return feature.properties.isActive;
          }).forEach(function (feature) {
            textList.push(calcAreaText(feature, {
              format: format
            }, {
              isActive: true
            }));
          });
        }
        if (showWhen.includes('normal')) {
          polygonData.filter(function (feature) {
            return !feature.properties.isActive;
          }).forEach(function (feature) {
            textList.push(calcAreaText(feature, {
              format: format
            }, {
              isActive: false
            }));
          });
        }
        return textList;
      }
    }, {
      key: "getAllTexts",
      value: function getAllTexts() {
        return [].concat(_toConsumableArray(_get(_getPrototypeOf(PolygonMode.prototype), "getAllTexts", this).call(this)), _toConsumableArray(this.getAreaTexts(this.getPolygonData())));
      }
      /**
       * 获取线数据
       */
    }, {
      key: "getPolygonData",
      value: function getPolygonData() {
        return this.source.getRenderData('polygon');
      }
      /**
       * 设置线数据
       * @param data
       */
    }, {
      key: "setPolygonData",
      value: function setPolygonData(data) {
        return this.source.setRenderData('polygon', data);
      }
    }, {
      key: "handleCreatePolygon",
      value: function handleCreatePolygon(points, line) {
        var newPolygon = createPolygonFeature(points, {
          nodes: points,
          line: line,
          isActive: true,
          isDraw: true
        });
        this.setPolygonData(function (features) {
          return updateTargetFeature({
            target: newPolygon,
            data: [].concat(_toConsumableArray(features), [newPolygon]),
            otherHandler: function otherHandler(feature) {
              feature.properties.isActive = false;
            }
          });
        });
        return newPolygon;
      }
    }, {
      key: "handlePolygonUnClick",
      value: function handlePolygonUnClick(polygon) {
        this.clearActivePolygon();
        return polygon;
      }
    }, {
      key: "handlePolygonHover",
      value: function handlePolygonHover(polygon) {
        this.setCursor('polygonHover');
        if (!isSameFeature(polygon, this.hoverPolygon)) {
          this.setPolygonData(function (features) {
            return updateTargetFeature({
              target: polygon,
              data: features,
              targetHandler: function targetHandler(feature) {
                feature.properties.isHover = true;
              },
              otherHandler: function otherHandler(feature) {
                feature.properties.isHover = false;
              }
            });
          });
        }
        return polygon;
      }
    }, {
      key: "handlePolygonUnHover",
      value: function handlePolygonUnHover() {
        this.resetCursor();
        this.setPolygonData(function (features) {
          return features.map(function (feature) {
            feature.properties.isHover = false;
            return feature;
          });
        });
      }
    }, {
      key: "handlePolygonDragStart",
      value: function handlePolygonDragStart(polygon) {
        this.setActivePolygon(polygon, {
          isDrag: true
        });
        this.scene.setMapStatus({
          dragEnable: false
        });
        this.setCursor('polygonDrag');
        return polygon;
      }
    }, {
      key: "bindPolygonRenderEvent",
      value: function bindPolygonRenderEvent() {
        var _this$polygonRender, _this$polygonRender2, _this$polygonRender3, _this$polygonRender4;
        (_this$polygonRender = this.polygonRender) === null || _this$polygonRender === void 0 ? void 0 : _this$polygonRender.on(exports.RenderEvent.UnClick, this.onPolygonUnClick.bind(this));
        (_this$polygonRender2 = this.polygonRender) === null || _this$polygonRender2 === void 0 ? void 0 : _this$polygonRender2.on(exports.RenderEvent.Mousemove, this.onPolygonHover.bind(this));
        (_this$polygonRender3 = this.polygonRender) === null || _this$polygonRender3 === void 0 ? void 0 : _this$polygonRender3.on(exports.RenderEvent.Mouseout, this.onPolygonUnHover.bind(this));
        (_this$polygonRender4 = this.polygonRender) === null || _this$polygonRender4 === void 0 ? void 0 : _this$polygonRender4.on(exports.RenderEvent.Dragstart, this.onPolygonDragStart.bind(this));
        // this.polygonRender?.on(
        //   RenderEvent.dragging,
        //   this.onPolygonDragging.bind(this),
        // );
        // this.polygonRender?.on(
        //   RenderEvent.dragend,
        //   this.onPolygonDragEnd.bind(this),
        // );
      }
    }, {
      key: "syncPolygonNodes",
      value: function syncPolygonNodes(polygon, nodes) {
        var positions = coordAll(featureCollection([].concat(_toConsumableArray(nodes), [first(nodes)])));
        var _polygon$properties = polygon.properties,
          isDraw = _polygon$properties.isDraw,
          line = _polygon$properties.line;
        polygon.properties.nodes = nodes;
        polygon.geometry.coordinates = [booleanClockwise(lineString(positions)) ? positions : positions.reverse()];
        this.setPolygonData(function (features) {
          return features.map(function (feature) {
            if (isSameFeature(feature, polygon)) {
              return polygon;
            }
            return feature;
          });
        });
        if (!isSameFeature(this.drawPolygon, polygon)) {
          var oldLineNodes = line.properties.nodes;
          var newLineNodes = _toConsumableArray(nodes);
          var firstNode = first(newLineNodes);
          if (oldLineNodes.length === nodes.length) {
            newLineNodes.push(createPointFeature(firstNode.geometry.coordinates));
          } else {
            newLineNodes.push(last_1(oldLineNodes));
          }
          var lastNode = last_1(newLineNodes);
          if (!isEqual_1(firstNode.geometry.coordinates, lastNode.geometry.coordinates)) {
            lastNode.geometry.coordinates = cloneDeep_1(firstNode.geometry.coordinates);
          }
          this.syncLineNodes(line, newLineNodes);
        }
        return polygon;
      }
    }, {
      key: "setActivePolygon",
      value: function setActivePolygon(polygon) {
        var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.setActiveLine(polygon.properties.line, properties);
        this.setPolygonData(function (features) {
          return updateTargetFeature({
            target: polygon,
            data: features,
            targetHandler: function targetHandler(feature) {
              feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
                isDraw: false,
                isActive: true,
                isDrag: false,
                isHover: false
              }, properties);
            },
            otherHandler: function otherHandler(feature) {
              feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
                isDraw: false,
                isActive: false,
                isDrag: false
              });
            }
          });
        });
        this.setTextData(this.getAllTexts());
        return polygon;
      }
    }, {
      key: "clearActivePolygon",
      value: function clearActivePolygon() {
        this.setPolygonData(function (features) {
          return features.map(function (feature) {
            feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
              isDrag: false,
              isActive: false,
              isHover: false
            });
            return feature;
          });
        });
        this.clearActiveLine();
      }
    }, {
      key: "onLineDragStart",
      value: function onLineDragStart(e) {
        var line = _get(_getPrototypeOf(PolygonMode.prototype), "onLineDragStart", this).call(this, e);
        var polygon = this.getPolygonData().find(function (feature) {
          return isSameFeature(feature.properties.line, line);
        });
        if (polygon) {
          this.setActivePolygon(polygon, {
            isDrag: true
          });
          this.emit(exports.DrawEvent.DragStart, polygon, this.getPolygonData());
        }
        return line;
      }
    }, {
      key: "onLineUnClick",
      value: function onLineUnClick(e) {
        return this.editLine;
      }
    }, {
      key: "onLineDragEnd",
      value: function onLineDragEnd(e) {
        var feature = _get(_getPrototypeOf(PolygonMode.prototype), "onLineDragEnd", this).call(this, e);
        var dragPolygon = this.dragPolygon;
        if (feature && dragPolygon) {
          dragPolygon.properties.isDrag = false;
          this.emit(exports.DrawEvent.DragEnd, dragPolygon, this.getPolygonData());
          this.emit(exports.DrawEvent.Edit, dragPolygon, this.getPolygonData());
        }
        return feature;
      }
    }, {
      key: "onPolygonUnClick",
      value: function onPolygonUnClick(e) {
        var editPolygon = this.editPolygon;
        if (!editPolygon) {
          return;
        }
        return this.handlePolygonUnClick(editPolygon);
      }
    }, {
      key: "onPolygonHover",
      value: function onPolygonHover(e) {
        if (this.drawPolygon) {
          return;
        }
        if (!this.dragPolygon) {
          this.setHelper('polygonHover');
        }
        return this.handlePolygonHover(e.feature);
      }
    }, {
      key: "onPolygonUnHover",
      value: function onPolygonUnHover(e) {
        if (this.drawPolygon) {
          return;
        }
        this.setHelper(this.addable ? 'draw' : null);
        return this.handlePolygonUnHover();
      }
    }, {
      key: "onPolygonDragStart",
      value: function onPolygonDragStart(e) {
        if (!this.options.editable || this.drawPolygon) {
          return;
        }
        var polygon = e.feature;
        this.previousPosition = getPosition(e);
        this.setHelper('polygonDrag');
        this.emit(exports.DrawEvent.DragStart, polygon, this.getPolygonData());
        return this.handlePolygonDragStart(polygon);
      }
    }, {
      key: "onMidPointClick",
      value: function onMidPointClick(e) {
        var editPolygon = this.editPolygon;
        var feature = _get(_getPrototypeOf(PolygonMode.prototype), "onMidPointClick", this).call(this, e);
        if (feature && editPolygon) {
          var lineNodes = editPolygon.properties.line.properties.nodes;
          this.syncPolygonNodes(editPolygon, lineNodes.slice(0, lineNodes.length - 1));
          this.setActivePolygon(editPolygon);
        }
        return feature;
      }
    }, {
      key: "onPointDragEnd",
      value: function onPointDragEnd(e) {
        var editPolygon = this.editPolygon;
        var feature = _get(_getPrototypeOf(PolygonMode.prototype), "onPointDragEnd", this).call(this, e);
        if (feature && editPolygon) {
          this.emit(exports.DrawEvent.Edit, editPolygon, this.getPolygonData());
        }
        return feature;
      }
    }, {
      key: "enablePolygonRenderAction",
      value: function enablePolygonRenderAction() {
        var _this$polygonRender5;
        var editable = this.options.editable;
        (_this$polygonRender5 = this.polygonRender) === null || _this$polygonRender5 === void 0 ? void 0 : _this$polygonRender5.enableUnClick();
        if (editable) {
          var _this$polygonRender6, _this$polygonRender7;
          (_this$polygonRender6 = this.polygonRender) === null || _this$polygonRender6 === void 0 ? void 0 : _this$polygonRender6.enableHover();
          (_this$polygonRender7 = this.polygonRender) === null || _this$polygonRender7 === void 0 ? void 0 : _this$polygonRender7.enableDrag();
        }
      }
    }, {
      key: "disablePolygonRenderAction",
      value: function disablePolygonRenderAction() {
        var _this$polygonRender8, _this$polygonRender9, _this$polygonRender10;
        (_this$polygonRender8 = this.polygonRender) === null || _this$polygonRender8 === void 0 ? void 0 : _this$polygonRender8.disableUnClick();
        (_this$polygonRender9 = this.polygonRender) === null || _this$polygonRender9 === void 0 ? void 0 : _this$polygonRender9.disableHover();
        (_this$polygonRender10 = this.polygonRender) === null || _this$polygonRender10 === void 0 ? void 0 : _this$polygonRender10.disableDrag();
      }
    }, {
      key: "bindEnableEvent",
      value: function bindEnableEvent() {
        _get(_getPrototypeOf(PolygonMode.prototype), "bindEnableEvent", this).call(this);
        this.enableSceneRenderAction();
        this.enablePointRenderAction();
        this.enableLineRenderAction();
        this.enableMidPointRenderAction();
        this.enablePolygonRenderAction();
      }
    }, {
      key: "unbindEnableEvent",
      value: function unbindEnableEvent() {
        _get(_getPrototypeOf(PolygonMode.prototype), "unbindEnableEvent", this).call(this);
        this.disableSceneRenderAction();
        this.disablePointRenderAction();
        this.disableLineRenderAction();
        this.disableMidPointRenderAction();
        this.disablePolygonRenderAction();
      }
    }, {
      key: "bindThis",
      value: function bindThis() {
        _get(_getPrototypeOf(PolygonMode.prototype), "bindThis", this).call(this);
        this.bindPointRenderEvent = this.bindPointRenderEvent.bind(this);
        this.bindSceneEvent = this.bindSceneEvent.bind(this);
        this.bindLineRenderEvent = this.bindLineRenderEvent.bind(this);
        this.bindMidPointRenderEvent = this.bindMidPointRenderEvent.bind(this);
        this.bindPolygonRenderEvent = this.bindPolygonRenderEvent.bind(this);
      }
    }, {
      key: "setActiveFeature",
      value: function setActiveFeature(target) {
        var targetFeature = this.getTargetFeature(target);
        if (targetFeature) {
          this.setActivePolygon(targetFeature);
        } else {
          this.clearActivePolygon();
        }
      }
    }, {
      key: "resetFeatures",
      value: function resetFeatures() {
        var features = this.getPolygonData();
        if (this.drawPolygon) {
          features = features.filter(function (feature) {
            return !feature.properties.isDraw;
          });
          this.source.setData({
            point: [],
            dashLine: [],
            midPoint: []
          });
          this.setLineData(function (features) {
            return features.filter(function (feature) {
              return !feature.properties.isDraw;
            });
          });
          this.setTextData(function (features) {
            return features.filter(function (feature) {
              return !feature.properties.isActive;
            });
          });
        }
        if (this.editPolygon) {
          this.handlePolygonUnClick(this.editPolygon);
        }
        this.setPolygonData(features.map(function (feature) {
          feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
            isDrag: false,
            isActive: false,
            isHover: false
          });
          return feature;
        }));
      }
    }]);
  }(LineMode);

  var DragPolygonMode = /*#__PURE__*/function (_PolygonMode) {
    function DragPolygonMode() {
      _classCallCheck(this, DragPolygonMode);
      return _callSuper(this, DragPolygonMode, arguments);
    }
    _inherits(DragPolygonMode, _PolygonMode);
    return _createClass(DragPolygonMode, [{
      key: "drawLine",
      get: function get() {
        var _this$drawPolygon;
        return (_this$drawPolygon = this.drawPolygon) === null || _this$drawPolygon === void 0 ? void 0 : _this$drawPolygon.properties.line;
      }
    }, {
      key: "getDefaultOptions",
      value: function getDefaultOptions(options) {
        var newOptions = _objectSpread2(_objectSpread2({}, _get(_getPrototypeOf(DragPolygonMode.prototype), "getDefaultOptions", this).call(this, options)), {}, {
          showMidPoint: false,
          trigger: 'click',
          autoActive: false,
          helper: cloneDeep_1(DEFAULT_DRAG_POLYGON_HELPER_CONFIg)
        });
        if (options.trigger === 'drag') {
          newOptions.helper = _objectSpread2(_objectSpread2({}, newOptions.helper), DEFAULT_TRIGGER_DRAG_HELPER_CONFIG);
        }
        return newOptions;
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
    }, {
      key: "getMidPointsByLine",
      value: function getMidPointsByLine(line) {
        return [];
      }
    }, {
      key: "handleCreatePolygon",
      value: function handleCreatePolygon(points, line) {
        var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var lineNodes = line.properties.nodes;
        return createPolygonFeature(lineNodes.slice(0, lineNodes.length - 1), _objectSpread2({
          nodes: points,
          line: line
        }, properties));
      }
    }, {
      key: "handleFirstNodeCreate",
      value: function handleFirstNodeCreate(firstNode) {
        var lastNode = createPointFeature(firstNode.geometry.coordinates);
        var line = this.handleCreatePolygonLine(firstNode, lastNode, {
          isDraw: true,
          isActive: true
        });
        var polygon = this.handleCreatePolygon([firstNode, lastNode], line, {
          isDraw: true,
          isActive: true
        });
        this.setPolygonData(function (features) {
          return updateTargetFeature({
            target: polygon,
            data: [].concat(_toConsumableArray(features), [polygon]),
            targetHandler: function targetHandler(feature) {
              feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
                isDraw: true,
                isActive: true
              });
            }
          });
        });
        this.emit(exports.DrawEvent.AddNode, firstNode, this.drawPolygon, this.getPolygonData());
        this.setHelper('drawFinish');
        return firstNode;
      }
    }, {
      key: "handleLastNodeCreate",
      value: function handleLastNodeCreate(lastNode) {
        var _this$options = this.options,
          autoActive = _this$options.autoActive,
          editable = _this$options.editable;
        var drawPolygon = this.drawPolygon;
        if (!drawPolygon) {
          return lastNode;
        }
        this.setLineData(function (features) {
          return [].concat(_toConsumableArray(features), [drawPolygon.properties.line]);
        });
        this.setActivePolygon(drawPolygon);
        if (!(autoActive && editable)) {
          this.handlePolygonUnClick(drawPolygon);
        }
        this.emit(exports.DrawEvent.Add, drawPolygon, this.getPolygonData());
        this.emit(exports.DrawEvent.AddNode, drawPolygon.properties.nodes[1], this.drawPolygon, this.getPolygonData());
        if (editable) {
          this.setHelper(autoActive ? 'pointHover' : 'polygonHover');
        } else {
          this.setHelper(this.addable ? 'draw' : null);
        }
        return lastNode;
      }
    }, {
      key: "onPointCreate",
      value: function onPointCreate(e) {
        var _this = this;
        if (!this.addable || this.dragPoint || this.editLine || !this.isClickTrigger) {
          return;
        }
        var drawPolygon = this.drawPolygon;
        var position = getPosition(e);
        var feature = this.handleCreatePoint(position);
        if (drawPolygon) {
          requestAnimationFrame(function () {
            _this.handleLastNodeCreate(feature);
          });
        } else {
          this.handleFirstNodeCreate(feature);
        }
        return feature;
      }
    }, {
      key: "setActivePolygon",
      value: function setActivePolygon(polygon) {
        var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        this.setActiveLine(polygon.properties.line, properties);
        this.setPolygonData(function (features) {
          return updateTargetFeature({
            target: polygon,
            data: features,
            targetHandler: function targetHandler(feature) {
              feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
                isDraw: false,
                isActive: true,
                isDrag: false,
                isHover: false
              }, properties);
            },
            otherHandler: function otherHandler(feature) {
              feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
                isDraw: false,
                isActive: false,
                isDrag: false
              });
            }
          });
        });
        this.setPointData(polygon.properties.nodes);
        this.setDashLineData([]);
        var texts = this.getAllTexts();
        this.setTextData(texts);
        return polygon;
      }
    }, {
      key: "onPointDragging",
      value: function onPointDragging(e) {
        var dragPoint = this.dragPoint;
        if (!dragPoint) {
          return;
        }
        var feature = this.handlePointDragging(dragPoint, getLngLat(e));
        var editPolygon = this.editPolygon;
        if (feature && editPolygon) {
          this.syncPolygonNodes(editPolygon, editPolygon.properties.nodes.map(function (node) {
            if (isSameFeature(node, feature)) {
              return feature;
            }
            return node;
          }));
          this.setActivePolygon(editPolygon);
        }
        return feature;
      }
    }, {
      key: "onSceneDragStart",
      value: function onSceneDragStart(e) {
        if (!this.isDragTrigger || !this.addable || this.dragPoint || this.editLine) {
          return;
        }
        this.scene.setMapStatus({
          dragEnable: false
        });
        this.handleFirstNodeCreate(this.handleCreatePoint(getPosition(e)));
      }
    }, {
      key: "onSceneDragEnd",
      value: function onSceneDragEnd(e) {
        if (!this.isDragTrigger || !this.addable || this.dragPoint || this.editLine || !this.drawPolygon) {
          return;
        }
        this.scene.setMapStatus({
          dragEnable: false
        });
        this.handleLastNodeCreate(this.handleCreatePoint(getPosition(e)));
      }
    }, {
      key: "onSceneMouseMove",
      value: function onSceneMouseMove(e) {
        var drawPolygon = this.drawPolygon;
        if (!drawPolygon) {
          return;
        }
        var nodes = drawPolygon.properties.nodes;
        var firstNode = first(nodes);
        var lastNode = last_1(nodes);
        lastNode.geometry.coordinates = getPosition(e);
        this.syncPolygonNodes(drawPolygon, [firstNode, lastNode]);
        this.setDashLineData([drawPolygon.properties.line]);
        this.setTextData(this.getAllTexts());
        this.resetCursor();
      }
    }]);
  }(PolygonMode);

  var CircleDrawer = /*#__PURE__*/function (_DragPolygonMode) {
    function CircleDrawer(scene, options) {
      var _this;
      _classCallCheck(this, CircleDrawer);
      _this = _callSuper(this, CircleDrawer, [scene, options]);
      _this.bindPointRenderEvent();
      _this.bindSceneEvent();
      _this.bindMidPointRenderEvent();
      _this.bindLineRenderEvent();
      _this.bindPolygonRenderEvent();
      return _this;
    }
    _inherits(CircleDrawer, _DragPolygonMode);
    return _createClass(CircleDrawer, [{
      key: "getDefaultOptions",
      value: function getDefaultOptions(options) {
        var newOptions = _objectSpread2(_objectSpread2({}, _get(_getPrototypeOf(CircleDrawer.prototype), "getDefaultOptions", this).call(this, options)), {}, {
          showMidPoint: false,
          circleSteps: 60
        });
        if (newOptions.distanceOptions) {
          newOptions.distanceOptions.showTotalDistance = true;
          if (newOptions.distanceOptions.showOnRadius === undefined) {
            newOptions.distanceOptions.showOnRadius = true;
          }
        }
        if (newOptions.helper) {
          newOptions.helper = _objectSpread2(_objectSpread2({}, newOptions.helper), DEFAULT_CIRCLE_HELPER_CONFIG);
        }
        return newOptions;
      }
    }, {
      key: "getDistanceTexts",
      value: function getDistanceTexts() {
        var distanceOptions = this.options.distanceOptions;
        if (!distanceOptions) {
          return [];
        }
        var textList = [];
        var showWhen = distanceOptions.showWhen,
          showDashDistance = distanceOptions.showDashDistance,
          format = distanceOptions.format,
          showTotalDistance = distanceOptions.showTotalDistance;
        textList.push.apply(textList, _toConsumableArray(this.getDashLineDistanceTexts(this.getDashLineData(), {
          showTotalDistance: true,
          format: format,
          showDashDistance: showDashDistance
        })).concat(_toConsumableArray(this.getLineDistanceTexts(this.getLineData(), {
          showTotalDistance: showTotalDistance,
          format: format,
          showWhen: showWhen
        }))));
        return textList;
      }
    }, {
      key: "setData",
      value: function setData(data) {
        var _this2 = this;
        var result = data.map(function (feature) {
          var _feature$properties, _nodes, _feature$properties2;
          feature.properties = _objectSpread2(_objectSpread2({}, getDefaultPolygonProperties()), feature.properties);
          var nodes = (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.nodes;
          if (((_nodes = nodes) === null || _nodes === void 0 ? void 0 : _nodes.length) !== 2) {
            var _center$geometry$coor = _slicedToArray(center(feature).geometry.coordinates, 2),
              lng1 = _center$geometry$coor[0],
              lat1 = _center$geometry$coor[1];
            var box = bbox(feature);
            var lng2 = box[2];
            var lat2 = (box[1] + box[3]) / 2;
            nodes = [createPointFeature([lng1, lat1]), createPointFeature([lng2, lat2])];
            feature.properties.nodes = nodes;
          }
          var startNode = nodes[0];
          var endNode = nodes[1];
          var isActive = !!((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.isActive);
          var line = feature.properties.line;
          if (!line) {
            line = _this2.handleCreatePolygonLine(startNode, endNode, {
              isActive: isActive
            });
            feature.properties.line = line;
          }
          return _this2.handleCreatePolygon([startNode, endNode], line, _objectSpread2(_objectSpread2({}, feature.properties), {}, {
            isActive: isActive
          }));
        });
        this.source.setData({
          point: [],
          midPoint: [],
          dashLine: [],
          polygon: result,
          line: result.map(function (feature) {
            return feature.properties.line;
          })
        });
        this.setTextData(this.getAllTexts());
        if (this.editPolygon) {
          this.setActivePolygon(this.editPolygon);
        }
      }
    }, {
      key: "handleCreatePolygonLine",
      value: function handleCreatePolygonLine(startNode, endNode) {
        var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var positions = this.getBoundaryPositions(startNode, endNode);
        var nodes = positions.map(function (position) {
          return createPointFeature(position);
        });
        return createLineFeature(nodes, properties);
      }
    }, {
      key: "syncPolygonNodes",
      value: function syncPolygonNodes(polygon, nodes) {
        var line = polygon.properties.line;
        var startNode = nodes[0];
        var endNode = nodes[1];
        var positions = this.getBoundaryPositions(startNode, endNode);
        polygon.properties.nodes = nodes;
        polygon.geometry.coordinates = [positions];
        this.setPolygonData(function (features) {
          return features.map(function (feature) {
            if (isSameFeature(feature, polygon)) {
              return polygon;
            }
            return feature;
          });
        });
        this.setPointData(polygon.properties.isDraw ? [nodes[0]] : nodes);
        line.properties.nodes.forEach(function (lineNode, index) {
          lineNode.geometry.coordinates = positions[index];
        });
        line.geometry.coordinates = positions;
        return polygon;
      }
    }, {
      key: "onLineDragging",
      value: function onLineDragging(e) {
        var dragPolygon = this.dragPolygon;
        var _this$previousPositio = _slicedToArray(this.previousPosition, 2),
          preLng = _this$previousPositio[0],
          preLat = _this$previousPositio[1];
        var feature = _get(_getPrototypeOf(CircleDrawer.prototype), "onLineDragging", this).call(this, e);
        if (dragPolygon) {
          var _getPosition = getPosition(e),
            _getPosition2 = _slicedToArray(_getPosition, 2),
            curLng = _getPosition2[0],
            curLat = _getPosition2[1];
          var nodes = dragPolygon.properties.nodes;
          nodes.forEach(function (node) {
            var _node$geometry$coordi = _slicedToArray(node.geometry.coordinates, 2),
              lng = _node$geometry$coordi[0],
              lat = _node$geometry$coordi[1];
            node.geometry.coordinates = [getPrecisionNumber(lng + curLng - preLng), getPrecisionNumber(lat + curLat - preLat)];
          });
          this.syncPolygonNodes(dragPolygon, dragPolygon.properties.nodes);
          this.setActivePolygon(dragPolygon, {
            isDrag: true
          });
          this.emit(exports.DrawEvent.Dragging, dragPolygon, this.getPolygonData());
        }
        return feature;
      }
    }, {
      key: "getBoundaryPositions",
      value: function getBoundaryPositions(startPoint, endPoint) {
        var steps = this.options.circleSteps;
        var dis = distance(startPoint, endPoint, {
          units: 'meters'
        });
        var positions = [];
        for (var i = 0; i < steps; i++) {
          positions.push(destination(startPoint, dis, i * -360 / steps, {
            units: 'meters'
          }).geometry.coordinates.map(function (item) {
            return getPrecisionNumber(item, 6);
          }));
        }
        positions.push(positions[0]);
        return positions;
      }
    }]);
  }(DragPolygonMode);

  var LineDrawer = /*#__PURE__*/function (_LineMode) {
    function LineDrawer(scene, options) {
      var _this;
      _classCallCheck(this, LineDrawer);
      _this = _callSuper(this, LineDrawer, [scene, options]);
      _this.drawLineFinish = function () {
        var _drawLine$properties$;
        var drawLine = _this.drawLine;
        var nodes = (_drawLine$properties$ = drawLine === null || drawLine === void 0 ? void 0 : drawLine.properties.nodes) !== null && _drawLine$properties$ !== void 0 ? _drawLine$properties$ : [];
        if (!drawLine || (nodes === null || nodes === void 0 ? void 0 : nodes.length) <= 1) {
          return;
        }
        _this.setActiveLine(drawLine);
        var _this$options = _this.options,
          autoActive = _this$options.autoActive,
          editable = _this$options.editable;
        if (!autoActive || !editable) {
          _this.handleLineUnClick(drawLine);
        }
        if (editable && autoActive) {
          _this.setHelper('pointHover');
        } else {
          _this.setHelper(_this.addable ? 'draw' : null);
        }
        _this.emit(exports.DrawEvent.Add, drawLine, _this.getLineData());
      };
      _this.sceneRender.on(exports.RenderEvent.DblClick, _this.drawLineFinish);
      _this.bindPointRenderEvent();
      _this.bindSceneEvent();
      _this.bindMidPointRenderEvent();
      _this.bindLineRenderEvent();
      return _this;
    }
    _inherits(LineDrawer, _LineMode);
    return _createClass(LineDrawer, [{
      key: "dragItem",
      get: function get() {
        return this.dragLine;
      }
    }, {
      key: "editItem",
      get: function get() {
        return this.editLine;
      }
    }, {
      key: "getMainLayer",
      value: function getMainLayer() {
        var _this$render$line$get, _this$render$line;
        return (_this$render$line$get = (_this$render$line = this.render.line) === null || _this$render$line === void 0 ? void 0 : _this$render$line.getLayers()) !== null && _this$render$line$get !== void 0 ? _this$render$line$get : [];
      }
    }, {
      key: "setData",
      value: function setData(lines) {
        var lineFeatures = splitMultiFeatures(lines).map(function (line) {
          var _line$properties, _line$properties$node;
          line.properties = _objectSpread2(_objectSpread2({}, getDefaultLineProperties()), (_line$properties = line.properties) !== null && _line$properties !== void 0 ? _line$properties : {});
          if (!((_line$properties$node = line.properties.nodes) === null || _line$properties$node === void 0 ? void 0 : _line$properties$node.length)) {
            line.properties.nodes = coordAll(line).map(function (position) {
              return createPointFeature(position);
            });
          }
          return line;
        });
        this.source.setData({
          point: [],
          midPoint: [],
          dashLine: [],
          line: lineFeatures
        });
        this.setTextData(this.getAllTexts());
        if (this.editLine) {
          this.setActiveLine(this.editLine);
        }
      }
    }, {
      key: "getData",
      value: function getData() {
        var getOriginData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var lines = this.getLineData();
        if (getOriginData) {
          return lines;
        }
        return joinMultiFeatures(lines);
      }
    }, {
      key: "getRenderTypes",
      value: function getRenderTypes() {
        return ['line', 'dashLine', 'midPoint', 'point', 'text'];
      }
    }, {
      key: "bindPointRenderEvent",
      value: function bindPointRenderEvent() {
        var _this$pointRender;
        _get(_getPrototypeOf(LineDrawer.prototype), "bindPointRenderEvent", this).call(this);
        (_this$pointRender = this.pointRender) === null || _this$pointRender === void 0 ? void 0 : _this$pointRender.on(exports.RenderEvent.Contextmenu, this.onPointContextMenu.bind(this));
      }
    }, {
      key: "onPointClick",
      value: function onPointClick(e) {
        var _drawLine$properties$2,
          _this2 = this;
        var drawLine = this.drawLine;
        var nodes = (_drawLine$properties$2 = drawLine === null || drawLine === void 0 ? void 0 : drawLine.properties.nodes) !== null && _drawLine$properties$2 !== void 0 ? _drawLine$properties$2 : [];
        var feature = e.feature;
        if (isSameFeature(feature, last_1(nodes))) {
          requestAnimationFrame(function () {
            _this2.drawLineFinish();
          });
        } else {
          var _feature$geometry$coo = _slicedToArray(feature.geometry.coordinates, 2),
            lng = _feature$geometry$coo[0],
            lat = _feature$geometry$coo[1];
          e.lngLat = {
            lng: lng,
            lat: lat
          };
          this.onPointCreate(e);
        }
      }
    }, {
      key: "removeNode",
      value: function removeNode(node, feature) {
        var _targetFeature$proper;
        var targetFeature = this.getTargetFeature(feature);
        var targetNode = this.getTargetFeature(node, (_targetFeature$proper = targetFeature === null || targetFeature === void 0 ? void 0 : targetFeature.properties.nodes) !== null && _targetFeature$proper !== void 0 ? _targetFeature$proper : []);
        if (targetFeature && targetNode) {
          var _targetFeature$proper2;
          var nodes = (_targetFeature$proper2 = targetFeature === null || targetFeature === void 0 ? void 0 : targetFeature.properties.nodes) !== null && _targetFeature$proper2 !== void 0 ? _targetFeature$proper2 : [];
          if (nodes.length < 3) {
            return;
          }
          this.syncLineNodes(targetFeature, nodes.filter(function (node) {
            return !isSameFeature(targetNode, node);
          }));
          this.emit(exports.DrawEvent.RemoveNode, targetNode, targetFeature, this.getLineData());
          this.emit(exports.DrawEvent.Edit, targetFeature, this.getLineData());
        }
      }
    }, {
      key: "onPointContextMenu",
      value: function onPointContextMenu(e) {
        var _editLine$properties$;
        var editLine = this.editLine;
        var deleteNode = e.feature;
        var nodes = (_editLine$properties$ = editLine === null || editLine === void 0 ? void 0 : editLine.properties.nodes) !== null && _editLine$properties$ !== void 0 ? _editLine$properties$ : [];
        if (!editLine || nodes.length < 3) {
          return;
        }
        this.removeNode(deleteNode, editLine);
        this.scene.setMapStatus({
          dragEnable: true
        });
        return deleteNode;
      }
    }, {
      key: "onPointCreate",
      value: function onPointCreate(e) {
        if (!this.addable) {
          return;
        }
        var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onPointCreate", this).call(this, e);
        if (feature) {
          this.setHelper('drawFinish');
          this.emit(exports.DrawEvent.AddNode, feature, this.drawLine, this.getLineData());
        }
        return feature;
      }
    }, {
      key: "onPointDragEnd",
      value: function onPointDragEnd(e) {
        var editLine = this.editLine;
        var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onPointDragEnd", this).call(this, e);
        if (editLine && feature) {
          this.emit(exports.DrawEvent.Edit, editLine, this.getLineData());
        }
        return feature;
      }
    }, {
      key: "onLineDragStart",
      value: function onLineDragStart(e) {
        var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onLineDragStart", this).call(this, e);
        if (feature) {
          this.emit(exports.DrawEvent.DragStart, feature, this.getLineData());
        }
        return feature;
      }
    }, {
      key: "onLineDragging",
      value: function onLineDragging(e) {
        var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onLineDragging", this).call(this, e);
        if (feature) {
          this.emit(exports.DrawEvent.Dragging, feature, this.getLineData());
        }
        return feature;
      }
    }, {
      key: "onLineDragEnd",
      value: function onLineDragEnd(e) {
        var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onLineDragEnd", this).call(this, e);
        if (feature) {
          this.emit(exports.DrawEvent.DragEnd, feature, this.getLineData());
          this.emit(exports.DrawEvent.Edit, feature, this.getLineData());
        }
        return feature;
      }
    }, {
      key: "onMidPointClick",
      value: function onMidPointClick(e) {
        var editLine = this.editLine;
        var feature = _get(_getPrototypeOf(LineDrawer.prototype), "onMidPointClick", this).call(this, e);
        if (editLine && feature) {
          this.emit(exports.DrawEvent.Edit, editLine, this.getLineData());
          this.emit(exports.DrawEvent.AddNode, feature, editLine, this.getLineData());
        }
        return feature;
      }
    }, {
      key: "onSceneMouseMove",
      value: function onSceneMouseMove(e) {
        var drawLine = this.drawLine;
        if (!drawLine) {
          return;
        }
        var lastNode = last_1(drawLine.properties.nodes);
        var mousePosition = getPosition(e);
        if (this.options.adsorbOptions) {
          var _this$getAdsorbPositi;
          mousePosition = (_this$getAdsorbPositi = this.getAdsorbPosition(mousePosition)) !== null && _this$getAdsorbPositi !== void 0 ? _this$getAdsorbPositi : mousePosition;
        }
        this.setDashLineData([createDashLine([mousePosition, lastNode.geometry.coordinates])]);
        this.setTextData(this.getAllTexts());
      }
    }, {
      key: "onSceneDragEnd",
      value: function onSceneDragEnd(e) {
        if (!this.isDragTrigger || !this.addable || !this.drawLine) {
          return;
        }
        this.drawLineFinish();
      }
    }, {
      key: "setActiveFeature",
      value: function setActiveFeature(target) {
        var targetFeature = this.getTargetFeature(target);
        if (targetFeature) {
          this.setActiveLine(targetFeature);
        } else {
          this.clearActiveLine();
        }
      }
    }, {
      key: "resetFeatures",
      value: function resetFeatures() {
        var features = this.getLineData();
        if (this.drawLine) {
          features = features.filter(function (feature) {
            return !feature.properties.isDraw;
          });
          this.source.setData({
            point: [],
            dashLine: [],
            midPoint: []
          });
          this.setTextData(function (features) {
            return features.filter(function (feature) {
              return !feature.properties.isActive;
            });
          });
        }
        if (this.editLine) {
          this.handleLineUnClick(this.editLine);
        }
        this.setLineData(features.map(function (feature) {
          feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
            isDrag: false,
            isActive: false,
            isHover: false
          });
          return feature;
        }));
      }
    }, {
      key: "enablePointRenderAction",
      value: function enablePointRenderAction() {
        _get(_getPrototypeOf(LineDrawer.prototype), "enablePointRenderAction", this).call(this);
        if (this.options.editable) {
          var _this$pointRender2;
          (_this$pointRender2 = this.pointRender) === null || _this$pointRender2 === void 0 ? void 0 : _this$pointRender2.enableContextMenu();
        }
      }
    }, {
      key: "disablePointRenderAction",
      value: function disablePointRenderAction() {
        var _this$pointRender3;
        _get(_getPrototypeOf(LineDrawer.prototype), "disablePointRenderAction", this).call(this);
        (_this$pointRender3 = this.pointRender) === null || _this$pointRender3 === void 0 ? void 0 : _this$pointRender3.disableContextMenu();
      }
    }, {
      key: "bindEnableEvent",
      value: function bindEnableEvent() {
        _get(_getPrototypeOf(LineDrawer.prototype), "bindEnableEvent", this).call(this);
        this.enableSceneRenderAction();
        this.enablePointRenderAction();
        this.enableLineRenderAction();
        this.enableMidPointRenderAction();
        this.sceneRender.enableDblClick();
      }
    }, {
      key: "unbindEnableEvent",
      value: function unbindEnableEvent() {
        _get(_getPrototypeOf(LineDrawer.prototype), "unbindEnableEvent", this).call(this);
        this.disableSceneRenderAction();
        this.disablePointRenderAction();
        this.disableLineRenderAction();
        this.disableMidPointRenderAction();
        this.sceneRender.disableDblClick();
      }
    }, {
      key: "bindThis",
      value: function bindThis() {
        _get(_getPrototypeOf(LineDrawer.prototype), "bindThis", this).call(this);
        this.bindPointRenderEvent = this.bindPointRenderEvent.bind(this);
        this.bindSceneEvent = this.bindSceneEvent.bind(this);
        this.bindLineRenderEvent = this.bindLineRenderEvent.bind(this);
        this.bindMidPointRenderEvent = this.bindMidPointRenderEvent.bind(this);
      }
    }]);
  }(LineMode);

  var PointDrawer = /*#__PURE__*/function (_PointMode) {
    function PointDrawer(scene, options) {
      var _this;
      _classCallCheck(this, PointDrawer);
      _this = _callSuper(this, PointDrawer, [scene, options]);
      _this.bindPointRenderEvent();
      return _this;
    }
    _inherits(PointDrawer, _PointMode);
    return _createClass(PointDrawer, [{
      key: "dragItem",
      get: function get() {
        return this.dragPoint;
      }
    }, {
      key: "editItem",
      get: function get() {
        return this.editPoint;
      }
    }, {
      key: "getDefaultOptions",
      value: function getDefaultOptions(options) {
        var defaultOptions = _objectSpread2(_objectSpread2({}, this.getCommonOptions(options)), {}, {
          helper: cloneDeep_1(DEFAULT_POINT_HELPER_CONFIG),
          initialData: options.initialData
        });
        defaultOptions.style.point = DEFAULT_POINT_STYLE;
        return defaultOptions;
      }
    }, {
      key: "bindEnableEvent",
      value: function bindEnableEvent() {
        _get(_getPrototypeOf(PointDrawer.prototype), "bindEnableEvent", this).call(this);
        this.enablePointRenderAction();
      }
    }, {
      key: "unbindEnableEvent",
      value: function unbindEnableEvent() {
        _get(_getPrototypeOf(PointDrawer.prototype), "unbindEnableEvent", this).call(this);
        this.disablePointRenderAction();
      }
    }, {
      key: "getRenderTypes",
      value: function getRenderTypes() {
        return ['point'];
      }
    }, {
      key: "getMainLayer",
      value: function getMainLayer() {
        var _this$render$point$ge, _this$render$point;
        return (_this$render$point$ge = (_this$render$point = this.render.point) === null || _this$render$point === void 0 ? void 0 : _this$render$point.getLayers()) !== null && _this$render$point$ge !== void 0 ? _this$render$point$ge : [];
      }
    }, {
      key: "setData",
      value: function setData(points) {
        this.setPointData(splitMultiFeatures(points).map(function (point) {
          point.properties = _objectSpread2(_objectSpread2({}, getDefaultPointProperties()), point.properties);
          return point;
        }));
      }
    }, {
      key: "getData",
      value: function getData() {
        var getOriginData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var points = this.getPointData();
        if (getOriginData) {
          return points;
        }
        return joinMultiFeatures(points);
      }
    }, {
      key: "onPointCreate",
      value: function onPointCreate(e) {
        if (!this.addable) {
          this.setPointData(function (features) {
            return features.map(function (feature) {
              feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
                isHover: false,
                isActive: false
              });
              return feature;
            });
          });
          return;
        }
        var newFeature = _get(_getPrototypeOf(PointDrawer.prototype), "onPointCreate", this).call(this, e);
        if (!newFeature) {
          return;
        }
        if (this.options.editable) {
          this.setHelper('pointHover');
        }
        this.emit(exports.DrawEvent.Add, newFeature, this.getData());
        return newFeature;
      }
    }, {
      key: "onPointMouseMove",
      value: function onPointMouseMove(e) {
        var feature = _get(_getPrototypeOf(PointDrawer.prototype), "onPointMouseMove", this).call(this, e);
        if (this.options.editable && !this.dragPoint) {
          this.setHelper('pointHover');
        }
        return feature;
      }
    }, {
      key: "onPointMouseOut",
      value: function onPointMouseOut(e) {
        var feature = _get(_getPrototypeOf(PointDrawer.prototype), "onPointMouseOut", this).call(this, e);
        this.setHelper(this.addable ? 'draw' : null);
        return feature;
      }
    }, {
      key: "onPointDragStart",
      value: function onPointDragStart(e) {
        var dragPoint = _get(_getPrototypeOf(PointDrawer.prototype), "onPointDragStart", this).call(this, e);
        this.setHelper('pointDrag');
        this.emit(exports.DrawEvent.DragStart, dragPoint, this.getData());
        return dragPoint;
      }
    }, {
      key: "onPointDragging",
      value: function onPointDragging(e) {
        var dragPoint = _get(_getPrototypeOf(PointDrawer.prototype), "onPointDragging", this).call(this, e);
        if (dragPoint && this.options.editable) {
          this.emit(exports.DrawEvent.Dragging, dragPoint, this.getData());
        }
        return dragPoint;
      }
    }, {
      key: "onPointDragEnd",
      value: function onPointDragEnd(e) {
        var dragPoint = _get(_getPrototypeOf(PointDrawer.prototype), "onPointDragEnd", this).call(this, e);
        if (dragPoint && this.options.editable) {
          this.setHelper('pointHover');
          this.emit(exports.DrawEvent.DragEnd, dragPoint, this.getData());
          this.emit(exports.DrawEvent.Edit, dragPoint, this.getData());
        }
        return dragPoint;
      }
    }, {
      key: "bindThis",
      value: function bindThis() {
        _get(_getPrototypeOf(PointDrawer.prototype), "bindThis", this).call(this);
        this.bindPointRenderEvent = this.bindPointRenderEvent.bind(this);
      }
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
    }, {
      key: "onSceneMouseMove",
      value: function onSceneMouseMove(e) {}
    }, {
      key: "setActiveFeature",
      value: function setActiveFeature(target) {
        var targetFeature = this.getTargetFeature(target);
        this.setPointData(function (oldData) {
          return oldData.map(function (feature) {
            feature.properties.isActive = isSameFeature(targetFeature, feature);
            return feature;
          });
        });
      }
    }, {
      key: "resetFeatures",
      value: function resetFeatures() {
        this.setPointData(function (features) {
          return features.map(function (feature) {
            feature.properties = _objectSpread2(_objectSpread2({}, feature.properties), {}, {
              isDrag: false,
              isActive: false,
              isHover: false
            });
            return feature;
          });
        });
      }
    }]);
  }(PointMode);

  var PolygonDrawer = /*#__PURE__*/function (_PolygonMode) {
    function PolygonDrawer(scene, options) {
      var _this;
      _classCallCheck(this, PolygonDrawer);
      _this = _callSuper(this, PolygonDrawer, [scene, options]);
      _this.drawPolygonFinish = function () {
        var _drawPolygon$properti;
        var drawPolygon = _this.drawPolygon;
        var nodes = (_drawPolygon$properti = drawPolygon === null || drawPolygon === void 0 ? void 0 : drawPolygon.properties.nodes) !== null && _drawPolygon$properti !== void 0 ? _drawPolygon$properti : [];
        if (!drawPolygon || nodes.length < 3) {
          return;
        }
        drawPolygon.properties.isDraw = false;
        _this.syncPolygonNodes(drawPolygon, nodes);
        _this.setActivePolygon(drawPolygon);
        var _this$options = _this.options,
          autoActive = _this$options.autoActive,
          editable = _this$options.editable;
        if (!autoActive || !editable) {
          _this.handlePolygonUnClick(drawPolygon);
        }
        if (editable) {
          _this.setHelper(autoActive ? 'pointHover' : 'polygonHover');
        } else {
          _this.setHelper(_this.addable ? 'draw' : null);
        }
        _this.emit(exports.DrawEvent.Add, drawPolygon, _this.getPolygonData());
      };
      _this.sceneRender.on(exports.RenderEvent.DblClick, _this.drawPolygonFinish);
      _this.bindPointRenderEvent();
      _this.bindSceneEvent();
      _this.bindMidPointRenderEvent();
      _this.bindLineRenderEvent();
      _this.bindPolygonRenderEvent();
      return _this;
    }
    _inherits(PolygonDrawer, _PolygonMode);
    return _createClass(PolygonDrawer, [{
      key: "getDefaultOptions",
      value: function getDefaultOptions(options) {
        return _objectSpread2(_objectSpread2({}, _get(_getPrototypeOf(PolygonDrawer.prototype), "getDefaultOptions", this).call(this, options)), {}, {
          liveUpdate: false
        });
      }
    }, {
      key: "setData",
      value: function setData(data) {
        var polygonFeatures = splitMultiFeatures(data).map(function (polygon) {
          var _polygon$properties, _polygon$properties$n;
          polygon.properties = _objectSpread2(_objectSpread2({}, getDefaultPolygonProperties()), (_polygon$properties = polygon.properties) !== null && _polygon$properties !== void 0 ? _polygon$properties : {});
          if (!((_polygon$properties$n = polygon.properties.nodes) === null || _polygon$properties$n === void 0 ? void 0 : _polygon$properties$n.length)) {
            var positions = coordAll(polygon);
            positions = positions.slice(0, positions.length - 1);
            polygon.properties.nodes = positions.map(function (position) {
              return createPointFeature(position);
            });
          }
          if (!polygon.properties.line) {
            var nodes = polygon.properties.nodes;
            polygon.properties.line = createLineFeature([].concat(_toConsumableArray(nodes), [createPointFeature(first(nodes).geometry.coordinates)]));
          }
          return polygon;
        });
        this.source.setData({
          point: [],
          midPoint: [],
          dashLine: [],
          polygon: polygonFeatures,
          line: polygonFeatures.map(function (feature) {
            return feature.properties.line;
          })
        });
        this.setTextData(this.getAllTexts());
        if (this.editPolygon) {
          this.setActivePolygon(this.editPolygon);
        }
      }
    }, {
      key: "onPointCreate",
      value: function onPointCreate(e) {
        if (!this.addable || this.dragPoint) {
          return;
        }
        var feature = _get(_getPrototypeOf(PolygonDrawer.prototype), "onPointCreate", this).call(this, e);
        var drawPolygon = this.drawPolygon;
        var drawLine = this.drawLine;
        if (feature) {
          if (drawPolygon) {
            this.syncPolygonNodes(drawPolygon, [].concat(_toConsumableArray(drawPolygon.properties.nodes), [feature]));
            this.setDashLineData([createDashLine([getPosition(e), drawPolygon.properties.nodes[0].geometry.coordinates])]);
            var nodeLength = drawPolygon.properties.nodes.length;
            if (nodeLength > 1) {
              this.setHelper('drawFinish');
            }
          } else if (drawLine) {
            this.handleCreatePolygon([feature], drawLine);
            this.setHelper('drawContinue');
          }
          this.emit(exports.DrawEvent.AddNode, feature, drawPolygon, this.getPolygonData());
        }
        return feature;
      }
    }, {
      key: "onPointClick",
      value: function onPointClick(e) {
        var _this2 = this;
        var drawPolygon = this.drawPolygon;
        var feature = e.feature;
        if (!drawPolygon) {
          return;
        }
        var nodes = drawPolygon.properties.nodes;
        if (nodes.length >= 3 && (isSameFeature(first(nodes), feature) || isSameFeature(last_1(nodes), feature))) {
          requestAnimationFrame(function () {
            _this2.drawPolygonFinish();
          });
        } else {
          var _feature$geometry$coo = _slicedToArray(feature.geometry.coordinates, 2),
            lng = _feature$geometry$coo[0],
            lat = _feature$geometry$coo[1];
          e.lngLat = {
            lng: lng,
            lat: lat
          };
          this.onPointCreate(e);
        }
      }
    }, {
      key: "onPointDragging",
      value: function onPointDragging(e) {
        var feature = this.dragPoint;
        var editPolygon = this.editPolygon;
        if (feature && editPolygon) {
          var line = editPolygon.properties.line;
          line.properties.nodes = line.properties.nodes.map(function (node) {
            return isSameFeature(node, feature) ? feature : node;
          });
          var lineNodes = line.properties.nodes;
          var nodes = lineNodes.slice(0, lineNodes.length - 1);
          var firstLineNode = first(lineNodes);
          var lastLineNode = last_1(lineNodes);
          var isSame = isSameFeature(firstLineNode, feature) || isSameFeature(lastLineNode, feature);
          if (isSame) {
            firstLineNode.geometry.coordinates = lastLineNode.geometry.coordinates = getPosition(e);
          }
          if (this.options.adsorbOptions && isSame) {
            var adsorbPosition = this.resetAdsorbLngLat(e);
            if (adsorbPosition) {
              firstLineNode.geometry.coordinates = lastLineNode.geometry.coordinates = adsorbPosition;
            }
          }
          _get(_getPrototypeOf(PolygonDrawer.prototype), "onPointDragging", this).call(this, e);
          this.syncPolygonNodes(editPolygon, nodes);
          this.setActivePolygon(editPolygon);
        }
        return feature;
      }
    }, {
      key: "onLineDragging",
      value: function onLineDragging(e) {
        var dragPolygon = this.dragPolygon;
        var feature = _get(_getPrototypeOf(PolygonDrawer.prototype), "onLineDragging", this).call(this, e);
        if (feature && dragPolygon) {
          var lineNodes = feature.properties.nodes;
          this.syncPolygonNodes(dragPolygon, lineNodes.slice(0, lineNodes.length - 1));
          this.emit(exports.DrawEvent.Dragging, dragPolygon, this.getPolygonData());
        }
        return feature;
      }
    }, {
      key: "onMidPointClick",
      value: function onMidPointClick(e) {
        var feature = _get(_getPrototypeOf(PolygonDrawer.prototype), "onMidPointClick", this).call(this, e);
        var editPolygon = this.editPolygon;
        if (feature && editPolygon) {
          this.emit(exports.DrawEvent.Edit, editPolygon, this.getPolygonData());
          this.emit(exports.DrawEvent.AddNode, feature, editPolygon, this.getPolygonData());
        }
        return feature;
      }
    }, {
      key: "onSceneMouseMove",
      value: function onSceneMouseMove(e) {
        var _drawPolygon$properti2;
        var drawPolygon = this.drawPolygon;
        var nodes = (_drawPolygon$properti2 = drawPolygon === null || drawPolygon === void 0 ? void 0 : drawPolygon.properties.nodes) !== null && _drawPolygon$properti2 !== void 0 ? _drawPolygon$properti2 : [];
        if (!drawPolygon || !nodes.length) {
          return;
        }
        if (this.options.adsorbOptions) {
          this.resetAdsorbLngLat(e);
        }
        var mousePosition = getPosition(e);
        var dashLineData = [];
        dashLineData.push(createDashLine([mousePosition, first(nodes).geometry.coordinates]));
        if (nodes.length > 1) {
          dashLineData.push(createDashLine([mousePosition, last_1(nodes).geometry.coordinates]));
        }
        if (this.options.liveUpdate && nodes.length >= 2) {
          var nodePositions = coordAll(featureCollection(nodes));
          drawPolygon.geometry.coordinates = [[].concat(_toConsumableArray(nodePositions), [mousePosition, nodePositions[0]])];
          this.setPolygonData(this.getPolygonData());
        }
        this.setDashLineData(dashLineData);
        this.setTextData(this.getAllTexts());
      }
    }, {
      key: "onSceneDragEnd",
      value: function onSceneDragEnd(e) {
        if (!this.isDragTrigger || !this.addable || !this.drawLine) {
          return;
        }
        this.drawPolygonFinish();
      }
    }, {
      key: "removeNode",
      value: function removeNode(node, feature) {
        var _targetFeature$proper;
        var targetFeature = this.getTargetFeature(feature);
        var targetNode = this.getTargetFeature(node, (_targetFeature$proper = targetFeature === null || targetFeature === void 0 ? void 0 : targetFeature.properties.nodes) !== null && _targetFeature$proper !== void 0 ? _targetFeature$proper : []);
        if (targetFeature && targetNode) {
          var _targetFeature$proper2;
          var nodes = (_targetFeature$proper2 = targetFeature === null || targetFeature === void 0 ? void 0 : targetFeature.properties.nodes) !== null && _targetFeature$proper2 !== void 0 ? _targetFeature$proper2 : [];
          if (nodes.length < 4) {
            return;
          }
          this.syncPolygonNodes(targetFeature, nodes.filter(function (node) {
            return !isSameFeature(targetNode, node);
          }));
          this.emit(exports.DrawEvent.RemoveNode, targetNode, targetFeature, this.getLineData());
          this.emit(exports.DrawEvent.Edit, targetFeature, this.getPolygonData());
        }
      }
    }, {
      key: "onPointContextMenu",
      value: function onPointContextMenu(e) {
        var _editPolygon$properti;
        var editPolygon = this.editPolygon;
        var deleteNode = e.feature;
        var nodes = (_editPolygon$properti = editPolygon === null || editPolygon === void 0 ? void 0 : editPolygon.properties.nodes) !== null && _editPolygon$properti !== void 0 ? _editPolygon$properti : [];
        if (!editPolygon || nodes.length < 4) {
          return;
        }
        if (!nodes.find(function (node) {
          return isSameFeature(node, deleteNode);
        })) {
          deleteNode = nodes[0];
        }
        this.removeNode(deleteNode, editPolygon);
        return deleteNode;
      }
    }, {
      key: "bindPointRenderEvent",
      value: function bindPointRenderEvent() {
        var _this$pointRender;
        _get(_getPrototypeOf(PolygonDrawer.prototype), "bindPointRenderEvent", this).call(this);
        (_this$pointRender = this.pointRender) === null || _this$pointRender === void 0 ? void 0 : _this$pointRender.on(exports.RenderEvent.Contextmenu, this.onPointContextMenu.bind(this));
      }
    }, {
      key: "enablePointRenderAction",
      value: function enablePointRenderAction() {
        _get(_getPrototypeOf(PolygonDrawer.prototype), "enablePointRenderAction", this).call(this);
        if (this.options.editable) {
          var _this$pointRender2;
          (_this$pointRender2 = this.pointRender) === null || _this$pointRender2 === void 0 ? void 0 : _this$pointRender2.enableContextMenu();
        }
      }
    }, {
      key: "disablePointRenderAction",
      value: function disablePointRenderAction() {
        var _this$pointRender3;
        _get(_getPrototypeOf(PolygonDrawer.prototype), "disablePointRenderAction", this).call(this);
        (_this$pointRender3 = this.pointRender) === null || _this$pointRender3 === void 0 ? void 0 : _this$pointRender3.disableContextMenu();
      }
    }]);
  }(PolygonMode);

  var RectDrawer = /*#__PURE__*/function (_DragPolygonMode) {
    function RectDrawer(scene, options) {
      var _this;
      _classCallCheck(this, RectDrawer);
      _this = _callSuper(this, RectDrawer, [scene, options]);
      _this.bindPointRenderEvent();
      _this.bindSceneEvent();
      _this.bindMidPointRenderEvent();
      _this.bindLineRenderEvent();
      _this.bindPolygonRenderEvent();
      return _this;
    }
    _inherits(RectDrawer, _DragPolygonMode);
    return _createClass(RectDrawer, [{
      key: "getDefaultOptions",
      value: function getDefaultOptions(options) {
        var newOptions = _get(_getPrototypeOf(RectDrawer.prototype), "getDefaultOptions", this).call(this, options);
        if (newOptions.helper) {
          newOptions.helper = _objectSpread2(_objectSpread2({}, newOptions.helper), DEFAULT_RECT_HELPER_CONFIG);
        }
        return newOptions;
      }
    }, {
      key: "setData",
      value: function setData(data) {
        var _this2 = this;
        var result = data.map(function (feature) {
          var _feature$properties, _nodes, _feature$properties2;
          feature.properties = _objectSpread2(_objectSpread2({}, getDefaultPolygonProperties()), (_feature$properties = feature.properties) !== null && _feature$properties !== void 0 ? _feature$properties : {});
          var nodes = feature.properties.nodes;
          if (((_nodes = nodes) === null || _nodes === void 0 ? void 0 : _nodes.length) !== 2) {
            var _bbox = bbox(feature),
              _bbox2 = _slicedToArray(_bbox, 4),
              lng1 = _bbox2[0],
              lat1 = _bbox2[1],
              lng2 = _bbox2[2],
              lat2 = _bbox2[3];
            nodes = [createPointFeature([lng1, lat1]), createPointFeature([lng2, lat2])];
            feature.properties.nodes = nodes;
          }
          var _nodes2 = nodes,
            _nodes3 = _slicedToArray(_nodes2, 2),
            startNode = _nodes3[0],
            endNode = _nodes3[1];
          var isActive = !!((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.isActive);
          var line = feature.properties.line;
          if (!line) {
            line = _this2.handleCreatePolygonLine(startNode, endNode, {
              isActive: isActive
            });
            feature.properties.line = line;
          }
          return _this2.handleCreatePolygon([startNode, endNode], line, _objectSpread2(_objectSpread2({}, feature.properties), {}, {
            isActive: isActive
          }));
        });
        this.source.setData({
          point: [],
          midPoint: [],
          dashLine: [],
          polygon: result,
          line: result.map(function (feature) {
            return feature.properties.line;
          })
        });
        this.setTextData(this.getAllTexts());
        if (this.editPolygon) {
          this.setActivePolygon(this.editPolygon);
        }
      }
    }, {
      key: "handleCreatePolygonLine",
      value: function handleCreatePolygonLine(startNode, endNode) {
        var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        var positions = coordAll(envelope(featureCollection([startNode, endNode])));
        var nodes = positions.map(function (position, index) {
          if (index === 0) {
            return startNode;
          }
          if (index === 2) {
            return endNode;
          }
          return createPointFeature(position);
        });
        return createLineFeature(nodes, properties);
      }
    }, {
      key: "syncPolygonNodes",
      value: function syncPolygonNodes(polygon, nodes) {
        var line = polygon.properties.line;
        var positions = coordAll(envelope(featureCollection(nodes)));
        polygon.properties.nodes = nodes;
        polygon.geometry.coordinates = [positions];
        this.setPolygonData(function (features) {
          return features.map(function (feature) {
            if (isSameFeature(feature, polygon)) {
              return polygon;
            }
            return feature;
          });
        });
        this.setPointData(polygon.properties.isDraw ? [nodes[0]] : nodes);
        var lineNodes = line.properties.nodes;
        var otherPositions = positions.filter(function (position) {
          return !isEqual_1(position, nodes[0].geometry.coordinates) && !isEqual_1(position, nodes[1].geometry.coordinates);
        });
        lineNodes.forEach(function (lineNode, index) {
          var position = [0, 0];
          switch (index) {
            case 0:
              position = nodes[0].geometry.coordinates;
              break;
            case 1:
              position = otherPositions[0];
              break;
            case 2:
              position = nodes[1].geometry.coordinates;
              break;
            case 3:
              position = otherPositions[1];
              break;
            case 4:
              position = cloneDeep_1(nodes[0].geometry.coordinates);
              break;
          }
          lineNode.geometry.coordinates = position;
        });
        line.geometry.coordinates = positions;
        return polygon;
      }
    }, {
      key: "onLineDragging",
      value: function onLineDragging(e) {
        var feature = _get(_getPrototypeOf(RectDrawer.prototype), "onLineDragging", this).call(this, e);
        var dragPolygon = this.dragPolygon;
        if (feature && dragPolygon) {
          var lineNodes = dragPolygon.properties.line.properties.nodes;
          this.syncPolygonNodes(dragPolygon, [lineNodes[0], lineNodes[2]]);
          this.setActivePolygon(dragPolygon, {
            isDrag: true
          });
          this.emit(exports.DrawEvent.Dragging, dragPolygon, this.getPolygonData());
        }
        return feature;
      }
    }]);
  }(DragPolygonMode);

  /**
   * 遍历当前结点 dom 的本身及其所有父节点，直到找到对应
   * @param dom
   * @param className
   * @returns
   */
  var getParentByClassName = function getParentByClassName(dom, className) {
    var currentDom = dom;
    while (currentDom && !Array.from(currentDom.classList).includes(className)) {
      currentDom = currentDom.parentElement;
    }
    return currentDom;
  };

  var DrawTypeList = ['point', 'line', 'polygon', 'rect', 'circle', 'clear'];
  var DrawIconMap = {
    point: '#l7draw-point',
    line: '#l7draw-line',
    polygon: '#l7draw-polygon',
    rect: '#l7draw-rect',
    circle: '#l7draw-circle',
    clear: '#l7draw-qingkong'
  };
  var DrawInstanceMap = {
    point: PointDrawer,
    line: LineDrawer,
    polygon: PolygonDrawer,
    rect: RectDrawer,
    circle: CircleDrawer
  };
  var DrawTypeAttrName = 'data-draw-type';
  var DrawControlClassName = 'l7-draw-control';
  var DrawBtnClassName = "".concat(DrawControlClassName, "__btn");
  var DrawBtnActiveClassName = "".concat(DrawBtnClassName, "--active");

  !function (t) {
    var e,
      _a,
      n,
      c,
      o,
      i = '<svg><symbol id="l7draw-qingkong" viewBox="0 0 1024 1024"><path d="M778.96777344 334.02148437h-148.31542969V284.58300781A71.78466797 71.78466797 0 0 0 556.49462891 215.36914062H467.50537109a71.78466797 71.78466797 0 0 0-74.15771484 69.11499024V334.02148437h-148.31542969a29.66308594 29.66308594 0 1 0 0 59.32617188h29.66308594v326.29394531A88.98925781 88.98925781 0 0 0 363.68457031 808.63085938h296.63085938a88.98925781 88.98925781 0 0 0 88.98925781-88.98925782V393.34765625h29.66308594a29.66308594 29.66308594 0 0 0 0-59.32617188zM452.67382812 284.58300781c0-4.74609375 6.22924805-9.78881836 14.83154297-9.78881836h88.98925782c8.60229492 0 14.83154297 5.04272461 14.83154296 9.78881836V334.02148437H452.67382812V284.53356934z m237.30468751 435.10803223a29.66308594 29.66308594 0 0 1-29.66308594 29.66308593H363.68457031a29.66308594 29.66308594 0 0 1-29.66308593-29.66308594V393.34765625h355.95703124v326.29394531z"  ></path><path d="M437.84228516 660.31542969c6.57531739 0 12.85400391-3.46069336 17.5012207-9.64050294A39.20471192 39.20471192 0 0 0 462.56152344 627.33996582V495.5369873a39.20471192 39.20471192 0 0 0-7.21801758-23.33496093A22.09899903 22.09899903 0 0 0 437.84228516 462.56152344c-6.57531739 0-12.85400391 3.46069336-17.50122071 9.64050293A39.20471192 39.20471192 0 0 0 413.12304687 495.5369873v131.80297853c0 8.75061036 2.62023926 17.15515137 7.21801758 23.33496092 4.6472168 6.17980958 10.92590333 9.64050293 17.50122071 9.64050294zM586.15771484 660.31542969c6.57531739 0 12.85400391-3.46069336 17.50122071-9.64050294a39.20471192 39.20471192 0 0 0 7.21801758-23.33496093V495.5369873a39.20471192 39.20471192 0 0 0-7.21801758-23.33496093A22.09899903 22.09899903 0 0 0 586.15771484 462.56152344c-6.57531739 0-12.85400391 3.46069336-17.5012207 9.64050293A39.20471192 39.20471192 0 0 0 561.43847656 495.5369873v131.80297853c0 8.75061036 2.62023926 17.15515137 7.21801758 23.33496092 4.6472168 6.17980958 10.92590333 9.64050293 17.5012207 9.64050294z"  ></path></symbol><symbol id="l7draw-rect" viewBox="0 0 1024 1024"><path d="M736.14 648.79V330c0-23.16-18.84-42-42-42H375.49c-11.07-19.13-31.74-32.01-55.43-32.01-35.35 0-64.01 28.66-64.01 64.01 0 23.69 12.88 44.36 32.01 55.43v318.8c0 23.16 18.84 42 42 42H648.7c11.07 19.13 31.74 32.01 55.43 32.01 35.35 0 64.01-28.66 64.01-64.01 0.01-23.7-12.87-44.37-32-55.44zM352.06 375.43A64.281 64.281 0 0 0 375.49 352h296.64v296.8a64.357 64.357 0 0 0-23.43 23.43H352.06v-296.8z"  ></path></symbol><symbol id="l7draw-circle" viewBox="0 0 1024 1024"><path d="M467.013228 557.765038a64.01 64.01 0 1 0 90.52223-90.52539 64.01 64.01 0 1 0-90.52223 90.52539Z"  ></path><path d="M832.16 512.22c0-26.06-15.58-48.46-37.93-58.45-11.21-54.67-38.11-104.92-78.48-145.3-54.42-54.42-126.78-84.4-203.75-84.4s-149.33 29.97-203.75 84.4c-54.42 54.42-84.4 126.79-84.4 203.75s29.97 149.33 84.4 203.75c54.42 54.42 126.78 84.4 203.75 84.4s149.33-29.97 203.75-84.4c40.37-40.37 67.28-90.62 78.48-145.3 22.35-9.98 37.93-32.39 37.93-58.45zM670.5 670.72c-42.34 42.34-98.62 65.65-158.5 65.65-59.87 0-116.16-23.32-158.5-65.65-42.34-42.34-65.65-98.62-65.65-158.5s23.32-116.16 65.65-158.5c42.34-42.34 98.62-65.65 158.5-65.65 59.87 0 116.16 23.32 158.5 65.65 29.9 29.9 50.3 66.77 59.71 106.95-15.81 11.66-26.07 30.4-26.07 51.55s10.26 39.9 26.07 51.55c-9.41 40.18-29.81 77.05-59.71 106.95z"  ></path></symbol><symbol id="l7draw-polygon" viewBox="0 0 1024 1024"><path d="M705.97 640.31c-5.79 0-11.39 0.78-16.72 2.22L381.94 336.66a64.079 64.079 0 0 0 2.14-16.43c0-35.35-28.66-64.01-64.01-64.01s-64.01 28.66-64.01 64.01c0 23.69 12.88 44.36 32.01 55.43V648.8c-19.13 11.07-32.01 31.74-32.01 55.43 0 35.35 28.66 64.01 64.01 64.01 23.69 0 44.35-12.87 55.42-32l275.05 0.07c11.07 19.14 31.74 32.03 55.44 32.03 35.35 0 64.01-28.66 64.01-64.01s-28.66-64.02-64.02-64.02z m-353.91 8.48V397.22L628.44 672.3l-252.94-0.07a64.411 64.411 0 0 0-23.44-23.44z"  ></path></symbol><symbol id="l7draw-line" viewBox="0 0 1024 1024"><path d="M832.16 449.21c0-35.35-28.66-64.01-64.01-64.01-29.2 0-53.81 19.56-61.5 46.28l-390.9 96.82 72.18-144.18c33.56-1.99 60.17-29.83 60.17-63.89 0-35.35-28.66-64.01-64.01-64.01s-64.01 28.66-64.01 64.01c0 13.04 3.91 25.17 10.61 35.28l-78.42 156.65c-33.58 1.97-60.21 29.81-60.21 63.89 0 35.35 28.66 64.01 64.01 64.01 29.2 0 53.81-19.56 61.5-46.28l390.8-96.79-71.97 143.34c-33.62 1.93-60.28 29.8-60.28 63.9 0 35.35 28.66 64.01 64.01 64.01s64.01-28.66 64.01-64.01c0-13-3.89-25.09-10.54-35.18l78.28-155.93c33.61-1.95 60.28-29.81 60.28-63.91z"  ></path></symbol><symbol id="l7draw-point" viewBox="0 0 1024 1024"><path d="M331.46 330.08m-64.01 0a64.01 64.01 0 1 0 128.02 0 64.01 64.01 0 1 0-128.02 0Z"  ></path><path d="M384.12 735.84m-64.01 0a64.01 64.01 0 1 0 128.02 0 64.01 64.01 0 1 0-128.02 0Z"  ></path><path d="M769.11 512.7m-64.01 0a64.01 64.01 0 1 0 128.02 0 64.01 64.01 0 1 0-128.02 0Z"  ></path></symbol></svg>',
      d = (d = document.getElementsByTagName("script"))[d.length - 1].getAttribute("data-injectcss"),
      l = function l(t, e) {
        e.parentNode.insertBefore(t, e);
      };
    if (d && !t.__iconfont__svg__cssinject__) {
      t.__iconfont__svg__cssinject__ = !0;
      try {
        document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>");
      } catch (t) {
        console && console.log(t);
      }
    }
    function s() {
      o || (o = !0, n());
    }
    function h() {
      try {
        c.documentElement.doScroll("left");
      } catch (t) {
        return void setTimeout(h, 50);
      }
      s();
    }
    e = function e() {
      var t,
        e = document.createElement("div");
      e.innerHTML = i, i = null, (e = e.getElementsByTagName("svg")[0]) && (e.setAttribute("aria-hidden", "true"), e.style.position = "absolute", e.style.width = 0, e.style.height = 0, e.style.overflow = "hidden", e = e, (t = document.body).firstChild ? l(e, t.firstChild) : t.appendChild(e));
    }, document.addEventListener ? ~["complete", "loaded", "interactive"].indexOf(document.readyState) ? setTimeout(e, 0) : (_a = function a() {
      document.removeEventListener("DOMContentLoaded", _a, !1), e();
    }, document.addEventListener("DOMContentLoaded", _a, !1)) : document.attachEvent && (n = e, c = t.document, o = !1, h(), c.onreadystatechange = function () {
      "complete" == c.readyState && (c.onreadystatechange = null, s());
    });
  }(window);

  var css_248z$2 = ".l7-draw-control {\n  display: flex;\n  overflow: hidden;\n  background: #ffffff;\n  border-radius: 2px;\n  box-shadow: 0 0 20px #00000026;\n}\n.l7-draw-control__btn {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: 30px;\n  height: 30px;\n  padding: 0;\n  text-align: center;\n  background: transparent;\n  border-width: 0 0 0 0;\n  border-right: 1px solid #e0e0e0;\n  outline: 0;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n.l7-draw-control__btn svg {\n  transition: color 0.3s;\n}\n.l7-draw-control__btn:hover {\n  background-color: #e5e5e5;\n}\n.l7-draw-control__btn:hover svg {\n  color: #000;\n}\n.l7-draw-control__btn:last-child {\n  border-right: 0;\n  border-bottom: 0;\n}\n.l7-draw-control__btn .l7-draw-icon {\n  width: 26px;\n  height: 26px;\n  overflow: hidden;\n  fill: currentColor;\n}\n.l7-draw-control__btn--active,\n.l7-draw-control__btn--active:hover {\n  background-color: #0370fe;\n}\n.l7-draw-control__btn--active svg,\n.l7-draw-control__btn--active:hover svg {\n  color: #fff;\n}\n";
  styleInject(css_248z$2);

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray_1(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol_1(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  var _isKey = isKey;

  /** Error message constants. */
  var FUNC_ERROR_TEXT$1 = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize.Cache || _MapCache);
    return memoized;
  }

  // Expose `MapCache`.
  memoize.Cache = _MapCache;

  var memoize_1 = memoize;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped(func) {
    var result = memoize_1(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });

    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped;

  /** Used to match property names within property paths. */
  var rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar$1 = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath$1 = _memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName$1, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar$1, '$1') : (number || match));
    });
    return result;
  });

  var _stringToPath = stringToPath$1;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
      symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray_1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return _arrayMap(value, baseToString) + '';
    }
    if (isSymbol_1(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  var _baseToString = baseToString;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString$2(value) {
    return value == null ? '' : _baseToString(value);
  }

  var toString_1 = toString$2;

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value, object) {
    if (isArray_1(value)) {
      return value;
    }
    return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
  }

  var _castPath = castPath;

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol_1(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
  }

  var _toKey = toKey;

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = _castPath(path, object);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[_toKey(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  var _baseGet = baseGet;

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  var _baseSlice = baseSlice;

  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */
  function parent(object, path) {
    return path.length < 2 ? object : _baseGet(object, _baseSlice(path, 0, -1));
  }

  var _parent = parent;

  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */
  function baseUnset(object, path) {
    path = _castPath(path, object);
    object = _parent(object, path);
    return object == null || delete object[_toKey(last_1(path))];
  }

  var _baseUnset = baseUnset;

  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */
  function customOmitClone(value) {
    return isPlainObject_1(value) ? undefined : value;
  }

  var _customOmitClone = customOmitClone;

  /** Built-in value references. */
  var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable(value) {
    return isArray_1(value) || isArguments_1(value) ||
      !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  var _isFlattenable = isFlattenable;

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;

    predicate || (predicate = _isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          _arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  var _baseFlatten = baseFlatten;

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? _baseFlatten(array, 1) : [];
  }

  var flatten_1 = flatten;

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  function flatRest(func) {
    return _setToString(_overRest(func, undefined, flatten_1), func + '');
  }

  var _flatRest = flatRest;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$2 = 1,
      CLONE_FLAT_FLAG$1 = 2,
      CLONE_SYMBOLS_FLAG$2 = 4;

  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */
  var omit = _flatRest(function(object, paths) {
    var result = {};
    if (object == null) {
      return result;
    }
    var isDeep = false;
    paths = _arrayMap(paths, function(path) {
      path = _castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    _copyObject(object, _getAllKeysIn(object), result);
    if (isDeep) {
      result = _baseClone(result, CLONE_DEEP_FLAG$2 | CLONE_FLAT_FLAG$1 | CLONE_SYMBOLS_FLAG$2, _customOmitClone);
    }
    var length = paths.length;
    while (length--) {
      _baseUnset(result, paths[length]);
    }
    return result;
  });

  var omit_1 = omit;

  var DrawControl = /*#__PURE__*/function (_Control) {
    function DrawControl(scene) {
      var _this;
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _classCallCheck(this, DrawControl);
      _this = _callSuper(this, DrawControl, [options]);
      _this.controlOption = void 0;
      _this.sceneInstance = void 0;
      _this.drawMap = {};
      _this.btnMap = {};
      _this.activeType = null;
      _this.emitDataChange = debounce_1(function () {
        _this.emit(exports.ControlEvent.DataChange, _this.getDrawData());
      }, 16);
      _this.emitDrawSelect = function (drawType, feature) {
        _this.emit(exports.ControlEvent.DrawSelect, drawType, feature);
      };
      _this.sceneInstance = scene;
      _this.controlOption = _objectSpread2(_objectSpread2({}, _this.getDefault()), options || {});
      _this.onBtnClick = _this.onBtnClick.bind(_this);
      return _this;
    }
    _inherits(DrawControl, _Control);
    return _createClass(DrawControl, [{
      key: "getActiveType",
      value: function getActiveType() {
        return this.activeType;
      }
      // @ts-ignore
    }, {
      key: "getDefault",
      value: function getDefault() {
        return _objectSpread2(_objectSpread2({}, _get(_getPrototypeOf(DrawControl.prototype), "getDefault", this).call(this)), {}, {
          className: '',
          buttonClassName: '',
          activeButtonClassName: '',
          style: '',
          position: 'topleft',
          commonDrawOptions: {},
          drawConfig: {
            point: true,
            line: true,
            polygon: true,
            rect: true,
            circle: true,
            clear: true
          }
        });
      }
    }, {
      key: "addTo",
      value: function addTo(container) {
        _get(_getPrototypeOf(DrawControl.prototype), "addTo", this).call(this, container);
        this.init();
        return this;
      }
    }, {
      key: "onAdd",
      value: function onAdd() {
        var _this$controlOption = this.controlOption,
          className = _this$controlOption.className,
          style = _this$controlOption.style;
        var container = l7.DOM.create('div', "".concat(DrawControlClassName, " ").concat(className));
        if (style) {
          container.setAttribute('style', style);
        }
        return container;
      }
    }, {
      key: "onRemove",
      value: function onRemove() {
        Object.values(this.drawMap).forEach(function (draw) {
          draw.clear(true);
        });
      }
    }, {
      key: "init",
      value: function init() {
        var _this2 = this,
          _this$container;
        var btnList = [];
        Object.entries(this.controlOption.drawConfig).filter(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
            _ = _ref2[0],
            options = _ref2[1];
          return options;
        }).sort(function (item1, item2) {
          var _item = _slicedToArray(item1, 2),
            options1 = _item[1];
          var _item2 = _slicedToArray(item2, 2),
            options2 = _item2[1];
          var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;
          var order1 = typeof options1 === 'boolean' ? MAX_SAFE_INTEGER : options1.order;
          var order2 = typeof options2 === 'boolean' ? MAX_SAFE_INTEGER : options2.order;
          return order1 - order2;
        }).map(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
            drawType = _ref4[0],
            options = _ref4[1];
          return [drawType, _typeof(options) === 'object' ? omit_1(options, 'order') : options];
        }).forEach(function (_ref5) {
          var _ref6 = _slicedToArray(_ref5, 2),
            btnType = _ref6[0],
            options = _ref6[1];
          if (_typeof(options) === 'object' && options.button) {
            var btn = options.button;
            if (!btn.classList.contains('l7-draw-control__btn')) {
              btn.classList.add('l7-draw-control__btn');
            }
            _this2.btnMap[btnType] = btn;
            btnList.push(btn);
          } else if (options && DrawTypeList.includes(btnType)) {
            var newBtn = _this2.initBtn(btnType);
            newBtn.addEventListener('click', _this2.onBtnClick);
            btnList.push(newBtn);
            _this2.btnMap[btnType] = newBtn;
            // @ts-ignore;
            var Draw = DrawInstanceMap[btnType];
            if (Draw && _this2.sceneInstance) {
              var draw = new Draw(_this2.sceneInstance, _objectSpread2(_objectSpread2({}, _this2.controlOption.commonDrawOptions), typeof options === 'boolean' ? {} : options));
              draw.on(exports.DrawEvent.Change, _this2.emitDataChange);
              draw.on(exports.DrawEvent.Select, function (feature) {
                _this2.emitDrawSelect(btnType, feature);
                if (feature) {
                  Object.values(_this2.drawMap).forEach(function (drawInstance) {
                    if (drawInstance !== draw) {
                      drawInstance.setActiveFeature(null);
                    }
                  });
                }
              });
              _this2.drawMap[btnType] = draw;
            }
          }
        });
        (_this$container = this.container).append.apply(_this$container, btnList);
        if (this.controlOption.defaultActiveType) {
          this.onDrawClick(this.controlOption.defaultActiveType);
        }
      }
    }, {
      key: "getDrawData",
      value: function getDrawData() {
        return fromPairs_1(toPairs_1(this.drawMap).map(function (_ref7) {
          var _ref8 = _slicedToArray(_ref7, 2),
            drawType = _ref8[0],
            draw = _ref8[1];
          return [drawType, draw.getData()];
        }));
      }
    }, {
      key: "getTypeDraw",
      value: function getTypeDraw(type) {
        var _this$drawMap$type;
        return (_this$drawMap$type = this.drawMap[type]) !== null && _this$drawMap$type !== void 0 ? _this$drawMap$type : null;
      }
    }, {
      key: "onBtnClick",
      value:
      /**
       * 按钮的点击事件
       * @param e
       */
      function onBtnClick(e) {
        var btn = getParentByClassName(e.target, DrawBtnClassName);
        if (!btn) {
          return;
        }
        var btnType = btn.getAttribute(DrawTypeAttrName);
        if (btnType === 'clear') {
          this.clearDrawData();
        } else {
          this.onDrawClick(btnType);
        }
      }
      /**
       * 设置当前激活的绘制类型
       * @param type
       */
    }, {
      key: "setActiveType",
      value: function setActiveType(type) {
        var newActiveType = null;
        var oldActiveType = this.activeType;
        if (oldActiveType) {
          var _this$drawMap$oldActi;
          var targetBtn = this.btnMap[oldActiveType];
          if (targetBtn) {
            l7.DOM.removeClass(targetBtn, DrawBtnActiveClassName);
            var activeButtonClassName = this.controlOption.activeButtonClassName;
            if (activeButtonClassName) {
              l7.DOM.removeClass(targetBtn, activeButtonClassName);
            }
          }
          (_this$drawMap$oldActi = this.drawMap[oldActiveType]) === null || _this$drawMap$oldActi === void 0 ? void 0 : _this$drawMap$oldActi.disable();
          newActiveType = null;
        }
        if (oldActiveType !== type && type) {
          var _this$drawMap$type2;
          (_this$drawMap$type2 = this.drawMap[type]) === null || _this$drawMap$type2 === void 0 ? void 0 : _this$drawMap$type2.enable();
          var _targetBtn = this.btnMap[type];
          _targetBtn && l7.DOM.addClass(_targetBtn, "".concat(DrawBtnActiveClassName, " ").concat(this.controlOption.activeButtonClassName));
          newActiveType = type;
        }
        this.activeType = newActiveType;
        this.emit(exports.ControlEvent.DrawChange, newActiveType);
      }
      /**
       * 绘制按钮点击的回调
       * @param type
       */
    }, {
      key: "onDrawClick",
      value: function onDrawClick(type) {
        this.setActiveType(type);
      }
      /**
       * 清空绘制数据
       */
    }, {
      key: "clearDrawData",
      value: function clearDrawData() {
        Object.values(this.drawMap).forEach(function (draw) {
          draw === null || draw === void 0 ? void 0 : draw.clear();
        });
        this.emit(exports.ControlEvent.DrawClear);
      }
      /**
       * 创建按钮
       * @param type
       * @returns
       */
    }, {
      key: "initBtn",
      value: function initBtn(type) {
        var btn = l7.DOM.create('button', "".concat(DrawBtnClassName, " ").concat(this.controlOption.buttonClassName));
        btn.innerHTML = "<svg class=\"l7-draw-icon\" aria-hidden=\"true\">\n      <use xlink:href=\"".concat(DrawIconMap[type], "\"></use>\n    </svg>");
        btn.setAttribute(DrawTypeAttrName, type);
        btn.type = 'button';
        return btn;
      }
    }]);
  }(l7.Control);

  exports.ACTIVE_COLOR = ACTIVE_COLOR;
  exports.BaseMode = BaseMode;
  exports.CircleDrawer = CircleDrawer;
  exports.DEFAULT_ADSORB_CONFIG = DEFAULT_ADSORB_CONFIG;
  exports.DEFAULT_AREA_OPTIONS = DEFAULT_AREA_OPTIONS;
  exports.DEFAULT_CIRCLE_HELPER_CONFIG = DEFAULT_CIRCLE_HELPER_CONFIG;
  exports.DEFAULT_COMMON_OPTIONS = DEFAULT_COMMON_OPTIONS;
  exports.DEFAULT_CURSOR_MAP = DEFAULT_CURSOR_MAP;
  exports.DEFAULT_DISTANCE_OPTIONS = DEFAULT_DISTANCE_OPTIONS;
  exports.DEFAULT_DRAG_OPTIONS = DEFAULT_DRAG_OPTIONS;
  exports.DEFAULT_DRAG_POLYGON_HELPER_CONFIg = DEFAULT_DRAG_POLYGON_HELPER_CONFIg;
  exports.DEFAULT_HISTORY_CONFIG = DEFAULT_HISTORY_CONFIG;
  exports.DEFAULT_KEYBOARD_CONFIG = DEFAULT_KEYBOARD_CONFIG;
  exports.DEFAULT_LINE_HELPER_CONFIG = DEFAULT_LINE_HELPER_CONFIG;
  exports.DEFAULT_MID_POINT_STYLE = DEFAULT_MID_POINT_STYLE;
  exports.DEFAULT_NODE_NORMAL_STYLE = DEFAULT_NODE_NORMAL_STYLE;
  exports.DEFAULT_NODE_STYLE = DEFAULT_NODE_STYLE;
  exports.DEFAULT_POINT_HELPER_CONFIG = DEFAULT_POINT_HELPER_CONFIG;
  exports.DEFAULT_POINT_NORMAL_STYLE = DEFAULT_POINT_NORMAL_STYLE;
  exports.DEFAULT_POINT_STYLE = DEFAULT_POINT_STYLE;
  exports.DEFAULT_POLYGON_HELPER_CONFIG = DEFAULT_POLYGON_HELPER_CONFIG;
  exports.DEFAULT_POPUP_CONFIG = DEFAULT_POPUP_CONFIG;
  exports.DEFAULT_RECT_HELPER_CONFIG = DEFAULT_RECT_HELPER_CONFIG;
  exports.DEFAULT_SOURCE_DATA = DEFAULT_SOURCE_DATA;
  exports.DEFAULT_STYLE = DEFAULT_STYLE;
  exports.DEFAULT_TEXT_NORMAL_STYLE = DEFAULT_TEXT_NORMAL_STYLE;
  exports.DEFAULT_TRIGGER_DRAG_HELPER_CONFIG = DEFAULT_TRIGGER_DRAG_HELPER_CONFIG;
  exports.DashLineRender = DashLineRender;
  exports.DragPolygonMode = DragPolygonMode;
  exports.DrawCircle = CircleDrawer;
  exports.DrawControl = DrawControl;
  exports.DrawLine = LineDrawer;
  exports.DrawPoint = PointDrawer;
  exports.DrawPolygon = PolygonDrawer;
  exports.DrawRect = RectDrawer;
  exports.LayerRender = LayerRender;
  exports.LineDrawer = LineDrawer;
  exports.LineMode = LineMode;
  exports.LineRender = LineRender;
  exports.MidPointMode = MidPointMode;
  exports.MidPointRender = MidPointRender;
  exports.NORMAL_COLOR = NORMAL_COLOR;
  exports.PointDrawer = PointDrawer;
  exports.PointMode = PointMode;
  exports.PointRender = PointRender;
  exports.PolygonDrawer = PolygonDrawer;
  exports.PolygonMode = PolygonMode;
  exports.PolygonRender = PolygonRender;
  exports.RENDER_MAP = RENDER_MAP;
  exports.RectDrawer = RectDrawer;
  exports.SceneRender = SceneRender;
  exports.Source = Source;
  exports.TextRender = TextRender;
  exports.calcAreaText = calcAreaText;
  exports.calcDistanceTextsByLine = calcDistanceTextsByLine;
  exports.createDashLine = createDashLine;
  exports.createLineFeature = createLineFeature;
  exports.createPointFeature = createPointFeature;
  exports.createPolygonFeature = createPolygonFeature;
  exports.findMinIndex = findMinIndex;
  exports.getAdsorbPosition = getAdsorbPosition;
  exports.getDefaultLineProperties = getDefaultLineProperties;
  exports.getDefaultPointProperties = getDefaultPointProperties;
  exports.getDefaultPolygonProperties = getDefaultPolygonProperties;
  exports.getLineCenterPoint = getLineCenterPoint;
  exports.getLngLat = getLngLat;
  exports.getMapDom = getMapDom;
  exports.getParentByClassName = getParentByClassName;
  exports.getPixelExpandBBox = getPixelExpandBBox;
  exports.getPosition = getPosition;
  exports.getPrecisionNumber = getPrecisionNumber;
  exports.getSingleColorStyle = getSingleColorStyle;
  exports.getUuid = getUuid;
  exports.injectFeaturesBBox = injectFeaturesBBox;
  exports.isDev = isDev;
  exports.isPositionInBBox = isPositionInBBox;
  exports.isSameFeature = isSameFeature;
  exports.joinMultiFeatures = joinMultiFeatures;
  exports.resetEventLngLat = resetEventLngLat;
  exports.splitByPosition = splitByPosition;
  exports.splitMultiFeatures = splitMultiFeatures;
  exports.transLngLat2Position = transLngLat2Position;
  exports.updateTargetFeature = updateTargetFeature;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=l7-draw.js.map
