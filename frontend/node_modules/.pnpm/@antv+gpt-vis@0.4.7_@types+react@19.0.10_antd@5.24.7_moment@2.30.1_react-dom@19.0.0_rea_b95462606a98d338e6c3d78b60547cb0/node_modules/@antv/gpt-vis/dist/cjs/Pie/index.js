var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/Pie/index.tsx
var Pie_exports = {};
__export(Pie_exports, {
  default: () => Pie_default
});
module.exports = __toCommonJS(Pie_exports);
var import_plots = require("@ant-design/plots");
var import_lodash = require("lodash");
var import_react = __toESM(require("react"));
var import_hooks = require("../ConfigProvider/hooks");
var defaultConfig = (props) => {
  const { data = [], angleField = "value", colorField = "category" } = props;
  const sumValue = (0, import_lodash.sumBy)(data, angleField);
  return {
    angleField,
    colorField,
    tooltip: (d) => {
      return {
        name: d[colorField],
        value: d[angleField]
      };
    },
    label: {
      position: "outside",
      // text: angleField,
      text: (d) => `${d[colorField]}: ${(0, import_lodash.round)(d[angleField] / sumValue * 100, 1)}%`
    },
    legend: {
      color: {
        title: false,
        position: "top"
      }
    },
    interaction: {
      elementSelect: {
        single: true
      }
    }
  };
};
var Pie = (props) => {
  const config = (0, import_hooks.usePlotConfig)("Pie", defaultConfig, props);
  return /* @__PURE__ */ import_react.default.createElement(import_plots.Pie, { ...config });
};
var Pie_default = Pie;
