var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/DualAxes/util.ts
var util_exports = {};
__export(util_exports, {
  transform: () => transform
});
module.exports = __toCommonJS(util_exports);
var import_types = require("../types");
function transform(series, categories) {
  const newChildren = series.map((item, index) => {
    const { type, axisYTitle, ...others } = item;
    const defaultYField = axisYTitle || `value_${index + 1}`;
    const baseConfig = {
      ...others,
      yField: defaultYField,
      axis: { y: { title: axisYTitle } },
      // data放在最外层
      data: void 0
    };
    if (type === import_types.ChartType.Column) {
      return { ...baseConfig, type: "interval" };
    }
    if (type === import_types.ChartType.Line) {
      return {
        ...baseConfig,
        type,
        shapeField: "smooth",
        axis: { y: { position: "right", title: axisYTitle } },
        style: { lineWidth: 2 }
      };
    }
    return baseConfig;
  });
  const newData = categories.map((item, index) => {
    const temp = {
      category: item
    };
    series.forEach((s, i) => {
      const defaultYField = s.axisYTitle || `value_${i + 1}`;
      temp[defaultYField] = s.data[index];
    });
    return temp;
  });
  const legendTypeList = series.map((item) => {
    return item.type === import_types.ChartType.Line ? "smooth" : "rect";
  });
  return {
    children: newChildren,
    data: newData,
    legendTypeList
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  transform
});
