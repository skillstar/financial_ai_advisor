"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildIndex = buildIndex;
const utils_1 = require("../utils");
const transform_1 = require("./transform");
/**
 * 建立聚合点的检索索引对象
 * @param clusterLevels
 * @returns
 */
function buildIndex(clusterLevels) {
    const zoomList = clusterLevels.map((i) => i.zoom).reverse();
    const clusterIdMap = new Map();
    const clusterZoomMap = new Map();
    clusterLevels.forEach(({ locations }) => {
        locations.forEach((location) => {
            clusterIdMap.set(location.id, location);
        });
    });
    /**
     * 计算距离 targetZoom 最近的有效 zoom
     * @param targetZoom
     * @returns
     */
    function getAppropriateLevel(targetZoom) {
        const matchZoom = (0, utils_1.findAppropriateZoom)(zoomList, targetZoom);
        return clusterLevels.find((clusterLevel) => clusterLevel.zoom === matchZoom);
    }
    /**
     * 获取当前地图范围内的点
     * @param targetZoom
     * @param bounds
     */
    function getMapLocations(targetZoom, bounds) {
        const [lng1, lat1, lng2, lat2] = bounds;
        const targetLevel = getAppropriateLevel(targetZoom);
        const { locations, locationTree } = targetLevel;
        const minX = Math.min((0, transform_1.lngX)(lng1), (0, transform_1.lngX)(lng2));
        const maxX = Math.max((0, transform_1.lngX)(lng1), (0, transform_1.lngX)(lng2));
        const minY = Math.min((0, transform_1.latY)(lat1), (0, transform_1.latY)(lat2));
        const maxY = Math.max((0, transform_1.latY)(lat1), (0, transform_1.latY)(lat2));
        const indexes = locationTree.range(minX, minY, maxX, maxY);
        return indexes.map((index) => locations[index]);
    }
    /**
     * 获取目标聚合点所包含的所有原始客流点 id
     * @param clusterId
     * @returns
     */
    function getLocationIdsFromCluster(clusterId) {
        var _a;
        const set = new Set();
        const clusterIds = [clusterId];
        while (clusterIds.length) {
            const id = clusterIds.pop();
            if (id) {
                const cluster = clusterIdMap.get(id);
                if (cluster) {
                    if ((_a = cluster.childIds) === null || _a === void 0 ? void 0 : _a.length) {
                        clusterIds.push(...cluster.childIds);
                    }
                    else {
                        set.add(cluster.id);
                    }
                }
            }
        }
        return Array.from(set.values());
    }
    /**
     * 为原始聚合点找到其目标层级下的聚合点
     * @param locationId
     * @param zoom
     * @returns
     */
    function findClusterForZoom(locationId, zoom) {
        const key = `${locationId}-${zoom}`;
        let targetCluster = clusterZoomMap.get(`${locationId}-${zoom}`);
        if (targetCluster) {
            return targetCluster;
        }
        let cluster = clusterIdMap.get(locationId);
        if (cluster && cluster.zoom <= zoom) {
            return cluster;
        }
        let parentCluster = ((cluster === null || cluster === void 0 ? void 0 : cluster.parentId) && clusterIdMap.get(cluster.parentId)) || undefined;
        while (cluster && parentCluster) {
            if (cluster.zoom >= zoom && zoom >= parentCluster.zoom) {
                break;
            }
            cluster = parentCluster;
            parentCluster = ((cluster === null || cluster === void 0 ? void 0 : cluster.parentId) && clusterIdMap.get(cluster.parentId)) || undefined;
        }
        targetCluster = cluster && cluster.zoom <= zoom ? cluster : parentCluster;
        if (targetCluster) {
            clusterZoomMap.set(key, targetCluster);
        }
        return targetCluster;
    }
    return {
        zoomList,
        clusterIdMap,
        getAppropriateLevel,
        getMapLocations,
        getLocationIdsFromCluster,
        findClusterForZoom,
    };
}
//# sourceMappingURL=build-index.js.map