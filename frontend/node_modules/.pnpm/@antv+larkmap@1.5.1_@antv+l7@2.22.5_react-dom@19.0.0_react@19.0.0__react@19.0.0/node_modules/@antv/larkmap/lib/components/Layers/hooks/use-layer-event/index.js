"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLayerEvent = void 0;
var _ahooks = require("ahooks");
var _react = require("react");
var _constant = require("./constant");
const useLayerEvent = (layer, props, layerEventMap = _constant.LayerEventMap) => {
  // LarkMap 事件名列表
  const layerEventList = (0, _react.useMemo)(() => Object.keys(layerEventMap), [layerEventMap]);

  // 绑定或解绑所有事件的回调函数
  const handleLayerEvents = type => {
    layerEventList.forEach(callbackName => {
      const eventName = layerEventMap[callbackName];
      const callback = props[callbackName];
      if (callbackName && callback) {
        layer[type](eventName, callback);
      }
    });
  };
  const bindLayerEvents = () => handleLayerEvents('on');
  const unbindLayerEvents = () => handleLayerEvents('off');
  const isFirstRef = (0, _react.useRef)(true);

  // 保证图层初始化后同步执行事件绑定，而不是在 useEffect 中异步绑定事件
  if (isFirstRef.current) {
    bindLayerEvents();
  }
  (0, _react.useEffect)(() => {
    if (isFirstRef.current) {
      isFirstRef.current = false;
    } else {
      bindLayerEvents();
    }
    return () => {
      unbindLayerEvents();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, layerEventList.map(eventName => props[eventName]));
  (0, _ahooks.useUnmount)(() => {
    unbindLayerEvents();
  });
};
exports.useLayerEvent = useLayerEvent;