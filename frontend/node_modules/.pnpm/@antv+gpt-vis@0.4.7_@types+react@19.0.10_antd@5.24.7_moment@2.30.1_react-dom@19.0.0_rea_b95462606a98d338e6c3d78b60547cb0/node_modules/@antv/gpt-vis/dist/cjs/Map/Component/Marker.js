var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/Map/Component/Marker.tsx
var Marker_exports = {};
__export(Marker_exports, {
  default: () => Marker_default
});
module.exports = __toCommonJS(Marker_exports);
var import_larkmap = require("@antv/larkmap");
var import_react = require("react");
var import_map = require("../../utils/map");
var Marker_default = (props) => {
  const scene = (0, import_larkmap.useScene)();
  const [layers, setLayers] = (0, import_react.useState)([]);
  const removeLayers = () => {
    layers.forEach((item) => {
      scene.removeLayer(item);
    });
  };
  (0, import_react.useEffect)(() => {
    var _a;
    if (!props.markers)
      return;
    (_a = (0, import_map.setMapContext)(props, scene)) == null ? void 0 : _a.then(() => {
      const markerLayer = (0, import_map.setMarkers)(props.markers || []);
      removeLayers();
      markerLayer.forEach((item) => {
        scene.addLayer(item);
      });
      setLayers(markerLayer);
    });
    return () => {
      removeLayers();
    };
  }, [props.markers]);
  return null;
};
