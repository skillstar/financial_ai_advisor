var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/HeatMap/index.tsx
var HeatMap_exports = {};
__export(HeatMap_exports, {
  default: () => HeatMap_default
});
module.exports = __toCommonJS(HeatMap_exports);
var import_larkmap = require("@antv/larkmap");
var import_react = __toESM(require("react"));
var import_hooks = require("../ConfigProvider/hooks");
var import_Map = __toESM(require("../Map"));
var heapLayerOptions = {
  autoFit: true,
  shape: "heatmap",
  size: {
    field: "value",
    value: [0, 1]
  },
  style: {
    intensity: 3,
    radius: 20,
    opacity: 1,
    rampColors: {
      colors: ["#FF4818", "#F7B74A", "#FFF598", "#F27DEB", "#8C1EB2", "#421EB2"],
      positions: [0, 0.2, 0.4, 0.6, 0.8, 1]
    }
  }
};
var HeatMap = (props) => {
  const { children, data, ...mapConfigRest } = (0, import_hooks.useMapConfig)("HeatMap", props);
  const source = (0, import_react.useMemo)(
    () => ({
      data: data || [],
      parser: { type: "json", x: "longitude", y: "latitude" }
    }),
    [data]
  );
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement(import_Map.default, { ...mapConfigRest }, /* @__PURE__ */ import_react.default.createElement(import_larkmap.HeatmapLayer, { ...heapLayerOptions, source }), children));
};
var HeatMap_default = HeatMap;
