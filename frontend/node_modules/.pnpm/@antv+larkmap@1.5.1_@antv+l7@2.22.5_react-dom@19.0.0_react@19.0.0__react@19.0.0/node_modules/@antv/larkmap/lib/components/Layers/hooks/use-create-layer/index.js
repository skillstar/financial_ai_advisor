"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCreateLayer = void 0;
var _ahooks = require("ahooks");
var _lodash = require("lodash");
var _react = require("react");
var _hooks = require("../../../LarkMap/hooks");
/**
 * LayerCtor 图层类 构造函数
 */

/**
 * LayerOptions 图层基础配置
 */

const useCreateLayer = (Ctor, config) => {
  const {
    onCreated,
    source,
    ...options
  } = config;
  const layerManager = (0, _hooks.useLayerManager)();
  const layerRef = (0, _react.useRef)();
  const layerOptionsRef = (0, _react.useRef)(options);
  const layerSourceRef = (0, _react.useRef)(source);

  // 创建图层
  // 添加到 layerManager 自动加载到 scene
  if (!layerRef.current) {
    layerRef.current = new Ctor(config);

    // 图层初始化完成事件
    if (onCreated) {
      layerRef.current.once('inited', () => onCreated(layerRef.current));
    }
    layerManager.addLayer(layerRef.current);
  }

  // options 更新时
  (0, _ahooks.useUpdateEffect)(() => {
    if (layerRef.current) {
      const changeOption = !(0, _lodash.isEqual)(layerOptionsRef.current, options);
      if (changeOption) {
        layerRef.current.update(options);
        layerOptionsRef.current = (0, _lodash.cloneDeep)(options);
      }
    }
  }, [options]);

  // source 更新时
  (0, _ahooks.useUpdateEffect)(() => {
    if (layerRef.current) {
      const {
        data,
        ...restOptions
      } = source;
      const {
        data: currentData,
        ...restCurrentOptions
      } = layerSourceRef.current;
      const changeSource = data !== currentData || !(0, _lodash.isEqual)(restOptions, restCurrentOptions);
      if (changeSource) {
        layerRef.current.changeData(source);
        layerSourceRef.current = {
          ...source
        };
      }
    }
  }, [source]);

  // 组件销毁时
  (0, _react.useEffect)(() => {
    return () => {
      if (layerRef.current) {
        layerManager.removeLayer(layerRef.current);
        layerRef.current = null;
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return layerRef;
};
exports.useCreateLayer = useCreateLayer;