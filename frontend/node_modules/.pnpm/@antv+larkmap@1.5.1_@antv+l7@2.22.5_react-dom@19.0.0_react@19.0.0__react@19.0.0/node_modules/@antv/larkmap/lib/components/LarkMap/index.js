"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LarkMapContext = exports.LarkMap = void 0;
var _l = require("@antv/l7");
var _ahooks = require("ahooks");
var _classnames = _interopRequireDefault(require("classnames"));
var _lodash = require("lodash");
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../utils");
var _helper = require("./helper");
var _useSceneEvent = require("./hooks/use-scene-event");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const LarkMapContext = exports.LarkMapContext = /*#__PURE__*/_react.default.createContext(null);
const LarkMap = exports.LarkMap = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(function LarkMap(props, ref) {
  const {
    id,
    style,
    className,
    map,
    mapType = 'Gaode',
    mapOptions = {},
    onLayerManagerCreated,
    onSceneLoaded,
    children,
    ...sceneConfig
  } = props;
  const containerRef = (0, _react.useRef)();
  const [sceneInstance, setSceneInstance] = (0, _react.useState)(null);
  const {
    current: contextValue
  } = (0, _react.useRef)({
    scene: null,
    layerManager: null
  });
  (0, _react.useEffect)(() => {
    let scene;
    let isMounted = true;
    const callback = (0, _lodash.isUndefined)(map) ? (0, _helper.createMap)(mapType, mapOptions) : typeof map === 'function' ? map() : map;
    Promise.resolve(callback).then(mapInstance => {
      if (!isMounted) {
        return;
      }
      scene = new _l.Scene({
        ...sceneConfig,
        id: containerRef.current,
        map: mapInstance
      });
      const layerManager = new _utils.LayerManager({
        scene
      });
      contextValue.scene = scene;
      contextValue.layerManager = layerManager;
      scene.once('loaded', () => {
        if (onSceneLoaded) {
          onSceneLoaded(scene);
        }
        if (onLayerManagerCreated) {
          onLayerManagerCreated(layerManager);
        }
        setSceneInstance(scene);
      });
    }).catch(error => {
      console.error(error);
    });
    return () => {
      isMounted = false;
      if (scene) {
        contextValue.scene = null;
        contextValue.layerManager = null;
        scene.destroy();
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _useSceneEvent.useSceneEvent)(sceneInstance, props);
  (0, _react.useImperativeHandle)(ref, () => ({
    getScene: () => sceneInstance,
    getMap: () => sceneInstance.map
  }), [sceneInstance]);

  // 更新地图样式
  (0, _react.useEffect)(() => {
    if (sceneInstance && mapOptions.style) {
      sceneInstance.setMapStyle(mapOptions.style);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mapOptions.style]);

  // 更新地图层级或地图视野中心点
  (0, _ahooks.useDeepCompareEffect)(() => {
    if ((0, _lodash.isNull)(sceneInstance)) return;
    if (mapOptions.center && (0, _lodash.isNumber)(mapOptions.zoom)) {
      sceneInstance.setZoomAndCenter(mapOptions.zoom, mapOptions.center);
    } else if ((0, _lodash.isNumber)(mapOptions.zoom)) {
      sceneInstance.setZoom(mapOptions.zoom);
    } else if (mapOptions.center) {
      sceneInstance.setCenter(mapOptions.center);
    }
  }, [mapOptions.zoom, mapOptions.center]);

  // 更新地图视野倾角
  (0, _react.useEffect)(() => {
    if (sceneInstance && (0, _lodash.isNumber)(mapOptions.pitch)) {
      sceneInstance.setPitch(mapOptions.pitch);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mapOptions.pitch]);

  // 更新地图旋转角度
  (0, _react.useEffect)(() => {
    if (sceneInstance && (0, _lodash.isNumber)(mapOptions.rotation)) {
      sceneInstance.setRotation(mapOptions.rotation);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mapOptions.rotation]);
  const styles = (0, _react.useMemo)(() => ({
    position: 'relative',
    ...style
  }), [style]);
  return /*#__PURE__*/_react.default.createElement("div", {
    id: id,
    ref: containerRef,
    style: styles,
    className: (0, _classnames.default)('larkmap', className)
  }, sceneInstance && /*#__PURE__*/_react.default.createElement(LarkMapContext.Provider, {
    value: contextValue
  }, children));
}));