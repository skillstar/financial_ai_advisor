function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/**
 * 将 params 参数对象转换成 query string
 * @param params
 * @param encode
 * @returns
 */
export function getQueryString(params) {
  var encode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return Object.entries(params).sort(function (_ref, _ref2) {
    var _ref3 = _slicedToArray(_ref, 1),
      key1 = _ref3[0];
    var _ref4 = _slicedToArray(_ref2, 1),
      key2 = _ref4[0];
    return key1.localeCompare(key2);
  }).map(function (_ref5) {
    var _ref6 = _slicedToArray(_ref5, 2),
      key = _ref6[0],
      value = _ref6[1];
    var valueStr = String(value);
    if (encode) {
      valueStr = window.encodeURI(String(value));
    }
    return "".concat(key, "=").concat(valueStr);
  }).join('&');
}

/**
 * 将 baseUrl 和 query 拼接成 url
 * @param baseUrl
 * @param params
 * @returns
 */
export function urlStringify(baseUrl, params) {
  return "".concat(baseUrl, "?").concat(getQueryString(params, true));
}