"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSceneEvent = void 0;
var _ahooks = require("ahooks");
var _constant = require("./constant");
const useSceneEvent = (scene, props) => {
  (0, _ahooks.useTrackedEffect)((changeIndexList, previousDeps, currentDeps) => {
    if (!scene) {
      return;
    }
    // 需要更新的事件对应到 deps 的数组下标，但是不包含 scene 实例的更新
    let eventIndexList = changeIndexList.filter(index => !!index).map(index => index - 1);

    // 如果本次变化为 scene 的实例化则无差别遍历所有事件类型
    if (changeIndexList.includes(0)) {
      eventIndexList = _constant.SceneEventList.map((_, index) => index);
    }
    eventIndexList.forEach(index => {
      const eventName = _constant.SceneEventMap[_constant.SceneEventList[index]];
      const previousCallback = previousDeps[index + 1];
      const currentCallback = currentDeps[index + 1];
      // 分别注销旧的事件回调并绑定新的事件
      if (previousCallback) {
        scene.off(eventName, previousCallback);
      }
      if (currentCallback) {
        scene.on(eventName, currentCallback);
      }
    });
  }, [scene, ..._constant.SceneEventList.map(eventName => props[eventName])]);
  (0, _ahooks.useUnmount)(() => {
    if (!scene) {
      return;
    }
    _constant.SceneEventList.forEach(key => {
      const eventName = _constant.SceneEventMap[key];
      const callback = props[key];
      if (eventName && callback) {
        scene.off(eventName, callback);
      }
    });
  });
};
exports.useSceneEvent = useSceneEvent;