"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSourceChanged = exports.deepMergeLayerOptions = void 0;
const tslib_1 = require("tslib");
const l7_1 = require("@antv/l7");
const util_1 = require("@antv/util");
tslib_1.__exportStar(require("./keypress"), exports);
function deepMix(dist, src, level = 0, maxLevel = 5) {
    for (const key in src) {
        if (Object.prototype.hasOwnProperty.call(src, key)) {
            const value = src[key];
            if (value !== null && (0, util_1.isPlainObject)(value)) {
                if (!(0, util_1.isPlainObject)(dist[key])) {
                    dist[key] = {};
                }
                if (level < maxLevel) {
                    deepMix(dist[key], value, level + 1, maxLevel);
                }
                else {
                    dist[key] = src[key];
                }
            }
            else if (Array.isArray(value)) {
                dist[key] = [];
                dist[key] = dist[key].concat(value);
            }
            else if (value !== undefined) {
                dist[key] = value;
            }
        }
    }
}
const deepMixOptions = (rst, ...args) => {
    for (let i = 0; i < args.length; i += 1) {
        // 只进行最大 1 level 合并
        deepMix(rst, args[i], 0, 1);
    }
    return rst;
};
/**
 * 深克隆图层配置项
 */
const deepMergeLayerOptions = (options, srcOptions) => {
    const { source } = options, restOptions = tslib_1.__rest(options, ["source"]);
    const { source: srcSource } = srcOptions, restSrcOptions = tslib_1.__rest(srcOptions, ["source"]);
    const target = deepMixOptions({}, restOptions, restSrcOptions);
    // source 是实例的情况
    if (srcSource instanceof l7_1.Source) {
        target.source = srcSource;
    }
    else if (source instanceof l7_1.Source) {
        target.source = source;
    }
    else {
        target.source = Object.assign(Object.assign({}, source), srcSource);
    }
    return target;
};
exports.deepMergeLayerOptions = deepMergeLayerOptions;
/**
 * 判断 source 数据是否发生改变
 */
const isSourceChanged = (source, currentSource) => {
    // source 是实例的情况
    if (source instanceof l7_1.Source && currentSource instanceof l7_1.Source) {
        return source !== currentSource;
    }
    const { data } = source, restOptions = tslib_1.__rest(source, ["data"]);
    const { data: currentData } = currentSource, restCurrentOptions = tslib_1.__rest(currentSource, ["data"]);
    const changed = data !== currentData || !(0, util_1.isEqual)(restOptions, restCurrentOptions);
    return changed;
};
exports.isSourceChanged = isSourceChanged;
//# sourceMappingURL=index.js.map