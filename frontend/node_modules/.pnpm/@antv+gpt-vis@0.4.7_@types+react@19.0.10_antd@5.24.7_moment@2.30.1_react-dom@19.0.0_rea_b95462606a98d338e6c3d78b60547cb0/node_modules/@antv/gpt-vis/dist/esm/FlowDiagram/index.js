import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
var _excluded = ["data"];
import { FlowGraph as ADCFlowGraph, RCNode } from '@ant-design/graphs';
import React, { useMemo } from 'react';
import { useGraphConfig } from "../ConfigProvider/hooks";
import { mergeGraphOptions } from "../utils/config";
import { visGraphData2GraphData } from "../utils/graph";
import { getGraphOptionsByData } from "./helper";
var TextNode = RCNode.TextNode;
var defaultConfig = {
  autoResize: true,
  autoFit: 'view',
  node: {
    style: {
      component: function component(d) {
        var _d$states;
        var isActive = (_d$states = d.states) === null || _d$states === void 0 ? void 0 : _d$states.includes('active');
        return /*#__PURE__*/React.createElement(TextNode, {
          text: d.id,
          isActive: isActive,
          type: "filled",
          style: {
            fontSize: 12
          },
          borderWidth: 2
        });
      },
      size: [140, 32]
    }
  },
  edge: {
    style: {
      endArrow: true,
      labelBackground: true,
      labelMaxLines: 2,
      labelMaxWidth: '40%',
      labelWordWrap: true
    },
    state: {
      active: {
        halo: false,
        labelWordWrap: false,
        stroke: '#001f98'
      }
    }
  },
  behaviors: function behaviors(prev) {
    return [].concat(_toConsumableArray(prev), [{
      type: 'hover-activate-neighbors',
      onHover: function onHover(e) {
        e.view.setCursor('pointer');
      },
      onHoverEnd: function onHoverEnd(e) {
        e.view.setCursor('default');
      }
    }]);
  }
};
var FlowDiagram = function FlowDiagram(props) {
  var propsData = props.data,
    restProps = _objectWithoutProperties(props, _excluded);
  var data = useMemo(function () {
    return visGraphData2GraphData(propsData);
  }, [propsData]);
  var config = useGraphConfig('FlowDiagram', mergeGraphOptions(defaultConfig, getGraphOptionsByData(data)), restProps);
  return /*#__PURE__*/React.createElement(ADCFlowGraph, _extends({
    data: data
  }, config));
};
export default FlowDiagram;