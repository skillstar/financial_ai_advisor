"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PolygonMode = void 0;
var _turf = require("@turf/turf");
var _lodash = require("lodash");
var _constant = require("../constant");
var _utils = require("../utils");
var _lineMode = require("./line-mode");
var _helper = require("../constant/helper");
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var PolygonMode = exports.PolygonMode = /*#__PURE__*/function (_LineMode) {
  function PolygonMode() {
    _classCallCheck(this, PolygonMode);
    return _callSuper(this, PolygonMode, arguments);
  }
  _inherits(PolygonMode, _LineMode);
  return _createClass(PolygonMode, [{
    key: "dragItem",
    get: function get() {
      return this.dragPolygon;
    }
  }, {
    key: "editItem",
    get: function get() {
      return this.editPolygon;
    }
    /**
     * 获取polygon类型对应的render
     * @protected
     */
  }, {
    key: "polygonRender",
    get: function get() {
      return this.render.polygon;
    }
    /**
     * 获取正在被拖拽的线
     * @protected
     */
  }, {
    key: "dragPolygon",
    get: function get() {
      return this.getPolygonData().find(function (feature) {
        return feature.properties.isDrag;
      });
    }
    /**
     * 正在绘制的线
     * @protected
     */
  }, {
    key: "drawPolygon",
    get: function get() {
      return this.getPolygonData().find(function (feature) {
        return feature.properties.isDraw;
      });
    }
    /**
     * 当前高亮的结点
     * @protected
     */
  }, {
    key: "editPolygon",
    get: function get() {
      return this.getPolygonData().find(function (feature) {
        var _feature$properties = feature.properties,
          isActive = _feature$properties.isActive,
          isDraw = _feature$properties.isDraw;
        return !isDraw && isActive;
      });
    }
    /**
     * 当前悬停的线
     * @protected
     */
  }, {
    key: "hoverPolygon",
    get: function get() {
      return this.getPolygonData().find(function (feature) {
        return feature.properties.isHover;
      });
    }
  }, {
    key: "getDragPolygon",
    value: function getDragPolygon() {
      return this.dragPolygon;
    }
  }, {
    key: "getDrawPolygon",
    value: function getDrawPolygon() {
      return this.drawPolygon;
    }
  }, {
    key: "getEditPolygon",
    value: function getEditPolygon() {
      return this.editPolygon;
    }
  }, {
    key: "getRenderTypes",
    value: function getRenderTypes() {
      return ['polygon', 'line', 'dashLine', 'midPoint', 'point', 'text'];
    }
  }, {
    key: "getData",
    value: function getData() {
      var getOriginData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var polygons = this.getPolygonData();
      if (getOriginData) {
        return polygons;
      }
      return (0, _utils.joinMultiFeatures)(polygons);
    }
  }, {
    key: "getMainLayer",
    value: function getMainLayer() {
      var _this$render$polygon$, _this$render$polygon;
      return (_this$render$polygon$ = (_this$render$polygon = this.render.polygon) === null || _this$render$polygon === void 0 ? void 0 : _this$render$polygon.getLayers()) !== null && _this$render$polygon$ !== void 0 ? _this$render$polygon$ : [];
    }
  }, {
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      var newOptions = _objectSpread(_objectSpread({}, _get(_getPrototypeOf(PolygonMode.prototype), "getDefaultOptions", this).call(this, options)), {}, {
        areaOptions: false,
        helper: (0, _lodash.cloneDeep)(_helper.DEFAULT_POLYGON_HELPER_CONFIG)
      });
      if (options.areaOptions) {
        newOptions.areaOptions = _objectSpread(_objectSpread({}, _constant.DEFAULT_AREA_OPTIONS), options.areaOptions);
      }
      return newOptions;
    }
  }, {
    key: "getAreaTexts",
    value: function getAreaTexts(polygons) {
      var areaOptions = this.options.areaOptions;
      if (!areaOptions) {
        return [];
      }
      var format = areaOptions.format,
        showWhen = areaOptions.showWhen;
      var textList = [];
      var polygonData = polygons.filter(function (feature) {
        return feature.geometry.coordinates[0].length >= 4;
      });
      if (showWhen.includes('active')) {
        polygonData.filter(function (feature) {
          return feature.properties.isActive;
        }).forEach(function (feature) {
          textList.push((0, _utils.calcAreaText)(feature, {
            format: format
          }, {
            isActive: true
          }));
        });
      }
      if (showWhen.includes('normal')) {
        polygonData.filter(function (feature) {
          return !feature.properties.isActive;
        }).forEach(function (feature) {
          textList.push((0, _utils.calcAreaText)(feature, {
            format: format
          }, {
            isActive: false
          }));
        });
      }
      return textList;
    }
  }, {
    key: "getAllTexts",
    value: function getAllTexts() {
      return [].concat(_toConsumableArray(_get(_getPrototypeOf(PolygonMode.prototype), "getAllTexts", this).call(this)), _toConsumableArray(this.getAreaTexts(this.getPolygonData())));
    }
    /**
     * 获取线数据
     */
  }, {
    key: "getPolygonData",
    value: function getPolygonData() {
      return this.source.getRenderData('polygon');
    }
    /**
     * 设置线数据
     * @param data
     */
  }, {
    key: "setPolygonData",
    value: function setPolygonData(data) {
      return this.source.setRenderData('polygon', data);
    }
  }, {
    key: "handleCreatePolygon",
    value: function handleCreatePolygon(points, line) {
      var newPolygon = (0, _utils.createPolygonFeature)(points, {
        nodes: points,
        line: line,
        isActive: true,
        isDraw: true
      });
      this.setPolygonData(function (features) {
        return (0, _utils.updateTargetFeature)({
          target: newPolygon,
          data: [].concat(_toConsumableArray(features), [newPolygon]),
          otherHandler: function otherHandler(feature) {
            feature.properties.isActive = false;
          }
        });
      });
      return newPolygon;
    }
  }, {
    key: "handlePolygonUnClick",
    value: function handlePolygonUnClick(polygon) {
      this.clearActivePolygon();
      return polygon;
    }
  }, {
    key: "handlePolygonHover",
    value: function handlePolygonHover(polygon) {
      this.setCursor('polygonHover');
      if (!(0, _utils.isSameFeature)(polygon, this.hoverPolygon)) {
        this.setPolygonData(function (features) {
          return (0, _utils.updateTargetFeature)({
            target: polygon,
            data: features,
            targetHandler: function targetHandler(feature) {
              feature.properties.isHover = true;
            },
            otherHandler: function otherHandler(feature) {
              feature.properties.isHover = false;
            }
          });
        });
      }
      return polygon;
    }
  }, {
    key: "handlePolygonUnHover",
    value: function handlePolygonUnHover() {
      this.resetCursor();
      this.setPolygonData(function (features) {
        return features.map(function (feature) {
          feature.properties.isHover = false;
          return feature;
        });
      });
    }
  }, {
    key: "handlePolygonDragStart",
    value: function handlePolygonDragStart(polygon) {
      this.setActivePolygon(polygon, {
        isDrag: true
      });
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.setCursor('polygonDrag');
      return polygon;
    }
  }, {
    key: "bindPolygonRenderEvent",
    value: function bindPolygonRenderEvent() {
      var _this$polygonRender, _this$polygonRender2, _this$polygonRender3, _this$polygonRender4;
      (_this$polygonRender = this.polygonRender) === null || _this$polygonRender === void 0 ? void 0 : _this$polygonRender.on(_constant.RenderEvent.UnClick, this.onPolygonUnClick.bind(this));
      (_this$polygonRender2 = this.polygonRender) === null || _this$polygonRender2 === void 0 ? void 0 : _this$polygonRender2.on(_constant.RenderEvent.Mousemove, this.onPolygonHover.bind(this));
      (_this$polygonRender3 = this.polygonRender) === null || _this$polygonRender3 === void 0 ? void 0 : _this$polygonRender3.on(_constant.RenderEvent.Mouseout, this.onPolygonUnHover.bind(this));
      (_this$polygonRender4 = this.polygonRender) === null || _this$polygonRender4 === void 0 ? void 0 : _this$polygonRender4.on(_constant.RenderEvent.Dragstart, this.onPolygonDragStart.bind(this));
      // this.polygonRender?.on(
      //   RenderEvent.dragging,
      //   this.onPolygonDragging.bind(this),
      // );
      // this.polygonRender?.on(
      //   RenderEvent.dragend,
      //   this.onPolygonDragEnd.bind(this),
      // );
    }
  }, {
    key: "syncPolygonNodes",
    value: function syncPolygonNodes(polygon, nodes) {
      var positions = (0, _turf.coordAll)((0, _turf.featureCollection)([].concat(_toConsumableArray(nodes), [(0, _lodash.first)(nodes)])));
      var _polygon$properties = polygon.properties,
        isDraw = _polygon$properties.isDraw,
        line = _polygon$properties.line;
      polygon.properties.nodes = nodes;
      polygon.geometry.coordinates = [(0, _turf.booleanClockwise)((0, _turf.lineString)(positions)) ? positions : positions.reverse()];
      this.setPolygonData(function (features) {
        return features.map(function (feature) {
          if ((0, _utils.isSameFeature)(feature, polygon)) {
            return polygon;
          }
          return feature;
        });
      });
      if (!(0, _utils.isSameFeature)(this.drawPolygon, polygon)) {
        var oldLineNodes = line.properties.nodes;
        var newLineNodes = _toConsumableArray(nodes);
        var firstNode = (0, _lodash.first)(newLineNodes);
        if (oldLineNodes.length === nodes.length) {
          newLineNodes.push((0, _utils.createPointFeature)(firstNode.geometry.coordinates));
        } else {
          newLineNodes.push((0, _lodash.last)(oldLineNodes));
        }
        var lastNode = (0, _lodash.last)(newLineNodes);
        if (!(0, _lodash.isEqual)(firstNode.geometry.coordinates, lastNode.geometry.coordinates)) {
          lastNode.geometry.coordinates = (0, _lodash.cloneDeep)(firstNode.geometry.coordinates);
        }
        this.syncLineNodes(line, newLineNodes);
      }
      return polygon;
    }
  }, {
    key: "setActivePolygon",
    value: function setActivePolygon(polygon) {
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.setActiveLine(polygon.properties.line, properties);
      this.setPolygonData(function (features) {
        return (0, _utils.updateTargetFeature)({
          target: polygon,
          data: features,
          targetHandler: function targetHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: false,
              isActive: true,
              isDrag: false,
              isHover: false
            }, properties);
          },
          otherHandler: function otherHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: false,
              isActive: false,
              isDrag: false
            });
          }
        });
      });
      this.setTextData(this.getAllTexts());
      return polygon;
    }
  }, {
    key: "clearActivePolygon",
    value: function clearActivePolygon() {
      this.setPolygonData(function (features) {
        return features.map(function (feature) {
          feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
            isDrag: false,
            isActive: false,
            isHover: false
          });
          return feature;
        });
      });
      this.clearActiveLine();
    }
  }, {
    key: "onLineDragStart",
    value: function onLineDragStart(e) {
      var line = _get(_getPrototypeOf(PolygonMode.prototype), "onLineDragStart", this).call(this, e);
      var polygon = this.getPolygonData().find(function (feature) {
        return (0, _utils.isSameFeature)(feature.properties.line, line);
      });
      if (polygon) {
        this.setActivePolygon(polygon, {
          isDrag: true
        });
        this.emit(_constant.DrawEvent.DragStart, polygon, this.getPolygonData());
      }
      return line;
    }
  }, {
    key: "onLineUnClick",
    value: function onLineUnClick(e) {
      return this.editLine;
    }
  }, {
    key: "onLineDragEnd",
    value: function onLineDragEnd(e) {
      var feature = _get(_getPrototypeOf(PolygonMode.prototype), "onLineDragEnd", this).call(this, e);
      var dragPolygon = this.dragPolygon;
      if (feature && dragPolygon) {
        dragPolygon.properties.isDrag = false;
        this.emit(_constant.DrawEvent.DragEnd, dragPolygon, this.getPolygonData());
        this.emit(_constant.DrawEvent.Edit, dragPolygon, this.getPolygonData());
      }
      return feature;
    }
  }, {
    key: "onPolygonUnClick",
    value: function onPolygonUnClick(e) {
      var editPolygon = this.editPolygon;
      if (!editPolygon) {
        return;
      }
      return this.handlePolygonUnClick(editPolygon);
    }
  }, {
    key: "onPolygonHover",
    value: function onPolygonHover(e) {
      if (this.drawPolygon) {
        return;
      }
      if (!this.dragPolygon) {
        this.setHelper('polygonHover');
      }
      return this.handlePolygonHover(e.feature);
    }
  }, {
    key: "onPolygonUnHover",
    value: function onPolygonUnHover(e) {
      if (this.drawPolygon) {
        return;
      }
      this.setHelper(this.addable ? 'draw' : null);
      return this.handlePolygonUnHover();
    }
  }, {
    key: "onPolygonDragStart",
    value: function onPolygonDragStart(e) {
      if (!this.options.editable || this.drawPolygon) {
        return;
      }
      var polygon = e.feature;
      this.previousPosition = (0, _utils.getPosition)(e);
      this.setHelper('polygonDrag');
      this.emit(_constant.DrawEvent.DragStart, polygon, this.getPolygonData());
      return this.handlePolygonDragStart(polygon);
    }
  }, {
    key: "onMidPointClick",
    value: function onMidPointClick(e) {
      var editPolygon = this.editPolygon;
      var feature = _get(_getPrototypeOf(PolygonMode.prototype), "onMidPointClick", this).call(this, e);
      if (feature && editPolygon) {
        var lineNodes = editPolygon.properties.line.properties.nodes;
        this.syncPolygonNodes(editPolygon, lineNodes.slice(0, lineNodes.length - 1));
        this.setActivePolygon(editPolygon);
      }
      return feature;
    }
  }, {
    key: "onPointDragEnd",
    value: function onPointDragEnd(e) {
      var editPolygon = this.editPolygon;
      var feature = _get(_getPrototypeOf(PolygonMode.prototype), "onPointDragEnd", this).call(this, e);
      if (feature && editPolygon) {
        this.emit(_constant.DrawEvent.Edit, editPolygon, this.getPolygonData());
      }
      return feature;
    }
  }, {
    key: "enablePolygonRenderAction",
    value: function enablePolygonRenderAction() {
      var _this$polygonRender5;
      var editable = this.options.editable;
      (_this$polygonRender5 = this.polygonRender) === null || _this$polygonRender5 === void 0 ? void 0 : _this$polygonRender5.enableUnClick();
      if (editable) {
        var _this$polygonRender6, _this$polygonRender7;
        (_this$polygonRender6 = this.polygonRender) === null || _this$polygonRender6 === void 0 ? void 0 : _this$polygonRender6.enableHover();
        (_this$polygonRender7 = this.polygonRender) === null || _this$polygonRender7 === void 0 ? void 0 : _this$polygonRender7.enableDrag();
      }
    }
  }, {
    key: "disablePolygonRenderAction",
    value: function disablePolygonRenderAction() {
      var _this$polygonRender8, _this$polygonRender9, _this$polygonRender10;
      (_this$polygonRender8 = this.polygonRender) === null || _this$polygonRender8 === void 0 ? void 0 : _this$polygonRender8.disableUnClick();
      (_this$polygonRender9 = this.polygonRender) === null || _this$polygonRender9 === void 0 ? void 0 : _this$polygonRender9.disableHover();
      (_this$polygonRender10 = this.polygonRender) === null || _this$polygonRender10 === void 0 ? void 0 : _this$polygonRender10.disableDrag();
    }
  }, {
    key: "bindEnableEvent",
    value: function bindEnableEvent() {
      _get(_getPrototypeOf(PolygonMode.prototype), "bindEnableEvent", this).call(this);
      this.enableSceneRenderAction();
      this.enablePointRenderAction();
      this.enableLineRenderAction();
      this.enableMidPointRenderAction();
      this.enablePolygonRenderAction();
    }
  }, {
    key: "unbindEnableEvent",
    value: function unbindEnableEvent() {
      _get(_getPrototypeOf(PolygonMode.prototype), "unbindEnableEvent", this).call(this);
      this.disableSceneRenderAction();
      this.disablePointRenderAction();
      this.disableLineRenderAction();
      this.disableMidPointRenderAction();
      this.disablePolygonRenderAction();
    }
  }, {
    key: "bindThis",
    value: function bindThis() {
      _get(_getPrototypeOf(PolygonMode.prototype), "bindThis", this).call(this);
      this.bindPointRenderEvent = this.bindPointRenderEvent.bind(this);
      this.bindSceneEvent = this.bindSceneEvent.bind(this);
      this.bindLineRenderEvent = this.bindLineRenderEvent.bind(this);
      this.bindMidPointRenderEvent = this.bindMidPointRenderEvent.bind(this);
      this.bindPolygonRenderEvent = this.bindPolygonRenderEvent.bind(this);
    }
  }, {
    key: "setActiveFeature",
    value: function setActiveFeature(target) {
      var targetFeature = this.getTargetFeature(target);
      if (targetFeature) {
        this.setActivePolygon(targetFeature);
      } else {
        this.clearActivePolygon();
      }
    }
  }, {
    key: "resetFeatures",
    value: function resetFeatures() {
      var features = this.getPolygonData();
      if (this.drawPolygon) {
        features = features.filter(function (feature) {
          return !feature.properties.isDraw;
        });
        this.source.setData({
          point: [],
          dashLine: [],
          midPoint: []
        });
        this.setLineData(function (features) {
          return features.filter(function (feature) {
            return !feature.properties.isDraw;
          });
        });
        this.setTextData(function (features) {
          return features.filter(function (feature) {
            return !feature.properties.isActive;
          });
        });
      }
      if (this.editPolygon) {
        this.handlePolygonUnClick(this.editPolygon);
      }
      this.setPolygonData(features.map(function (feature) {
        feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
          isDrag: false,
          isActive: false,
          isHover: false
        });
        return feature;
      }));
    }
  }]);
}(_lineMode.LineMode);