var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/ChartCodeRender/index.tsx
var ChartCodeRender_exports = {};
__export(ChartCodeRender_exports, {
  withChartCode: () => withChartCode,
  withDefaultChartCode: () => withDefaultChartCode
});
module.exports = __toCommonJS(ChartCodeRender_exports);
var import_lodash = require("lodash");
var import_react = __toESM(require("react"));
var import_export = require("../export");
var import_VisChart = require("./VisChart");
var RenderDefaultCode = (props) => {
  const { children, className = "", node, ...rest } = props;
  return /* @__PURE__ */ import_react.default.createElement("code", { ...rest, className }, children);
};
var withCodeBlock = (options) => {
  return function CodeBlock(props) {
    var _a;
    const { children, className = "" } = props;
    const content = String(children).trim();
    const isVisChart = className.includes("language-vis-chart");
    const {
      components,
      languageRenderers,
      defaultRenderer: DefaultRenderer,
      debug,
      loadingTimeout = 5e3,
      style
    } = options;
    if (isVisChart) {
      return /* @__PURE__ */ import_react.default.createElement(
        import_VisChart.RenderVisChart,
        {
          style,
          content,
          components,
          debug,
          loadingTimeout
        }
      );
    }
    const languageName = ((_a = className.match(/language-(.*)/)) == null ? void 0 : _a[1]) || "";
    const extraLanguageRenderers = languageRenderers;
    const ExtraRendererComponent = extraLanguageRenderers && extraLanguageRenderers[languageName];
    if (ExtraRendererComponent) {
      return /* @__PURE__ */ import_react.default.createElement(ExtraRendererComponent, { ...props });
    }
    return DefaultRenderer ? /* @__PURE__ */ import_react.default.createElement(DefaultRenderer, { ...props }) : /* @__PURE__ */ import_react.default.createElement(RenderDefaultCode, { ...props });
  };
};
var withChartCode = (options) => {
  return withCodeBlock(options);
};
var withDefaultChartCode = (options) => {
  return withChartCode({
    ...options,
    components: {
      ...import_export.DEFAULT_CHART_COMPONENTS,
      ...(0, import_lodash.get)(options, "components", {})
    }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  withChartCode,
  withDefaultChartCode
});
