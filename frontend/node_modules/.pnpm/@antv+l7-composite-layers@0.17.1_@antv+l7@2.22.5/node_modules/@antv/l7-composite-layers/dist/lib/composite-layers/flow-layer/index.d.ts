import { LineLayerOptions } from '../../core-layers/line-layer/types';
import { PointLayerOptions } from '../../core-layers/point-layer/types';
import { TextLayerOptions } from '../../core-layers/text-layer/types';
import { CompositeLayer } from '../../core/composite-layer';
import { ICoreLayer, Scene } from '../../types';
import { DataProvider } from './data';
import { ClusterFlow, ClusterLocation, FlowDataProviderState, FlowLayerOptions } from './types';
export declare class FlowLayer extends CompositeLayer<FlowLayerOptions> {
    constructor(options: FlowLayerOptions);
    /**
     * 默认配置项
     */
    static DefaultOptions: FlowLayerOptions;
    /**
     * 复合图层类型
     */
    type: import("../../types").CompositeLayerType;
    /**
     * 数据计算中心
     */
    dataProvider: DataProvider;
    /**
     * 数据计算中心状态管理
     */
    dataProviderState: FlowDataProviderState;
    /**
     * 当前地图匹配的层级
     */
    matchZoom: number;
    protected get layer(): ICoreLayer;
    get circleLayer(): ICoreLayer | undefined;
    get lineLayer(): ICoreLayer | undefined;
    get locationNameLayer(): ICoreLayer | undefined;
    get circleHighlightLayer(): ICoreLayer | undefined;
    get circleSelectLayer(): ICoreLayer | undefined;
    get lineHighlightLayer(): ICoreLayer | undefined;
    get lineSelectLayer(): ICoreLayer | undefined;
    /**
     * 获取默认配置
     */
    getDefaultOptions(): Partial<FlowLayerOptions>;
    protected createSubLayers(): ICoreLayer[];
    /**
     * 更新
     */
    update(options: Partial<FlowLayerOptions>): void;
    addTo(scene: Scene): void;
    remove(): void;
    protected updateSubLayers(): void;
    protected initSubLayersEvent(): void;
    protected onMapChange: import("lodash").DebouncedFunc<() => void>;
    protected updateClusterState(): void;
    protected getCircleLayerOptions(): PointLayerOptions;
    protected getLineLayerOptions(): LineLayerOptions;
    protected getLocationNameLayerOptions(): Promise<TextLayerOptions>;
    protected getCircleHighlightLayerOptions(): Omit<PointLayerOptions, 'source'>;
    protected getCircleSelectLayerOptions(): Omit<PointLayerOptions, 'source'>;
    protected getLineHighlightLayerOptions(): Omit<LineLayerOptions, 'source'>;
    protected getLineSelectLayerOptions(): Omit<LineLayerOptions, 'source'>;
    protected onCircleMouseMove: (e: any) => void;
    protected onCircleMouseOut: () => void;
    protected onLineMouseMove: (e: any) => void;
    protected onLineMouseOut: () => void;
    protected onCircleClick: (e: any) => void;
    protected onLineClick: (e: any) => void;
    protected renderHighlightLayers({ locations, flows }: {
        locations: ClusterLocation[];
        flows: ClusterFlow[];
    }): void;
    protected renderSelectLayers({ locations, flows }: {
        locations: ClusterLocation[];
        flows: ClusterFlow[];
    }): void;
    protected clearActiveLayers(): void;
    protected clearHighlightLayers(): void;
    protected clearSelectLayers(): void;
    private _getCircleLayerActiveData;
    private _getLineLayerActiveData;
    private _getFullActiveOptions;
    private _getFullSelectOptions;
    private _getCircleActiveLayerOptions;
    private _getLineActiveLayerOptions;
}
