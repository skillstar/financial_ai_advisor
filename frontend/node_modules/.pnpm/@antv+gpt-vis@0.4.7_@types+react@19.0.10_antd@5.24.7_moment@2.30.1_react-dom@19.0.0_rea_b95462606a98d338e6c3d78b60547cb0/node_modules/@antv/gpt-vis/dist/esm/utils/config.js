import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { isPlainObject, mergeWith } from 'lodash';
import { DEFAULT_GLOBAL_CONFIG } from "../constants";
export var mergeGlobalConfig = function mergeGlobalConfig(config) {
  var globalConfig = mergeWith({}, DEFAULT_GLOBAL_CONFIG, config, function (objValue) {
    if (Array.isArray(objValue)) {
      return objValue;
    }
  });
  return globalConfig;
};
function mergeGraphFunctions(key, currValue, prevValue) {
  if (['plugins', 'behaviors', 'transforms'].includes(key)) {
    return function (prev) {
      return currValue(prev);
    };
  } else {
    return function (datum) {
      // @ts-ignore this refers to the graph instance
      var value = currValue.call(this, datum);
      if (isPlainObject(value)) return mergeGraphOptions(prevValue, value);
      return value;
    };
  }
}
export function mergeGraphOptions() {
  if (arguments.length === 0) return {};
  var merged = _objectSpread({}, arguments.length <= 0 ? undefined : arguments[0]);
  for (var i = 1; i < arguments.length; i++) {
    var currentOptions = i < 0 || arguments.length <= i ? undefined : arguments[i];
    for (var key in currentOptions) {
      if (currentOptions.hasOwnProperty(key)) {
        var currValue = currentOptions[key];
        var prevValue = merged[key];
        if (['component', 'data'].includes(key)) {
          merged[key] = currValue;
        } else if (typeof currValue === 'function') {
          merged[key] = mergeGraphFunctions(key, currValue, prevValue);
        } else if (isPlainObject(currValue) && isPlainObject(prevValue)) {
          merged[key] = mergeGraphOptions(prevValue, currValue);
        } else {
          merged[key] = currValue;
        }
      }
    }
  }
  return merged;
}