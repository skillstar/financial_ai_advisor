function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
import { Control, DOM } from '@antv/l7';
import { DrawBtnActiveClassName, DrawBtnClassName, DrawControlClassName, DrawIconMap, DrawInstanceMap, DrawTypeAttrName, DrawTypeList } from './constant';
import { getParentByClassName } from '../typings';
import './iconfont.js';
import "./index.css";
import { ControlEvent, DrawEvent } from '../constant';
import { debounce, fromPairs, omit, toPairs } from 'lodash';
export var DrawControl = /*#__PURE__*/function (_Control) {
  function DrawControl(scene) {
    var _this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, DrawControl);
    _this = _callSuper(this, DrawControl, [options]);
    _this.controlOption = void 0;
    _this.sceneInstance = void 0;
    _this.drawMap = {};
    _this.btnMap = {};
    _this.activeType = null;
    _this.emitDataChange = debounce(function () {
      _this.emit(ControlEvent.DataChange, _this.getDrawData());
    }, 16);
    _this.emitDrawSelect = function (drawType, feature) {
      _this.emit(ControlEvent.DrawSelect, drawType, feature);
    };
    _this.sceneInstance = scene;
    _this.controlOption = _objectSpread(_objectSpread({}, _this.getDefault()), options || {});
    _this.onBtnClick = _this.onBtnClick.bind(_this);
    return _this;
  }
  _inherits(DrawControl, _Control);
  return _createClass(DrawControl, [{
    key: "getActiveType",
    value: function getActiveType() {
      return this.activeType;
    }
    // @ts-ignore
  }, {
    key: "getDefault",
    value: function getDefault() {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(DrawControl.prototype), "getDefault", this).call(this)), {}, {
        className: '',
        buttonClassName: '',
        activeButtonClassName: '',
        style: '',
        position: 'topleft',
        commonDrawOptions: {},
        drawConfig: {
          point: true,
          line: true,
          polygon: true,
          rect: true,
          circle: true,
          clear: true
        }
      });
    }
  }, {
    key: "addTo",
    value: function addTo(container) {
      _get(_getPrototypeOf(DrawControl.prototype), "addTo", this).call(this, container);
      this.init();
      return this;
    }
  }, {
    key: "onAdd",
    value: function onAdd() {
      var _this$controlOption = this.controlOption,
        className = _this$controlOption.className,
        style = _this$controlOption.style;
      var container = DOM.create('div', "".concat(DrawControlClassName, " ").concat(className));
      if (style) {
        container.setAttribute('style', style);
      }
      return container;
    }
  }, {
    key: "onRemove",
    value: function onRemove() {
      Object.values(this.drawMap).forEach(function (draw) {
        draw.clear(true);
      });
    }
  }, {
    key: "init",
    value: function init() {
      var _this2 = this,
        _this$container;
      var btnList = [];
      Object.entries(this.controlOption.drawConfig).filter(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
          _ = _ref2[0],
          options = _ref2[1];
        return options;
      }).sort(function (item1, item2) {
        var _item = _slicedToArray(item1, 2),
          options1 = _item[1];
        var _item2 = _slicedToArray(item2, 2),
          options2 = _item2[1];
        var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;
        var order1 = typeof options1 === 'boolean' ? MAX_SAFE_INTEGER : options1.order;
        var order2 = typeof options2 === 'boolean' ? MAX_SAFE_INTEGER : options2.order;
        return order1 - order2;
      }).map(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
          drawType = _ref4[0],
          options = _ref4[1];
        return [drawType, _typeof(options) === 'object' ? omit(options, 'order') : options];
      }).forEach(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
          btnType = _ref6[0],
          options = _ref6[1];
        if (_typeof(options) === 'object' && options.button) {
          var btn = options.button;
          if (!btn.classList.contains('l7-draw-control__btn')) {
            btn.classList.add('l7-draw-control__btn');
          }
          _this2.btnMap[btnType] = btn;
          btnList.push(btn);
        } else if (options && DrawTypeList.includes(btnType)) {
          var newBtn = _this2.initBtn(btnType);
          newBtn.addEventListener('click', _this2.onBtnClick);
          btnList.push(newBtn);
          _this2.btnMap[btnType] = newBtn;
          // @ts-ignore;
          var Draw = DrawInstanceMap[btnType];
          if (Draw && _this2.sceneInstance) {
            var draw = new Draw(_this2.sceneInstance, _objectSpread(_objectSpread({}, _this2.controlOption.commonDrawOptions), typeof options === 'boolean' ? {} : options));
            draw.on(DrawEvent.Change, _this2.emitDataChange);
            draw.on(DrawEvent.Select, function (feature) {
              _this2.emitDrawSelect(btnType, feature);
              if (feature) {
                Object.values(_this2.drawMap).forEach(function (drawInstance) {
                  if (drawInstance !== draw) {
                    drawInstance.setActiveFeature(null);
                  }
                });
              }
            });
            _this2.drawMap[btnType] = draw;
          }
        }
      });
      (_this$container = this.container).append.apply(_this$container, btnList);
      if (this.controlOption.defaultActiveType) {
        this.onDrawClick(this.controlOption.defaultActiveType);
      }
    }
  }, {
    key: "getDrawData",
    value: function getDrawData() {
      return fromPairs(toPairs(this.drawMap).map(function (_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2),
          drawType = _ref8[0],
          draw = _ref8[1];
        return [drawType, draw.getData()];
      }));
    }
  }, {
    key: "getTypeDraw",
    value: function getTypeDraw(type) {
      var _this$drawMap$type;
      return (_this$drawMap$type = this.drawMap[type]) !== null && _this$drawMap$type !== void 0 ? _this$drawMap$type : null;
    }
  }, {
    key: "onBtnClick",
    value:
    /**
     * 按钮的点击事件
     * @param e
     */
    function onBtnClick(e) {
      var btn = getParentByClassName(e.target, DrawBtnClassName);
      if (!btn) {
        return;
      }
      var btnType = btn.getAttribute(DrawTypeAttrName);
      if (btnType === 'clear') {
        this.clearDrawData();
      } else {
        this.onDrawClick(btnType);
      }
    }
    /**
     * 设置当前激活的绘制类型
     * @param type
     */
  }, {
    key: "setActiveType",
    value: function setActiveType(type) {
      var newActiveType = null;
      var oldActiveType = this.activeType;
      if (oldActiveType) {
        var _this$drawMap$oldActi;
        var targetBtn = this.btnMap[oldActiveType];
        if (targetBtn) {
          DOM.removeClass(targetBtn, DrawBtnActiveClassName);
          var activeButtonClassName = this.controlOption.activeButtonClassName;
          if (activeButtonClassName) {
            DOM.removeClass(targetBtn, activeButtonClassName);
          }
        }
        (_this$drawMap$oldActi = this.drawMap[oldActiveType]) === null || _this$drawMap$oldActi === void 0 ? void 0 : _this$drawMap$oldActi.disable();
        newActiveType = null;
      }
      if (oldActiveType !== type && type) {
        var _this$drawMap$type2;
        (_this$drawMap$type2 = this.drawMap[type]) === null || _this$drawMap$type2 === void 0 ? void 0 : _this$drawMap$type2.enable();
        var _targetBtn = this.btnMap[type];
        _targetBtn && DOM.addClass(_targetBtn, "".concat(DrawBtnActiveClassName, " ").concat(this.controlOption.activeButtonClassName));
        newActiveType = type;
      }
      this.activeType = newActiveType;
      this.emit(ControlEvent.DrawChange, newActiveType);
    }
    /**
     * 绘制按钮点击的回调
     * @param type
     */
  }, {
    key: "onDrawClick",
    value: function onDrawClick(type) {
      this.setActiveType(type);
    }
    /**
     * 清空绘制数据
     */
  }, {
    key: "clearDrawData",
    value: function clearDrawData() {
      Object.values(this.drawMap).forEach(function (draw) {
        draw === null || draw === void 0 ? void 0 : draw.clear();
      });
      this.emit(ControlEvent.DrawClear);
    }
    /**
     * 创建按钮
     * @param type
     * @returns
     */
  }, {
    key: "initBtn",
    value: function initBtn(type) {
      var btn = DOM.create('button', "".concat(DrawBtnClassName, " ").concat(this.controlOption.buttonClassName));
      btn.innerHTML = "<svg class=\"l7-draw-icon\" aria-hidden=\"true\">\n      <use xlink:href=\"".concat(DrawIconMap[type], "\"></use>\n    </svg>");
      btn.setAttribute(DrawTypeAttrName, type);
      btn.type = 'button';
      return btn;
    }
  }]);
}(Control);