var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/config.ts
var config_exports = {};
__export(config_exports, {
  mergeGlobalConfig: () => mergeGlobalConfig,
  mergeGraphOptions: () => mergeGraphOptions
});
module.exports = __toCommonJS(config_exports);
var import_lodash = require("lodash");
var import_constants = require("../constants");
var mergeGlobalConfig = (config) => {
  const globalConfig = (0, import_lodash.mergeWith)({}, import_constants.DEFAULT_GLOBAL_CONFIG, config, (objValue) => {
    if (Array.isArray(objValue)) {
      return objValue;
    }
  });
  return globalConfig;
};
function mergeGraphFunctions(key, currValue, prevValue) {
  if (["plugins", "behaviors", "transforms"].includes(key)) {
    return (prev) => currValue(prev);
  } else {
    return function(datum) {
      const value = currValue.call(this, datum);
      if ((0, import_lodash.isPlainObject)(value))
        return mergeGraphOptions(prevValue, value);
      return value;
    };
  }
}
function mergeGraphOptions(...options) {
  if (options.length === 0)
    return {};
  const merged = { ...options[0] };
  for (let i = 1; i < options.length; i++) {
    const currentOptions = options[i];
    for (const key in currentOptions) {
      if (currentOptions.hasOwnProperty(key)) {
        const currValue = currentOptions[key];
        const prevValue = merged[key];
        if (["component", "data"].includes(key)) {
          merged[key] = currValue;
        } else if (typeof currValue === "function") {
          merged[key] = mergeGraphFunctions(key, currValue, prevValue);
        } else if ((0, import_lodash.isPlainObject)(currValue) && (0, import_lodash.isPlainObject)(prevValue)) {
          merged[key] = mergeGraphOptions(prevValue, currValue);
        } else {
          merged[key] = currValue;
        }
      }
    }
  }
  return merged;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mergeGlobalConfig,
  mergeGraphOptions
});
