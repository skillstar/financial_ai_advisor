function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
import chalk from 'chalk';
var dateConfigurations = {
  '01-01_01-05': ['🎉', '🪩'],
  // New Year's Day
  '01-29-2025': ['🐍', '🧧'],
  // Chinese New Year 2025
  '02-14': ['🌹', '🥀'],
  // Valentine's Day
  '03-04-2025': ['🥞', '🍽️'],
  // Pancake Day 2025
  '03-14': ['🥧', '🍽️'],
  // Pi Day
  '03-17': ['🍀', '⬜️'],
  // St Patrick's Day
  '04-01': ['🃏', '🕳️'],
  // April Fool's Day
  '04-10-2025_04-20-2025': ['🐣', '🥚'],
  // Easter 2025
  '04-22': ['🌎', '⬜️'],
  // Earth Day
  '05-04': ['⭐️', '🌌'],
  // Star Wars Day
  '05-20': ['🐝', '🌸'],
  // World Bee Day
  '05-30': ['🥔', '⬜️'],
  // International Day of Potato
  '06-03': ['🚲', '⬜️'],
  // World Bicycle Day
  '06-05': ['🌳', '⬜️'],
  // World Environment Day
  '06-08': ['🌊', '⬜️'],
  // World Oceans Day
  '06-19_06-23': ['☀️', '☁️'],
  // Summer Solstice (21st June)
  '07-04': ['🎆', '⬛️'],
  // Independence Day (US)
  '07-01-2024_07-14-2024': ['🎾', '⬛️'],
  // Wimbledon 2024 (UK)
  '07-20': ['🌝', '🌚'],
  // International Moon Day
  '09-05': ['💖', '🤍'],
  // International Charity Day
  '09-21': ['☮️', '⬛️'],
  // International Day of Peace
  '10-01': ['☕️', '🕘'],
  // International Coffee Day
  '10-24_10-31': ['🎃', '🦇'],
  // Halloween
  '11-28-2024': ['🦃', '🍂'],
  // Thanksgiving (US)
  '12-01_12-31': ['⛄️', '🧊'] // Winter (Northern Hemisphere)
};
var getProgressConfig = function getProgressConfig() {
  var currentDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
  var today = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate()).getTime();
  var matchingConfig = Object.entries(dateConfigurations).find(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
      dateRange = _ref2[0];
    var _dateRange$split = dateRange.split('_'),
      _dateRange$split2 = _slicedToArray(_dateRange$split, 2),
      startDateString = _dateRange$split2[0],
      endDateString = _dateRange$split2[1];
    var _startDateString$spli = startDateString.split('-').map(Number),
      _startDateString$spli2 = _slicedToArray(_startDateString$spli, 3),
      startMonth = _startDateString$spli2[0],
      startDay = _startDateString$spli2[1],
      _startDateString$spli3 = _startDateString$spli2[2],
      startYear = _startDateString$spli3 === void 0 ? currentDate.getFullYear() : _startDateString$spli3;
    var startDate = new Date(startYear, startMonth - 1, startDay).getTime();
    if (!endDateString) {
      return startDate === today;
    }
    var _endDateString$split$ = endDateString.split('-').map(Number),
      _endDateString$split$2 = _slicedToArray(_endDateString$split$, 3),
      endMonth = _endDateString$split$2[0],
      endDay = _endDateString$split$2[1],
      _endDateString$split$3 = _endDateString$split$2[2],
      endYear = _endDateString$split$3 === void 0 ? currentDate.getFullYear() : _endDateString$split$3;
    var endDate = new Date(endYear, endMonth - 1, endDay).getTime();
    return startDate <= today && endDate >= today;
  });
  return matchingConfig ? [matchingConfig[1], 20].flat() : [chalk.green("\u2588"), chalk.bgWhite(' '), 40];
};
export { getProgressConfig };