"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RegionLocation = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _lodash = require("lodash");
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../utils");
var _hooks = require("../LarkMap/hooks");
var _constant = require("./constant");
require("./index.css");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const RegionLocation = ({
  className,
  style,
  searchParams,
  transformBounds,
  onChange
}) => {
  const scene = (0, _hooks.useScene)();
  const [text, setText] = (0, _react.useState)('-');
  (0, _react.useEffect)(() => {
    const onMapChange = async () => {
      if (!scene) {
        return;
      }
      const getPointAddress = (lng, lat) => {
        return new Promise((resolve, reject) => {
          fetch((0, _utils.urlStringify)(_constant.GAO_DE_API_URL, {
            ...searchParams,
            location: `${lng},${lat}`
          })).then(res => res.json()).then(data => {
            if (data.status === '1') {
              const {
                country,
                province,
                city,
                district,
                township
              } = data.regeocode.addressComponent;
              resolve([country, province, city, district, township].filter(item => typeof item === 'string' && item));
            } else {
              reject(data);
            }
          });
        });
      };
      let [point1, point2] = scene.getBounds();
      if (transformBounds) {
        [point1, point2] = transformBounds([point1, point2]);
      }
      const [address1, address2] = await Promise.all([getPointAddress(...point1), getPointAddress(...point2)]);
      const newText = address1.length && address2.length ? (0, _lodash.intersection)(address1, address2).join(' ') : '-';
      setText(newText);
      onChange?.(newText, [point1, point2]);
    };
    const onDebounceMapChange = (0, _lodash.debounce)(onMapChange, 500, {
      maxWait: 500
    });
    onMapChange();
    scene?.on('mapchange', onDebounceMapChange);
    return () => {
      scene?.off('mapchange', onDebounceMapChange);
    };
  }, [onChange, scene, searchParams, transformBounds]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)([className, _constant.CLS_PREFIX]),
    style: style
  }, text);
};
exports.RegionLocation = RegionLocation;