/*
 * @name         : 地图状态同步方法
 * @Description  : 用于将多个地图动作、视角同步
 * @Principle    : 监听所有地图场景的 mapmove、zoomchange、rotate 等事件。触发时，解绑自己事件 => 同步所有的地图状态 => 重新添加监听
 */

import { isNumber } from 'lodash-es';
// 通过 Scene 获取到地图引擎类型
function getMapType(scene) {
  var mapVersion = scene.getMapService().version;
  return mapVersion !== null && mapVersion !== void 0 && mapVersion.includes('MAPBOX') ? 'Mapbox' : 'Gaode';
}

// 根据不同地图引擎类型，设置地图的状态「缩放层级、地图中心点、旋转角、倾角」
var updateSceneStatus = function updateSceneStatus(scene, status) {
  var mapType = getMapType(scene);
  var zoom = status.zoom,
    center = status.center,
    pitch = status.pitch,
    rotation = status.rotation;
  if (mapType === 'Gaode') {
    var map = scene === null || scene === void 0 ? void 0 : scene.map;
    // 高德地图关闭动画效果
    if (center) map.setCenter(center, true);
    if (isNumber(zoom)) map === null || map === void 0 || map.setZoom(zoom + 1, true);
    if (isNumber(rotation)) map === null || map === void 0 || map.setRotation(360 - rotation, true);
    if (isNumber(pitch)) map === null || map === void 0 || map.setPitch(pitch, true);
  } else {
    if (isNumber(zoom)) scene === null || scene === void 0 || scene.setZoom(zoom);
    if (center) scene === null || scene === void 0 || scene.setCenter(center);
    if (isNumber(rotation)) scene.setRotation(rotation);
    if (isNumber(pitch)) scene === null || scene === void 0 || scene.setPitch(pitch);
  }
};

/**
 *
 * @param scenes l7实例化的 scene 的数组
 * @param options
 * @param options.zoomGap number  同步的缩放层级差距
 * @param options.mainIndex number  主场景的数组索引，用于搭配 zoomGap
 * @returns Function  清除同步状态的监听函数。
 */
export function syncScene(scenes, options) {
  var _ref = options !== null && options !== void 0 ? options : {},
    _ref$zoomGap = _ref.zoomGap,
    zoomGap = _ref$zoomGap === void 0 ? 0 : _ref$zoomGap,
    _ref$mainIndex = _ref.mainIndex,
    mainIndex = _ref$mainIndex === void 0 ? 0 : _ref$mainIndex;
  var listeners = [];
  var handlers = [];

  // 添加地图事件监听
  var listen = function listen(index) {
    var scene = scenes[index];
    scene.on('mapmove', handlers[index]);
    // Gaode 地图调整倾角和旋转角的事件
    scene.on('dragging', handlers[index]);
    // Mapbox 地图调整倾角和旋转角的事件
    scene.on('rotate', handlers[index]);
    scene.on('zoomchange', handlers[index]);
    return function () {
      scene.off('mapmove', handlers[index]);
      scene.off('dragging', handlers[index]);
      scene.off('zoomchange', handlers[index]);
      scene.off('rotate', handlers[index]);
    };
  };
  var clearListener = function clearListener() {
    listeners === null || listeners === void 0 || listeners.forEach(function (call) {
      return call();
    });
    listeners.length = 0;
  };

  // 根据指定索引的 scene 同步其他 scene 状态
  var moveScenePosition = function moveScenePosition(index) {
    var movedScene = scenes[index];
    var center = movedScene.getCenter();
    var zoom = movedScene.getZoom();
    var rotation = movedScene.getRotation();
    var pitch = movedScene.getPitch();
    /**
     * 根据当前地图是否为主地图，分两种情况
     * 1. 非主地图，则其他非主地图 zoom 设置当前 zoom ，主地图设置为 zoom - zoomGap
     * 2. 主地图，则其他非主地图 zoom 设置为 zoom + zoomGap
     */
    var isMovedMainScene = index === mainIndex;
    scenes.forEach(function (scene, num) {
      if (num !== index) {
        // 当前需要同步的状态是不是主地图
        var sceneZoom = isMovedMainScene ? zoom + zoomGap : num === mainIndex ? zoom - zoomGap : zoom;
        updateSceneStatus(scene, {
          zoom: sceneZoom,
          center: [center.lng, center.lat],
          rotation: rotation,
          pitch: pitch
        });
      }
    });
  };

  /**
   * 地图同步处理器
   * 1. 清空监听
   * 2. 同步指定地图状态
   * 3. 重新初始化地图监听
   * @param index
   */
  var syncHandler = function syncHandler(index) {
    clearListener();
    moveScenePosition(index);
    initListener();
  };
  function initListener() {
    handlers = scenes.map(function (value, index) {
      // 每个地图有自己的状态同步函数
      return syncHandler.bind(null, index);
    });
    scenes.forEach(function (scene, index) {
      // 给每个地图绑定监听
      listeners.push(listen(index));
    });
  }

  // 初始化,先将所有地图状态同步。
  scenes.forEach(function (value, index) {
    moveScenePosition(index);
  });

  // 添加地图事件监听
  initListener();

  // 返回清除绑定的监听事件函数
  return clearListener;
}