"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CLS_PREFIX = void 0;
exports.LegendRamp = LegendRamp;
var _ahooks = require("ahooks");
var _classnames = _interopRequireDefault(require("classnames"));
var _react = _interopRequireWildcard(require("react"));
require("./index.css");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const CLS_PREFIX = exports.CLS_PREFIX = 'larkmap-legend-ramp';
const getMinMax = labels => {
  let max = labels[labels.length - 1];
  let min = labels[0];
  if (!Number.isFinite(min)) {
    min = parseInt(min, 10);
  }
  if (!Number.isFinite(max)) {
    max = parseInt(max, 10);
  }
  return [min, max];
};
function Continuous({
  labels,
  labelUnit = '',
  colors
}) {
  const minLabel = labels[0] + labelUnit;
  const maxLabel = labels[labels.length - 1] + labelUnit;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: `${CLS_PREFIX}__continuous`,
    style: {
      background: `linear-gradient(to right,${colors})`
    }
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: `${CLS_PREFIX}__continuous-labelbar`
  }, /*#__PURE__*/_react.default.createElement("span", null, minLabel), /*#__PURE__*/_react.default.createElement("span", null, maxLabel)));
}
function DisContinuous({
  labels,
  labelUnit = '',
  colors
}) {
  const containerRef = (0, _react.useRef)(null);
  const containerSize = (0, _ahooks.useSize)(containerRef);
  const stepWidth = containerSize?.width / (colors.length + 1);

  // right labels is labels.length = colors.length + 1
  const rightLabels = labels;

  // 当两端处于无穷最大最小时，比如 < 10、10 - 20、≥ 20
  if (labels.length + 1 === colors.length) {
    const minLabel = '< ' + labels[0];
    const maxLabel = '≥ ' + labels[labels.length - 1];
    rightLabels.unshift(minLabel);
    rightLabels.push(maxLabel);
  }
  const tooltip = idx => {
    const title = `${labels[idx]}${labelUnit} - ${labels[idx + 1]}${labelUnit}`;
    return title;
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: `${CLS_PREFIX}__dis-continuous`,
    ref: containerRef
  }, Number.isNaN(stepWidth) ? null : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: `${CLS_PREFIX}__dis-continuous__colors`,
    style: {
      paddingLeft: stepWidth / 2
    }
  }, colors?.map((item, i) => {
    return /*#__PURE__*/_react.default.createElement("div", {
      key: item,
      title: tooltip(i),
      className: `${CLS_PREFIX}__dis-continuous__color`,
      style: {
        background: item,
        width: stepWidth
      }
    });
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: `${CLS_PREFIX}__dis-continuous__labels`
  }, labels?.map(item => {
    const label = item + labelUnit;
    return /*#__PURE__*/_react.default.createElement("span", {
      key: item,
      className: `${CLS_PREFIX}__dis-continuous__label`
    }, label);
  }))));
}
function LegendRamp(props) {
  const {
    isContinuous = false,
    labels,
    colors,
    labelUnit = '',
    className: cls,
    style
  } = props;

  // const [min, max] = getMinMax(labels);
  // const isError = Number.isNaN(min) || Number.isNaN(max);
  // 传入错误数据情况处理 TODO

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(`${CLS_PREFIX}`, cls),
    style: style
  }, isContinuous ? /*#__PURE__*/_react.default.createElement(Continuous, {
    labels: labels,
    labelUnit: labelUnit,
    colors: colors
  }) : /*#__PURE__*/_react.default.createElement(DisContinuous, {
    labels: labels,
    labelUnit: labelUnit,
    colors: colors
  }));
}