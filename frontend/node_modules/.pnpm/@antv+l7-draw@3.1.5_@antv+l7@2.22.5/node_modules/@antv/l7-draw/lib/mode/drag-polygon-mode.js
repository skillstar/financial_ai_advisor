"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DragPolygonMode = void 0;
var _lodash = require("lodash");
var _constant = require("../constant");
var _utils = require("../utils");
var _polygonMode = require("./polygon-mode");
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var DragPolygonMode = exports.DragPolygonMode = /*#__PURE__*/function (_PolygonMode) {
  function DragPolygonMode() {
    _classCallCheck(this, DragPolygonMode);
    return _callSuper(this, DragPolygonMode, arguments);
  }
  _inherits(DragPolygonMode, _PolygonMode);
  return _createClass(DragPolygonMode, [{
    key: "drawLine",
    get: function get() {
      var _this$drawPolygon;
      return (_this$drawPolygon = this.drawPolygon) === null || _this$drawPolygon === void 0 ? void 0 : _this$drawPolygon.properties.line;
    }
  }, {
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      var newOptions = _objectSpread(_objectSpread({}, _get(_getPrototypeOf(DragPolygonMode.prototype), "getDefaultOptions", this).call(this, options)), {}, {
        showMidPoint: false,
        trigger: 'click',
        autoActive: false,
        helper: (0, _lodash.cloneDeep)(_constant.DEFAULT_DRAG_POLYGON_HELPER_CONFIg)
      });
      if (options.trigger === 'drag') {
        newOptions.helper = _objectSpread(_objectSpread({}, newOptions.helper), _constant.DEFAULT_TRIGGER_DRAG_HELPER_CONFIG);
      }
      return newOptions;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "getMidPointsByLine",
    value: function getMidPointsByLine(line) {
      return [];
    }
  }, {
    key: "handleCreatePolygon",
    value: function handleCreatePolygon(points, line) {
      var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var lineNodes = line.properties.nodes;
      return (0, _utils.createPolygonFeature)(lineNodes.slice(0, lineNodes.length - 1), _objectSpread({
        nodes: points,
        line: line
      }, properties));
    }
  }, {
    key: "handleFirstNodeCreate",
    value: function handleFirstNodeCreate(firstNode) {
      var lastNode = (0, _utils.createPointFeature)(firstNode.geometry.coordinates);
      var line = this.handleCreatePolygonLine(firstNode, lastNode, {
        isDraw: true,
        isActive: true
      });
      var polygon = this.handleCreatePolygon([firstNode, lastNode], line, {
        isDraw: true,
        isActive: true
      });
      this.setPolygonData(function (features) {
        return (0, _utils.updateTargetFeature)({
          target: polygon,
          data: [].concat(_toConsumableArray(features), [polygon]),
          targetHandler: function targetHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: true,
              isActive: true
            });
          }
        });
      });
      this.emit(_constant.DrawEvent.AddNode, firstNode, this.drawPolygon, this.getPolygonData());
      this.setHelper('drawFinish');
      return firstNode;
    }
  }, {
    key: "handleLastNodeCreate",
    value: function handleLastNodeCreate(lastNode) {
      var _this$options = this.options,
        autoActive = _this$options.autoActive,
        editable = _this$options.editable;
      var drawPolygon = this.drawPolygon;
      if (!drawPolygon) {
        return lastNode;
      }
      this.setLineData(function (features) {
        return [].concat(_toConsumableArray(features), [drawPolygon.properties.line]);
      });
      this.setActivePolygon(drawPolygon);
      if (!(autoActive && editable)) {
        this.handlePolygonUnClick(drawPolygon);
      }
      this.emit(_constant.DrawEvent.Add, drawPolygon, this.getPolygonData());
      this.emit(_constant.DrawEvent.AddNode, drawPolygon.properties.nodes[1], this.drawPolygon, this.getPolygonData());
      if (editable) {
        this.setHelper(autoActive ? 'pointHover' : 'polygonHover');
      } else {
        this.setHelper(this.addable ? 'draw' : null);
      }
      return lastNode;
    }
  }, {
    key: "onPointCreate",
    value: function onPointCreate(e) {
      var _this = this;
      if (!this.addable || this.dragPoint || this.editLine || !this.isClickTrigger) {
        return;
      }
      var drawPolygon = this.drawPolygon;
      var position = (0, _utils.getPosition)(e);
      var feature = this.handleCreatePoint(position);
      if (drawPolygon) {
        requestAnimationFrame(function () {
          _this.handleLastNodeCreate(feature);
        });
      } else {
        this.handleFirstNodeCreate(feature);
      }
      return feature;
    }
  }, {
    key: "setActivePolygon",
    value: function setActivePolygon(polygon) {
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.setActiveLine(polygon.properties.line, properties);
      this.setPolygonData(function (features) {
        return (0, _utils.updateTargetFeature)({
          target: polygon,
          data: features,
          targetHandler: function targetHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: false,
              isActive: true,
              isDrag: false,
              isHover: false
            }, properties);
          },
          otherHandler: function otherHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: false,
              isActive: false,
              isDrag: false
            });
          }
        });
      });
      this.setPointData(polygon.properties.nodes);
      this.setDashLineData([]);
      var texts = this.getAllTexts();
      this.setTextData(texts);
      return polygon;
    }
  }, {
    key: "onPointDragging",
    value: function onPointDragging(e) {
      var dragPoint = this.dragPoint;
      if (!dragPoint) {
        return;
      }
      var feature = this.handlePointDragging(dragPoint, (0, _utils.getLngLat)(e));
      var editPolygon = this.editPolygon;
      if (feature && editPolygon) {
        this.syncPolygonNodes(editPolygon, editPolygon.properties.nodes.map(function (node) {
          if ((0, _utils.isSameFeature)(node, feature)) {
            return feature;
          }
          return node;
        }));
        this.setActivePolygon(editPolygon);
      }
      return feature;
    }
  }, {
    key: "onSceneDragStart",
    value: function onSceneDragStart(e) {
      if (!this.isDragTrigger || !this.addable || this.dragPoint || this.editLine) {
        return;
      }
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.handleFirstNodeCreate(this.handleCreatePoint((0, _utils.getPosition)(e)));
    }
  }, {
    key: "onSceneDragEnd",
    value: function onSceneDragEnd(e) {
      if (!this.isDragTrigger || !this.addable || this.dragPoint || this.editLine || !this.drawPolygon) {
        return;
      }
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.handleLastNodeCreate(this.handleCreatePoint((0, _utils.getPosition)(e)));
    }
  }, {
    key: "onSceneMouseMove",
    value: function onSceneMouseMove(e) {
      var drawPolygon = this.drawPolygon;
      if (!drawPolygon) {
        return;
      }
      var nodes = drawPolygon.properties.nodes;
      var firstNode = (0, _lodash.first)(nodes);
      var lastNode = (0, _lodash.last)(nodes);
      lastNode.geometry.coordinates = (0, _utils.getPosition)(e);
      this.syncPolygonNodes(drawPolygon, [firstNode, lastNode]);
      this.setDashLineData([drawPolygon.properties.line]);
      this.setTextData(this.getAllTexts());
      this.resetCursor();
    }
  }]);
}(_polygonMode.PolygonMode);