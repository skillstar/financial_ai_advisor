function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
import { coordAll, featureCollection } from '@turf/turf';
import { DEFAULT_ADSORB_CONFIG, DEFAULT_DISTANCE_OPTIONS, DEFAULT_DRAG_OPTIONS, RenderEvent } from '../constant';
import { calcDistanceTextsByLine, createLineFeature, createPointFeature, getAdsorbPosition as _getAdsorbPosition, getLngLat, getPosition, getPrecisionNumber, isSameFeature, resetEventLngLat, transLngLat2Position, updateTargetFeature } from '../utils';
import { MidPointMode } from './mid-point-mode';
import { DEFAULT_LINE_HELPER_CONFIG, DEFAULT_TRIGGER_DRAG_HELPER_CONFIG } from '../constant/helper';
import { cloneDeep, last } from 'lodash';
export var LineMode = /*#__PURE__*/function (_MidPointMode) {
  function LineMode() {
    var _this;
    _classCallCheck(this, LineMode);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, LineMode, [].concat(args));
    _this.prevCreateTime = Date.now();
    _this.previousPosition = [0, 0];
    return _this;
  }
  _inherits(LineMode, _MidPointMode);
  return _createClass(LineMode, [{
    key: "isDragTrigger",
    get: function get() {
      return this.options.trigger === 'drag';
    }
  }, {
    key: "isClickTrigger",
    get: function get() {
      return this.options.trigger === 'click';
    }
    /**
     * 当前高亮的结点
     * @protected
     */
  }, {
    key: "editLine",
    get: function get() {
      return this.getLineData().find(function (feature) {
        var _feature$properties = feature.properties,
          isActive = _feature$properties.isActive,
          isDraw = _feature$properties.isDraw;
        return !isDraw && isActive;
      });
    }
    /**
     * 获取line类型对应的render
     * @protected
     */
  }, {
    key: "lineRender",
    get: function get() {
      return this.render.line;
    }
    /**
     * 获取正在被拖拽的线
     * @protected
     */
  }, {
    key: "dragLine",
    get: function get() {
      return this.getLineData().find(function (feature) {
        return feature.properties.isDrag;
      });
    }
    /**
     * 正在绘制的线
     * @protected
     */
  }, {
    key: "drawLine",
    get: function get() {
      return this.getLineData().find(function (feature) {
        return feature.properties.isDraw;
      });
    }
    /**
     * 当前悬停的线
     * @protected
     */
  }, {
    key: "hoverLine",
    get: function get() {
      return this.getLineData().find(function (feature) {
        return feature.properties.isHover;
      });
    }
  }, {
    key: "getDragLine",
    value: function getDragLine() {
      return this.dragLine;
    }
  }, {
    key: "getDrawLine",
    value: function getDrawLine() {
      return this.drawLine;
    }
  }, {
    key: "getEditLine",
    value: function getEditLine() {
      return this.editLine;
    }
  }, {
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      var newOptions = _objectSpread(_objectSpread({}, this.getCommonOptions(options)), {}, {
        showMidPoint: true,
        distanceOptions: false,
        helper: cloneDeep(DEFAULT_LINE_HELPER_CONFIG),
        dragOptions: cloneDeep(DEFAULT_DRAG_OPTIONS)
      });
      if (options.distanceOptions) {
        newOptions.distanceOptions = _objectSpread(_objectSpread({}, DEFAULT_DISTANCE_OPTIONS), newOptions.distanceOptions);
      }
      if (options.adsorbOptions) {
        newOptions.adsorbOptions = _objectSpread(_objectSpread({}, DEFAULT_ADSORB_CONFIG), newOptions.adsorbOptions);
        // 开启吸附后，默认开启 bbox 加速吸附计算性能
        newOptions.bbox = true;
      }
      if (options.trigger === 'drag') {
        newOptions.autoActive = false;
        newOptions.helper = _objectSpread(_objectSpread({}, newOptions.helper), DEFAULT_TRIGGER_DRAG_HELPER_CONFIG);
      }
      return newOptions;
    }
    /**
     * 获取 position 经过吸附作用后的 position，若无吸附效果则返回原始数据
     * @param position
     */
  }, {
    key: "getAdsorbPosition",
    value: function getAdsorbPosition(position) {
      var adsorbOptions = this.options.adsorbOptions;
      if (typeof adsorbOptions === 'boolean') {
        return position;
      }
      var scene = this.scene;
      return _getAdsorbPosition({
        adsorbOptions: adsorbOptions,
        position: position,
        scene: scene,
        draw: this
      });
    }
  }, {
    key: "bindSceneEvent",
    value: function bindSceneEvent() {
      this.sceneRender.on(RenderEvent.Mousemove, this.onSceneMouseMove.bind(this));
    }
  }, {
    key: "bindPointRenderEvent",
    value: function bindPointRenderEvent() {
      var _this$pointRender;
      _get(_getPrototypeOf(LineMode.prototype), "bindPointRenderEvent", this).call(this);
      (_this$pointRender = this.pointRender) === null || _this$pointRender === void 0 ? void 0 : _this$pointRender.on(RenderEvent.Click, this.onPointClick.bind(this));
    }
  }, {
    key: "bindLineRenderEvent",
    value: function bindLineRenderEvent() {
      var _this$lineRender, _this$lineRender2, _this$lineRender3, _this$lineRender4, _this$lineRender5, _this$lineRender6;
      (_this$lineRender = this.lineRender) === null || _this$lineRender === void 0 ? void 0 : _this$lineRender.on(RenderEvent.UnClick, this.onLineUnClick.bind(this));
      (_this$lineRender2 = this.lineRender) === null || _this$lineRender2 === void 0 ? void 0 : _this$lineRender2.on(RenderEvent.Mousemove, this.onLineMouseMove.bind(this));
      (_this$lineRender3 = this.lineRender) === null || _this$lineRender3 === void 0 ? void 0 : _this$lineRender3.on(RenderEvent.Mouseout, this.onLineMouseOut.bind(this));
      (_this$lineRender4 = this.lineRender) === null || _this$lineRender4 === void 0 ? void 0 : _this$lineRender4.on(RenderEvent.Dragstart, this.onLineDragStart.bind(this));
      (_this$lineRender5 = this.lineRender) === null || _this$lineRender5 === void 0 ? void 0 : _this$lineRender5.on(RenderEvent.Dragging, this.onLineDragging.bind(this));
      (_this$lineRender6 = this.lineRender) === null || _this$lineRender6 === void 0 ? void 0 : _this$lineRender6.on(RenderEvent.Dragend, this.onLineDragEnd.bind(this));
    }
  }, {
    key: "getDashLineDistanceTexts",
    value: function getDashLineDistanceTexts(dashLines, _ref) {
      var showTotalDistance = _ref.showTotalDistance,
        format = _ref.format,
        showDashDistance = _ref.showDashDistance;
      return showDashDistance ? dashLines.map(function (dashLine) {
        return calcDistanceTextsByLine(dashLine, {
          showTotalDistance: showTotalDistance,
          format: format
        }, {
          isActive: true,
          type: 'dash'
        });
      }).flat() : [];
    }
  }, {
    key: "getLineDistanceTexts",
    value: function getLineDistanceTexts(lines, _ref2) {
      var showTotalDistance = _ref2.showTotalDistance,
        format = _ref2.format,
        showWhen = _ref2.showWhen;
      var textList = [];
      if (showWhen.includes('active')) {
        var activeLines = lines.filter(function (line) {
          return line.properties.isActive && line.properties.nodes.length > 1;
        });
        textList.push.apply(textList, _toConsumableArray(activeLines.map(function (line) {
          return calcDistanceTextsByLine(line, {
            showTotalDistance: showTotalDistance,
            format: format
          }, {
            isActive: true
          });
        }).flat()));
      }
      if (showWhen.includes('normal')) {
        var normalLines = lines.filter(function (line) {
          return !line.properties.isActive && line.properties.nodes.length > 1;
        });
        textList.push.apply(textList, _toConsumableArray(normalLines.map(function (line) {
          return calcDistanceTextsByLine(line, {
            showTotalDistance: showTotalDistance,
            format: format
          });
        }).flat()));
      }
      return textList;
    }
  }, {
    key: "getDistanceTexts",
    value: function getDistanceTexts() {
      var distanceOptions = this.options.distanceOptions;
      if (!distanceOptions) {
        return [];
      }
      var textList = [];
      var showWhen = distanceOptions.showWhen,
        showDashDistance = distanceOptions.showDashDistance,
        format = distanceOptions.format,
        showTotalDistance = distanceOptions.showTotalDistance;
      textList.push.apply(textList, _toConsumableArray(this.getDashLineDistanceTexts(this.getDashLineData(), {
        showTotalDistance: false,
        format: format,
        showDashDistance: showDashDistance
      })).concat(_toConsumableArray(this.getLineDistanceTexts(this.getLineData(), {
        showTotalDistance: showTotalDistance,
        format: format,
        showWhen: showWhen
      }))));
      return textList;
    }
  }, {
    key: "getAllTexts",
    value: function getAllTexts() {
      return this.getDistanceTexts();
    }
    /**
     * 创建LineFeature
     * @param point
     */
  }, {
    key: "handleCreateLine",
    value: function handleCreateLine(point) {
      var newLine = createLineFeature([point], {
        isActive: true,
        isDraw: true
      });
      this.setLineData(function (features) {
        return updateTargetFeature({
          target: newLine,
          data: [].concat(_toConsumableArray(features), [newLine]),
          otherHandler: function otherHandler(feature) {
            feature.properties.isActive = false;
          }
        });
      });
      this.setPointData([point]);
      this.setTextData(this.getAllTexts());
      return newLine;
    }
    /**
     * 同步当前编辑线中的结点
     * @param line
     * @param nodes
     */
  }, {
    key: "syncLineNodes",
    value: function syncLineNodes(line, nodes) {
      line.properties.nodes = nodes;
      line.geometry.coordinates = coordAll(featureCollection(nodes));
      this.setLineData(function (features) {
        return features.map(function (feature) {
          if (isSameFeature(feature, line)) {
            return line;
          }
          return feature;
        });
      });
      if (isSameFeature(this.editLine, line)) {
        this.setMidPointData(this.getMidPointsByLine(line));
      }
      this.setPointData(line.properties.nodes);
      this.setTextData(this.getAllTexts());
      return line;
    }
  }, {
    key: "setActiveLine",
    value: function setActiveLine(line) {
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.setLineData(function (features) {
        return updateTargetFeature({
          target: line,
          data: features,
          targetHandler: function targetHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: false,
              isActive: true,
              isDrag: false,
              isHover: false
            }, properties);
          },
          otherHandler: function otherHandler(feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isDraw: false,
              isActive: false,
              isDrag: false
            });
          }
        });
      });
      this.setPointData(line.properties.nodes.map(function (feature) {
        feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
          isHover: false,
          isActive: false
        });
        return feature;
      }));
      this.setMidPointData(this.getMidPointsByLine(line));
      this.setDashLineData([]);
      this.setTextData(this.getAllTexts());
      return line;
    }
  }, {
    key: "clearActiveLine",
    value: function clearActiveLine() {
      this.source.setData({
        point: [],
        line: this.getLineData().map(function (feature) {
          feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
            isDrag: false,
            isActive: false,
            isHover: false
          });
          return feature;
        }),
        midPoint: [],
        text: this.getAllTexts()
      });
    }
  }, {
    key: "handleLineUnClick",
    value: function handleLineUnClick(link) {
      this.clearActiveLine();
      return link;
    }
  }, {
    key: "handleLineHover",
    value: function handleLineHover(line) {
      if (this.drawLine) {
        return;
      }
      this.setCursor('lineHover');
      if (!isSameFeature(line, this.hoverLine)) {
        this.setLineData(function (features) {
          return updateTargetFeature({
            target: line,
            data: features,
            targetHandler: function targetHandler(feature) {
              feature.properties.isHover = true;
            },
            otherHandler: function otherHandler(feature) {
              feature.properties.isHover = false;
            }
          });
        });
      }
      return line;
    }
  }, {
    key: "handleLineUnHover",
    value: function handleLineUnHover(line) {
      if (this.drawLine) {
        return;
      }
      this.resetCursor();
      this.setLineData(function (features) {
        return features.map(function (feature) {
          feature.properties.isHover = false;
          return feature;
        });
      });
      return line;
    }
  }, {
    key: "handleLineDragStart",
    value: function handleLineDragStart(line) {
      this.setActiveLine(line, {
        isDrag: true,
        isActive: true
      });
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.setCursor('lineDrag');
      return line;
    }
  }, {
    key: "handleLineDragging",
    value: function handleLineDragging(line, _ref3) {
      var lng = _ref3.lng,
        lat = _ref3.lat;
      var nodes = line.properties.nodes;
      var _this$previousPositio = _slicedToArray(this.previousPosition, 2),
        preLng = _this$previousPositio[0],
        preLat = _this$previousPositio[1];
      nodes.forEach(function (node) {
        var coordinates = node.geometry.coordinates;
        node.geometry.coordinates = [getPrecisionNumber(coordinates[0] + lng - preLng), getPrecisionNumber(coordinates[1] + lat - preLat)];
      });
      this.syncLineNodes(line, nodes);
      this.setActiveLine(line, {
        isDrag: true
      });
      this.setCursor('lineDrag');
      this.previousPosition = [lng, lat];
      return line;
    }
  }, {
    key: "handleLineDragEnd",
    value: function handleLineDragEnd(line) {
      line.properties.isDrag = false;
      this.setLineData(function (features) {
        return features;
      });
      this.scene.setMapStatus({
        dragEnable: true
      });
      return line;
    }
  }, {
    key: "resetAdsorbLngLat",
    value: function resetAdsorbLngLat(e) {
      if (!this.options.adsorbOptions) {
        return;
      }
      var adsorbPosition = this.getAdsorbPosition(transLngLat2Position(getLngLat(e)));
      if (adsorbPosition) {
        resetEventLngLat(e, adsorbPosition);
      }
      return adsorbPosition;
    }
    /**
     * 创建点之后，对应线段的处理
     * @param e
     */
  }, {
    key: "onPointCreate",
    value: function onPointCreate(e) {
      if (this.editLine) {
        return;
      }
      this.resetAdsorbLngLat(e);
      var point = _get(_getPrototypeOf(LineMode.prototype), "onPointCreate", this).call(this, e);
      var drawLine = this.drawLine;
      if (!point) {
        return;
      }
      if (drawLine) {
        this.syncLineNodes(drawLine, [].concat(_toConsumableArray(drawLine.properties.nodes), [point]));
        this.setDashLineData([]);
      } else {
        this.handleCreateLine(point);
      }
      return point;
    }
  }, {
    key: "onPointDragStart",
    value: function onPointDragStart(e) {
      var editLine = this.editLine;
      if (!editLine) {
        return;
      }
      this.setHelper('pointDrag');
      return _get(_getPrototypeOf(LineMode.prototype), "onPointDragStart", this).call(this, e);
    }
  }, {
    key: "onPointDragging",
    value: function onPointDragging(e) {
      var dragPoint = _get(_getPrototypeOf(LineMode.prototype), "onPointDragging", this).call(this, e);
      if (dragPoint) {
        var adsorbPosition = this.resetAdsorbLngLat(e);
        if (adsorbPosition) {
          dragPoint.geometry.coordinates = cloneDeep(adsorbPosition);
        }
      }
      var editLine = this.editLine;
      if (editLine && dragPoint) {
        this.syncLineNodes(editLine, editLine.properties.nodes.map(function (node) {
          if (isSameFeature(dragPoint, node)) {
            return dragPoint;
          }
          return node;
        }));
        this.setActiveLine(editLine);
      }
      return dragPoint;
    }
  }, {
    key: "onPointDragEnd",
    value: function onPointDragEnd(e) {
      var editLine = this.editLine;
      if (editLine) {
        var dragPoint = _get(_getPrototypeOf(LineMode.prototype), "onPointDragEnd", this).call(this, e);
        this.setPointData(function (features) {
          return features.map(function (feature) {
            feature.properties.isActive = false;
            return feature;
          });
        });
        this.setHelper('pointHover');
        return dragPoint;
      }
    }
  }, {
    key: "onLineUnClick",
    value: function onLineUnClick(e) {
      var editLine = this.editLine;
      if (!editLine) {
        return;
      }
      return this.handleLineUnClick(editLine);
    }
  }, {
    key: "onLineMouseMove",
    value: function onLineMouseMove(e) {
      if (this.drawLine) {
        return;
      }
      if (!this.dragLine && !this.drawLine && this.options.editable) {
        this.setHelper('lineHover');
      }
      return this.handleLineHover(e.feature);
    }
  }, {
    key: "onLineMouseOut",
    value: function onLineMouseOut(e) {
      if (this.drawLine) {
        return;
      }
      if (!this.dragLine && !this.drawLine) {
        this.setHelper(this.addable ? 'draw' : null);
      }
      return this.handleLineUnHover(e.feature);
    }
  }, {
    key: "onLineDragStart",
    value: function onLineDragStart(e) {
      if (!this.options.editable || this.drawLine) {
        return;
      }
      this.previousPosition = getPosition(e);
      this.setHelper('lineDrag');
      return this.handleLineDragStart(e.feature);
    }
  }, {
    key: "onLineDragging",
    value: function onLineDragging(e) {
      var dragLine = this.dragLine;
      if (!dragLine) {
        return;
      }
      return this.handleLineDragging(dragLine, getLngLat(e));
    }
  }, {
    key: "onLineDragEnd",
    value: function onLineDragEnd(e) {
      var dragLine = this.dragLine;
      if (!dragLine) {
        return;
      }
      this.setHelper('lineHover');
      return this.handleLineDragEnd(dragLine);
    }
  }, {
    key: "onPointMouseMove",
    value: function onPointMouseMove(e) {
      var feature = _get(_getPrototypeOf(LineMode.prototype), "onPointMouseMove", this).call(this, e);
      if (!this.dragLine && !this.drawLine && !this.dragPoint) {
        this.setHelper('pointHover');
      }
      return feature;
    }
  }, {
    key: "onPointMouseOut",
    value: function onPointMouseOut(e) {
      var feature = _get(_getPrototypeOf(LineMode.prototype), "onPointMouseOut", this).call(this, e);
      if (!this.dragLine && !this.drawLine && !this.dragPoint) {
        this.setHelper(this.addable ? 'draw' : null);
      }
      return feature;
    }
  }, {
    key: "onMidPointHover",
    value: function onMidPointHover(e) {
      _get(_getPrototypeOf(LineMode.prototype), "onMidPointHover", this).call(this, e);
      this.setHelper('midPointHover');
    }
  }, {
    key: "onMidPointUnHover",
    value: function onMidPointUnHover(e) {
      _get(_getPrototypeOf(LineMode.prototype), "onMidPointUnHover", this).call(this, e);
      this.setHelper(null);
    }
  }, {
    key: "onPointClick",
    value: function onPointClick(e) {}
    /**
     * 获取线数据
     */
  }, {
    key: "getLineData",
    value: function getLineData() {
      return this.source.getRenderData('line');
    }
    /**
     * 设置线数据
     * @param data
     */
  }, {
    key: "setLineData",
    value: function setLineData(data) {
      return this.source.setRenderData('line', data);
    }
  }, {
    key: "getTextData",
    value: function getTextData() {
      return this.source.getRenderData('text');
    }
  }, {
    key: "setTextData",
    value: function setTextData(data) {
      return this.source.setRenderData('text', data);
    }
    /**
     * 获取线数据
     */
  }, {
    key: "getDashLineData",
    value: function getDashLineData() {
      return this.source.getRenderData('dashLine');
    }
    /**
     * 设置线数据
     * @param data
     */
  }, {
    key: "setDashLineData",
    value: function setDashLineData(data) {
      return this.source.setRenderData('dashLine', data);
    }
  }, {
    key: "onMidPointClick",
    value: function onMidPointClick(e) {
      var editLine = this.editLine;
      var feature = e.feature;
      if (!editLine || !feature || this.dragPoint) {
        return;
      }
      var nodes = editLine.properties.nodes;
      var _feature$properties2 = feature.properties,
        startId = _feature$properties2.startId,
        endId = _feature$properties2.endId;
      var startIndex = nodes.findIndex(function (feature) {
        return feature.properties.id === startId;
      });
      var endIndex = nodes.findIndex(function (feature) {
        return feature.properties.id === endId;
      });
      if (startIndex > -1 && endIndex > -1) {
        var newNode = createPointFeature(feature.geometry.coordinates, {
          isDrag: true,
          isHover: true
        });
        this.setHelper('pointDrag');
        nodes.splice(endIndex, 0, newNode);
        editLine.geometry.coordinates = coordAll(featureCollection(nodes));
        this.syncLineNodes(editLine, nodes);
        this.setActiveLine(editLine);
        return newNode;
      }
    }
  }, {
    key: "enableSceneRenderAction",
    value: function enableSceneRenderAction() {
      this.sceneRender.enableDrag();
      this.sceneRender.enableMouseMove();
      this.sceneRender.enableDblClick();
    }
  }, {
    key: "disableSceneRenderAction",
    value: function disableSceneRenderAction() {
      this.sceneRender.disableDrag();
      this.sceneRender.disableMouseMove();
      this.sceneRender.disableDblClick();
    }
  }, {
    key: "enableLineRenderAction",
    value: function enableLineRenderAction() {
      var _this$lineRender7;
      var editable = this.options.editable;
      (_this$lineRender7 = this.lineRender) === null || _this$lineRender7 === void 0 ? void 0 : _this$lineRender7.enableUnClick();
      if (editable) {
        var _this$lineRender8, _this$lineRender9;
        (_this$lineRender8 = this.lineRender) === null || _this$lineRender8 === void 0 ? void 0 : _this$lineRender8.enableHover();
        (_this$lineRender9 = this.lineRender) === null || _this$lineRender9 === void 0 ? void 0 : _this$lineRender9.enableDrag();
      }
    }
  }, {
    key: "disableLineRenderAction",
    value: function disableLineRenderAction() {
      var _this$lineRender10, _this$lineRender11, _this$lineRender12;
      (_this$lineRender10 = this.lineRender) === null || _this$lineRender10 === void 0 ? void 0 : _this$lineRender10.disableUnClick();
      (_this$lineRender11 = this.lineRender) === null || _this$lineRender11 === void 0 ? void 0 : _this$lineRender11.disableHover();
      (_this$lineRender12 = this.lineRender) === null || _this$lineRender12 === void 0 ? void 0 : _this$lineRender12.disableDrag();
    }
  }, {
    key: "onSceneDragStart",
    value: function onSceneDragStart(e) {
      if (!this.isDragTrigger || !this.addable || this.dragPoint || this.editLine) {
        return;
      }
      this.scene.setMapStatus({
        dragEnable: false
      });
      this.onPointCreate(e);
      this.prevCreateTime = Date.now();
      this.sceneRender.on(RenderEvent.Dragging, this.onSceneDragging);
    }
  }, {
    key: "onSceneDragging",
    value: function onSceneDragging(e) {
      var drawLine = this.drawLine;
      var now = Date.now();
      var _DEFAULT_DRAG_OPTIONS = _objectSpread(_objectSpread({}, DEFAULT_DRAG_OPTIONS), this.options.dragOptions),
        dotDistance = _DEFAULT_DRAG_OPTIONS.dotDistance,
        dotDuration = _DEFAULT_DRAG_OPTIONS.dotDuration;
      if (!this.isDragTrigger || !this.addable || !drawLine || dotDuration && now - this.prevCreateTime < dotDuration) {
        return;
      }
      var _getLngLat = getLngLat(e),
        currLng = _getLngLat.lng,
        currLat = _getLngLat.lat;
      var lastPosition = last(drawLine.properties.nodes).geometry.coordinates;
      var _this$scene$lngLatToP = this.scene.lngLatToPixel([lastPosition[0], lastPosition[1]]),
        prevX = _this$scene$lngLatToP.x,
        prevY = _this$scene$lngLatToP.y;
      var _this$scene$lngLatToP2 = this.scene.lngLatToPixel([currLng, currLat]),
        currX = _this$scene$lngLatToP2.x,
        currY = _this$scene$lngLatToP2.y;
      if (!dotDistance || Math.pow(currX - prevX, 2) + Math.pow(currY - prevY, 2) > Math.pow(dotDistance, 2)) {
        this.onPointCreate(e);
        this.prevCreateTime = now;
      }
    }
  }, {
    key: "onSceneDragEnd",
    value: function onSceneDragEnd(e) {}
  }, {
    key: "bindSceneDragEvent",
    value: function bindSceneDragEvent() {
      this.unbindSceneDragEvent();
      this.sceneRender.on(RenderEvent.Dragstart, this.onSceneDragStart);
      this.sceneRender.on(RenderEvent.Dragging, this.onSceneDragging);
      this.sceneRender.on(RenderEvent.Dragend, this.onSceneDragEnd);
      this.scene.setMapStatus({
        dragEnable: false
      });
    }
  }, {
    key: "unbindSceneDragEvent",
    value: function unbindSceneDragEvent() {
      this.sceneRender.off(RenderEvent.Dragstart, this.onSceneDragStart);
      this.sceneRender.off(RenderEvent.Dragging, this.onSceneDragging);
      this.sceneRender.off(RenderEvent.Dragend, this.onSceneDragEnd);
      this.scene.setMapStatus({
        dragEnable: true
      });
    }
  }, {
    key: "bindEnableEvent",
    value: function bindEnableEvent() {
      _get(_getPrototypeOf(LineMode.prototype), "bindEnableEvent", this).call(this);
      if (this.isDragTrigger) {
        this.bindSceneDragEvent();
      }
    }
  }, {
    key: "unbindEnableEvent",
    value: function unbindEnableEvent() {
      _get(_getPrototypeOf(LineMode.prototype), "unbindEnableEvent", this).call(this);
      if (this.isDragTrigger) {
        this.unbindSceneDragEvent();
      }
    }
  }, {
    key: "bindThis",
    value: function bindThis() {
      _get(_getPrototypeOf(LineMode.prototype), "bindThis", this).call(this);
      this.onSceneDragStart = this.onSceneDragStart.bind(this);
      this.onSceneDragging = this.onSceneDragging.bind(this);
      this.onSceneDragEnd = this.onSceneDragEnd.bind(this);
    }
  }]);
}(MidPointMode);