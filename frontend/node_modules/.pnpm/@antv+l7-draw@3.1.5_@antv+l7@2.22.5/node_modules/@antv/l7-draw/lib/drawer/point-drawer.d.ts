import { Scene } from '@antv/l7';
import { Feature, MultiPoint, Point } from '@turf/turf';
import { PointMode } from '../mode';
import { DeepPartial, IBaseModeOptions, ILayerMouseEvent, IPointFeature, IPointHelperOptions, IRenderType, ISceneMouseEvent } from '../typings';
export interface IPointDrawerOptions extends IBaseModeOptions<Feature<Point | MultiPoint>> {
    helper: IPointHelperOptions | boolean;
}
export declare class PointDrawer extends PointMode<IPointDrawerOptions> {
    constructor(scene: Scene, options: DeepPartial<IPointDrawerOptions>);
    protected get dragItem(): IPointFeature | undefined;
    protected get editItem(): IPointFeature | undefined;
    getDefaultOptions(options: DeepPartial<IPointDrawerOptions>): {
        helper: IPointHelperOptions;
        initialData: Feature<Point | MultiPoint, import("@turf/turf").Properties>[] | undefined;
        style: import("../typings").IStyle;
        cursor: import("../typings").ICursor;
        editable: boolean;
        autoActive: boolean;
        multiple: boolean;
        maxCount: number;
        bbox?: boolean | undefined;
        popup: boolean | Partial<import("tippy.js").Props>;
        history: false | import("../typings").HistoryConfig;
        keyboard: false | Partial<{
            remove: false | string[];
            revert: false | string[];
            redo: false | string[];
        }>;
    };
    bindEnableEvent(): void;
    unbindEnableEvent(): void;
    getRenderTypes(): IRenderType[];
    getMainLayer(): import("@antv/l7").ILayer[];
    setData(points: Feature<Point | MultiPoint>[]): void;
    getData(getOriginData?: boolean): IPointFeature[];
    onPointCreate(e: ILayerMouseEvent<IPointFeature>): IPointFeature | undefined;
    onPointMouseMove(e: ILayerMouseEvent<IPointFeature>): IPointFeature;
    onPointMouseOut(e: ILayerMouseEvent<IPointFeature>): IPointFeature;
    onPointDragStart(e: ILayerMouseEvent<IPointFeature>): IPointFeature | undefined;
    onPointDragging(e: ISceneMouseEvent): IPointFeature | undefined;
    onPointDragEnd(e: ISceneMouseEvent): IPointFeature | undefined;
    bindThis(): void;
    onSceneMouseMove(e: ISceneMouseEvent): void;
    setActiveFeature(target: Feature | string | null | undefined): void;
    resetFeatures(): void;
}
