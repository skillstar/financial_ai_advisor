import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
var _excluded = ["data"];
import { NetworkGraph as ADCNetworkGraph } from '@ant-design/graphs';
import React, { useMemo } from 'react';
import { useGraphConfig } from "../ConfigProvider/hooks";
import { visGraphData2GraphData } from "../utils/graph";
var defaultConfig = {
  autoResize: true,
  node: {
    style: {
      size: 28,
      labelFontSize: 10,
      labelBackground: true
    },
    animation: {
      enter: false
    }
  },
  edge: {
    style: {
      labelFontSize: 10,
      labelBackground: true,
      endArrow: true
    },
    animation: {
      enter: false
    }
  },
  behaviors: function behaviors(prev) {
    return [].concat(_toConsumableArray(prev), [{
      key: 'hover-activate',
      type: 'hover-activate',
      degree: 1
    }]);
  },
  transforms: function transforms(prev) {
    return [].concat(_toConsumableArray(prev), ['process-parallel-edges']);
  },
  layout: {
    type: 'force',
    animation: false
  }
};
var NetworkGraph = function NetworkGraph(props) {
  var propsData = props.data,
    restProps = _objectWithoutProperties(props, _excluded);
  var data = useMemo(function () {
    return visGraphData2GraphData(propsData);
  }, [propsData]);
  var config = useGraphConfig('NetworkGraph', defaultConfig, restProps);
  return /*#__PURE__*/React.createElement(ADCNetworkGraph, _extends({
    data: data
  }, config));
};
export default NetworkGraph;