import _extends from "@babel/runtime/helpers/esm/extends";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["data", "markerStyle", "pathStyle"];
import React, { useMemo } from 'react';
import { useMapConfig } from "../ConfigProvider/hooks";
import Map from "../Map";
import { formatMakerStyle, formatPolylineStyle } from "../utils/map";
var PathMap = function PathMap(props) {
  var _useMapConfig = useMapConfig('PathMap', props),
    data = _useMapConfig.data,
    markerStyle = _useMapConfig.markerStyle,
    pathStyle = _useMapConfig.pathStyle,
    rest = _objectWithoutProperties(_useMapConfig, _excluded);
  var markerdata = useMemo(function () {
    var markers = [];
    (data || []).forEach(function (item) {
      if (item.markers) {
        markers.push.apply(markers, _toConsumableArray(item.markers));
      }
    });
    return formatMakerStyle(markers, markerStyle);
  }, [data, markerStyle]);
  var linedata = useMemo(function () {
    var lines = (data || []).map(function (item) {
      return item.path;
    });
    return formatPolylineStyle(lines, pathStyle);
  }, [data, pathStyle]);
  return /*#__PURE__*/React.createElement(Map, _extends({
    markers: markerdata,
    polyline: linedata
  }, rest));
};
export default PathMap;