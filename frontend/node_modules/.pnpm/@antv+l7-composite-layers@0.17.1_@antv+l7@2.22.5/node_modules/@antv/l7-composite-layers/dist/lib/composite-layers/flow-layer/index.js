"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowLayer = void 0;
const tslib_1 = require("tslib");
const bbox_1 = tslib_1.__importDefault(require("@turf/bbox"));
const bbox_polygon_1 = tslib_1.__importDefault(require("@turf/bbox-polygon"));
const transform_scale_1 = tslib_1.__importDefault(require("@turf/transform-scale"));
const lodash_es_1 = require("lodash-es");
const line_layer_1 = require("../../core-layers/line-layer");
const point_layer_1 = require("../../core-layers/point-layer");
const text_layer_1 = require("../../core-layers/text-layer");
const composite_layer_1 = require("../../core/composite-layer");
const constants_1 = require("../../core/constants");
const constants_2 = require("./constants");
const data_1 = require("./data");
const utils_1 = require("./utils");
class FlowLayer extends composite_layer_1.CompositeLayer {
    constructor(options) {
        super(options);
        /**
         * 复合图层类型
         */
        this.type = composite_layer_1.CompositeLayer.LayerType.FlowLayer;
        /**
         * 数据计算中心
         */
        this.dataProvider = new data_1.DataProvider();
        /**
         * 当前地图匹配的层级
         */
        this.matchZoom = 0;
        this.onMapChange = (0, lodash_es_1.debounce)(() => {
            this.updateSubLayers();
        }, 400, {
            maxWait: 400,
        });
        this.onCircleMouseMove = (e) => {
            this.renderHighlightLayers(this._getCircleLayerActiveData(e, this._getFullActiveOptions()));
        };
        this.onCircleMouseOut = () => {
            this.clearHighlightLayers();
        };
        this.onLineMouseMove = (e) => {
            this.renderHighlightLayers(this._getLineLayerActiveData(e, this._getFullActiveOptions()));
        };
        this.onLineMouseOut = () => {
            this.clearHighlightLayers();
        };
        this.onCircleClick = (e) => {
            var _a, _b, _c;
            if (e.feature.id !== ((_c = (_b = (_a = this.circleSelectLayer) === null || _a === void 0 ? void 0 : _a.options['source'].data) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.id)) {
                this.renderSelectLayers(this._getCircleLayerActiveData(e, this._getFullSelectOptions()));
            }
            else {
                this.clearSelectLayers();
            }
        };
        this.onLineClick = (e) => {
            var _a, _b, _c;
            if (e.feature.id !== ((_c = (_b = (_a = this.lineSelectLayer) === null || _a === void 0 ? void 0 : _a.options['source'].data) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.id)) {
                this.renderSelectLayers(this._getLineLayerActiveData(e, this._getFullSelectOptions()));
            }
            else {
                this.clearSelectLayers();
            }
        };
        this.initSubLayersEvent();
    }
    // public highlightData?: { locations: ClusterLocation[]; flows: ClusterFlow[] };
    // public selectData?: { locations: ClusterLocation[]; flows: ClusterFlow[] };
    get layer() {
        return this.lineLayer;
    }
    get circleLayer() {
        var _a;
        return (_a = this.subLayers) === null || _a === void 0 ? void 0 : _a.getLayer('circleLayer');
    }
    get lineLayer() {
        var _a;
        return (_a = this.subLayers) === null || _a === void 0 ? void 0 : _a.getLayer('lineLayer');
    }
    get locationNameLayer() {
        var _a;
        return (_a = this.subLayers) === null || _a === void 0 ? void 0 : _a.getLayer('locationNameLayer');
    }
    get circleHighlightLayer() {
        var _a;
        return (_a = this.subLayers) === null || _a === void 0 ? void 0 : _a.getLayer('circleHighlightLayer');
    }
    get circleSelectLayer() {
        var _a;
        return (_a = this.subLayers) === null || _a === void 0 ? void 0 : _a.getLayer('circleSelectLayer');
    }
    get lineHighlightLayer() {
        var _a;
        return (_a = this.subLayers) === null || _a === void 0 ? void 0 : _a.getLayer('lineHighlightLayer');
    }
    get lineSelectLayer() {
        var _a;
        return (_a = this.subLayers) === null || _a === void 0 ? void 0 : _a.getLayer('lineSelectLayer');
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return FlowLayer.DefaultOptions;
    }
    createSubLayers() {
        const circleLayer = new point_layer_1.PointLayer({
            id: 'circleLayer',
            name: 'circleLayer',
            source: constants_2.EMPTY_CIRCLE_LAYER_SOURCE,
        });
        const lineLayer = new line_layer_1.LineLayer({
            id: 'lineLayer',
            name: 'lineLayer',
            source: constants_2.EMPTY_LINE_LAYER_SOURCE,
        });
        const locationNameLayer = new text_layer_1.TextLayer({
            id: 'locationNameLayer',
            name: 'locationNameLayer',
            source: constants_2.EMPTY_CIRCLE_LAYER_SOURCE,
        });
        const circleHighlightLayer = new point_layer_1.PointLayer({
            id: 'circleHighlightLayer',
            name: 'circleHighlightLayer',
            source: constants_2.EMPTY_CIRCLE_LAYER_SOURCE,
        });
        const circleSelectLayer = new point_layer_1.PointLayer({
            id: 'circleSelectLayer',
            name: 'circleSelectLayer',
            source: constants_2.EMPTY_CIRCLE_LAYER_SOURCE,
        });
        const lineHighlightLayer = new line_layer_1.LineLayer({
            id: 'lineHighlightLayer',
            name: 'lineHighlightLayer',
            source: constants_2.EMPTY_LINE_LAYER_SOURCE,
        });
        const lineSelectLayer = new line_layer_1.LineLayer({
            id: 'lineSelectLayer',
            name: 'lineSelectLayer',
            source: constants_2.EMPTY_LINE_LAYER_SOURCE,
        });
        constants_1.OriginMouseLayerEventList.forEach((eventName) => {
            circleLayer.on(eventName, (e) => this.emit(`circleLayer:${eventName}`, e));
            lineLayer.on(eventName, (e) => this.emit(`lineLayer:${eventName}`, e));
        });
        return [
            lineLayer,
            circleLayer,
            locationNameLayer,
            circleHighlightLayer,
            circleSelectLayer,
            lineHighlightLayer,
            lineSelectLayer,
        ];
    }
    /**
     * 更新
     */
    update(options) {
        super.update(options);
        this.initSubLayersEvent();
        if (options.source !== this.options.source) {
            this.clearActiveLayers();
        }
    }
    addTo(scene) {
        var _a, _b;
        this.scene = scene;
        this.updateSubLayers();
        super.addTo(scene);
        (_a = this.scene) === null || _a === void 0 ? void 0 : _a.on('zoomchange', this.onMapChange);
        (_b = this.scene) === null || _b === void 0 ? void 0 : _b.on('mapmove', this.onMapChange);
    }
    remove() {
        var _a, _b;
        super.remove();
        (_a = this.scene) === null || _a === void 0 ? void 0 : _a.off('zoomchange', this.onMapChange);
        (_b = this.scene) === null || _b === void 0 ? void 0 : _b.off('mapmove', this.onMapChange);
    }
    updateSubLayers() {
        var _a;
        this.updateClusterState();
        (_a = this.circleLayer) === null || _a === void 0 ? void 0 : _a.update(this.getCircleLayerOptions());
        this.getLocationNameLayerOptions().then((options) => {
            var _a;
            (_a = this.locationNameLayer) === null || _a === void 0 ? void 0 : _a.update(options);
        });
        // 保证 lineLayer 获取到的 scale 方法是最新的
        requestAnimationFrame(() => {
            var _a, _b, _c, _d, _e, _f, _g;
            (_a = this.lineLayer) === null || _a === void 0 ? void 0 : _a.update(this.getLineLayerOptions());
            (_b = this.circleHighlightLayer) === null || _b === void 0 ? void 0 : _b.update(this.getCircleHighlightLayerOptions());
            (_c = this.circleSelectLayer) === null || _c === void 0 ? void 0 : _c.update(this.getCircleSelectLayerOptions());
            (_d = this.lineHighlightLayer) === null || _d === void 0 ? void 0 : _d.update(this.getLineHighlightLayerOptions());
            (_e = this.lineSelectLayer) === null || _e === void 0 ? void 0 : _e.update(this.getLineSelectLayerOptions());
            const { getAppropriateLevel } = this.dataProvider.getClusterIndex(this.options.source, this.dataProviderState);
            const matchZoom = (_g = (_f = getAppropriateLevel(this.dataProviderState.mapStatus.zoom)) === null || _f === void 0 ? void 0 : _f.zoom) !== null && _g !== void 0 ? _g : 0;
            if (matchZoom !== this.matchZoom) {
                this.clearActiveLayers();
                this.matchZoom = matchZoom;
            }
        });
    }
    initSubLayersEvent() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        (_a = this.circleLayer) === null || _a === void 0 ? void 0 : _a.off('mousemove', this.onCircleMouseMove);
        (_b = this.circleLayer) === null || _b === void 0 ? void 0 : _b.off('mouseout', this.onCircleMouseOut);
        (_c = this.circleLayer) === null || _c === void 0 ? void 0 : _c.off('click', this.onCircleClick);
        (_d = this.lineLayer) === null || _d === void 0 ? void 0 : _d.off('mousemove', this.onLineMouseMove);
        (_e = this.lineLayer) === null || _e === void 0 ? void 0 : _e.off('mouseout', this.onLineMouseOut);
        (_f = this.lineLayer) === null || _f === void 0 ? void 0 : _f.off('click', this.onLineClick);
        if ((_g = this.options.state) === null || _g === void 0 ? void 0 : _g.active) {
            (_h = this.circleLayer) === null || _h === void 0 ? void 0 : _h.on('mousemove', this.onCircleMouseMove);
            (_j = this.circleLayer) === null || _j === void 0 ? void 0 : _j.on('mouseout', this.onCircleMouseOut);
            (_k = this.lineLayer) === null || _k === void 0 ? void 0 : _k.on('mousemove', this.onLineMouseMove);
            (_l = this.lineLayer) === null || _l === void 0 ? void 0 : _l.on('mouseout', this.onLineMouseOut);
        }
        if ((_m = this.options.state) === null || _m === void 0 ? void 0 : _m.select) {
            (_o = this.circleLayer) === null || _o === void 0 ? void 0 : _o.on('click', this.onCircleClick);
            (_p = this.lineLayer) === null || _p === void 0 ? void 0 : _p.on('click', this.onLineClick);
        }
    }
    updateClusterState() {
        const scene = this.scene;
        if (!scene) {
            return;
        }
        const maxZoom = scene.getMaxZoom();
        const minZoom = scene.getMinZoom();
        const currentBoundPolygon = (0, bbox_polygon_1.default)(scene.getBounds().flat());
        // 将当前地图展示的区域扩大 10% 作为客流点线范围计算时的缓冲区
        const currentBoundPolygonScale = (0, transform_scale_1.default)(currentBoundPolygon, 1.1);
        this.dataProviderState = Object.assign(Object.assign({}, this.options), { mapStatus: {
                zoom: scene.getZoom(),
                bounds: (0, bbox_1.default)(currentBoundPolygonScale),
            }, maxZoom,
            minZoom });
    }
    getCircleLayerOptions() {
        const { minZoom, maxZoom, zIndex, visible, blend, pickingBuffer, circleStrokeColor: stroke, circleStrokeWidth: strokeWidth, circleOpacity: opacity, } = this.options;
        const options = {
            source: {
                data: [],
                parser: {
                    type: 'json',
                    x: 'lng',
                    y: 'lat',
                },
            },
            shape: 'circle',
            minZoom,
            maxZoom,
            zIndex,
            visible,
            blend,
            pickingBuffer,
            style: {
                stroke,
                strokeWidth,
                opacity,
            },
        };
        if (this.dataProvider && this.scene) {
            const locationWeightRange = this.dataProvider.getLocationWeightRange(this.options.source, this.dataProviderState);
            options.source.data = this.dataProvider.getFilterLocations(this.options.source, this.dataProviderState);
            options.size = (0, utils_1.getSizeAttribute)(this.options.circleRadius, locationWeightRange);
            options.color = (0, utils_1.getColorAttribute)(this.options.circleColor, locationWeightRange);
        }
        return options;
    }
    getLineLayerOptions() {
        const { minZoom, maxZoom, zIndex, visible, blend, pickingBuffer, lineOpacity, lineWidth, lineColor, lineStroke, lineStrokeOpacity, lineStrokeWidth, } = this.options;
        const options = {
            source: {
                data: [],
                parser: {
                    type: 'json',
                    x: 'fromLng',
                    y: 'fromLat',
                    x1: 'toLng',
                    y1: 'toLat',
                },
            },
            shape: 'flowline',
            minZoom,
            maxZoom,
            zIndex,
            visible,
            blend,
            pickingBuffer,
            style: {
                gapWidth: lineStrokeWidth,
                stroke: lineStroke,
                strokeWidth: lineStrokeWidth,
                strokeOpacity: lineStrokeOpacity,
                opacity: lineOpacity,
            },
        };
        if (this.dataProvider && this.scene) {
            const flowWeightRange = this.dataProvider.getFlowWeightRange(this.options.source, this.dataProviderState);
            const filterFlowWeightRange = this.dataProvider.getFilterFlowWeightRange(this.options.source, this.dataProviderState);
            options.source.data = this.dataProvider.getFilterFlows(this.options.source, this.dataProviderState);
            options.size = (0, utils_1.getSizeAttribute)(lineWidth, flowWeightRange);
            options.color = (0, utils_1.getColorAttribute)(lineColor, flowWeightRange);
            if (this.options.fadeOpacityEnabled && options.style) {
                options.style.opacity = (0, utils_1.getOpacityColorAttribute)(filterFlowWeightRange, this.options.fadeOpacityAmount);
            }
            if (this.circleLayer && options.style) {
                const clusterIndex = this.dataProvider.getClusterIndex(this.options.source, this.dataProviderState);
                options.style.offsets = (0, utils_1.getLineOffsetsAttribute)(clusterIndex, this.circleLayer);
            }
        }
        return options;
    }
    getLocationNameLayerOptions() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const { minZoom, maxZoom, zIndex, visible, blend, pickingBuffer, showLocationName, getClusterLocationName, locationNameColor: fill, locationNameSize: fontSize, locationNameStroke: stroke, locationNameStrokeWidth: strokeWidth, locationNameStrokeOpacity: strokeOpacity, locationNameOffset: textOffset, } = this.options;
            const originSource = Object.assign({}, showLocationName ? (_b = (_a = this.circleLayer) === null || _a === void 0 ? void 0 : _a.options['source']) !== null && _b !== void 0 ? _b : constants_2.EMPTY_CIRCLE_LAYER_SOURCE : constants_2.EMPTY_CIRCLE_LAYER_SOURCE);
            if (getClusterLocationName) {
                originSource.data = yield Promise.all(originSource.data.map((location, locationIndex) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    if (!location.name) {
                        try {
                            location.name = yield getClusterLocationName(location, locationIndex);
                        }
                        catch (e) {
                            location.name = '';
                        }
                    }
                    return location;
                })));
            }
            const options = {
                source: originSource,
                field: 'name',
                minZoom,
                maxZoom,
                zIndex,
                visible,
                blend,
                pickingBuffer,
                style: {
                    fill,
                    fontSize,
                    stroke,
                    strokeOpacity,
                    strokeWidth,
                    textOffset,
                },
            };
            return options;
        });
    }
    getCircleHighlightLayerOptions() {
        return this._getCircleActiveLayerOptions(this._getFullActiveOptions());
    }
    getCircleSelectLayerOptions() {
        return this._getCircleActiveLayerOptions(this._getFullSelectOptions());
    }
    getLineHighlightLayerOptions() {
        return this._getLineActiveLayerOptions(this._getFullActiveOptions());
    }
    getLineSelectLayerOptions() {
        return this._getLineActiveLayerOptions(this._getFullSelectOptions());
    }
    renderHighlightLayers({ locations, flows }) {
        var _a, _b;
        (_a = this.circleHighlightLayer) === null || _a === void 0 ? void 0 : _a.update({
            source: {
                data: locations,
                parser: {
                    type: 'json',
                    x: 'lng',
                    y: 'lat',
                },
            },
        });
        (_b = this.lineHighlightLayer) === null || _b === void 0 ? void 0 : _b.update({
            source: {
                data: flows,
                parser: {
                    type: 'json',
                    x: 'fromLng',
                    y: 'fromLat',
                    x1: 'toLng',
                    y1: 'toLat',
                },
            },
        });
    }
    renderSelectLayers({ locations, flows }) {
        var _a, _b;
        (_a = this.circleSelectLayer) === null || _a === void 0 ? void 0 : _a.update({
            source: {
                data: locations,
                parser: {
                    type: 'json',
                    x: 'lng',
                    y: 'lat',
                },
            },
        });
        (_b = this.lineSelectLayer) === null || _b === void 0 ? void 0 : _b.update({
            source: {
                data: flows,
                parser: {
                    type: 'json',
                    x: 'fromLng',
                    y: 'fromLat',
                    x1: 'toLng',
                    y1: 'toLat',
                },
            },
        });
    }
    clearActiveLayers() {
        this.clearHighlightLayers();
        this.clearSelectLayers();
    }
    clearHighlightLayers() {
        this.renderHighlightLayers({
            locations: [],
            flows: [],
        });
    }
    clearSelectLayers() {
        this.renderSelectLayers({
            locations: [],
            flows: [],
        });
    }
    _getCircleLayerActiveData(layerEvent, { enableCircleSpread }) {
        const locationItem = layerEvent.feature;
        const { id: locationId } = locationItem;
        let flows = [];
        if (enableCircleSpread) {
            const filterFlows = this.dataProvider.getFilterFlows(this.options.source, this.dataProviderState);
            flows = filterFlows.filter((flow) => {
                return flow.fromId === locationId || flow.toId === locationId;
            });
        }
        return {
            locations: [locationItem],
            flows,
        };
    }
    _getLineLayerActiveData(layerEvent, { enableLineSpread }) {
        const flowItem = layerEvent.feature;
        const locations = [];
        const { fromId, toId } = flowItem;
        if (enableLineSpread) {
            const { clusterIdMap } = this.dataProvider.getClusterIndex(this.options.source, this.dataProviderState);
            const fromLocation = clusterIdMap.get(fromId);
            const toLocation = clusterIdMap.get(toId);
            if (fromLocation) {
                locations.push(fromLocation);
            }
            if (toLocation) {
                locations.push(toLocation);
            }
        }
        return {
            locations,
            flows: [flowItem],
        };
    }
    _getFullActiveOptions() {
        var _a, _b;
        return Object.assign(Object.assign({}, constants_2.DEFAULT_FLOW_LAYER_ACTIVE_OPTIONS), (((_a = this.options.state) === null || _a === void 0 ? void 0 : _a.active) instanceof Object ? (_b = this.options.state) === null || _b === void 0 ? void 0 : _b.active : {}));
    }
    _getFullSelectOptions() {
        var _a, _b;
        return Object.assign(Object.assign({}, constants_2.DEFAULT_FLOW_LAYER_SELECT_OPTIONS), (((_a = this.options.state) === null || _a === void 0 ? void 0 : _a.select) instanceof Object ? (_b = this.options.state) === null || _b === void 0 ? void 0 : _b.select : {}));
    }
    _getCircleActiveLayerOptions({ circleColor, circleStrokeColor, }) {
        var _a, _b;
        const { color, size, shape, style } = (_b = (_a = this.circleLayer) === null || _a === void 0 ? void 0 : _a.options) !== null && _b !== void 0 ? _b : {};
        return {
            color: circleColor !== null && circleColor !== void 0 ? circleColor : color,
            shape,
            size,
            style: {
                stroke: circleStrokeColor,
                strokeWidth: style.strokeWidth,
            },
        };
    }
    _getLineActiveLayerOptions({ lineColor, lineStroke, }) {
        var _a, _b;
        const { color, size, shape, style } = (_b = (_a = this.lineLayer) === null || _a === void 0 ? void 0 : _a.options) !== null && _b !== void 0 ? _b : {};
        return {
            color: lineColor !== null && lineColor !== void 0 ? lineColor : color,
            size,
            shape,
            style: {
                stroke: lineStroke,
                strokeWidth: style.lineStrokeWidth,
                gapWidth: style.lineStrokeWidth,
                offsets: style.offsets,
            },
        };
    }
}
exports.FlowLayer = FlowLayer;
/**
 * 默认配置项
 */
FlowLayer.DefaultOptions = constants_2.DEFAULT_OPTIONS;
//# sourceMappingURL=index.js.map