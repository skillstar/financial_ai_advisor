function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { DrawEvent } from '@antv/l7-draw';
import { cloneDeep, omit } from 'lodash-es';
import { useCallback, useEffect, useMemo, useState } from 'react';
import { useScene } from "../../LarkMap/hooks";
import { DRAW_TYPE_MAP } from "./constant";
export var useDraw = function useDraw(params) {
  var scene = useScene();
  // @ts-ignore
  var _useState = useState(function () {
      var _cloneDeep, _params$options;
      return (_cloneDeep = cloneDeep(params === null || params === void 0 || (_params$options = params.options) === null || _params$options === void 0 ? void 0 : _params$options.initialData)) !== null && _cloneDeep !== void 0 ? _cloneDeep : [];
    }),
    _useState2 = _slicedToArray(_useState, 2),
    drawData = _useState2[0],
    setDrawData = _useState2[1];
  var draw = useMemo(function () {
    if (!scene) {
      console.error('useDraw 只能使用在 LarkMap 容器中');
      return null;
    }
    var DrawClass = DRAW_TYPE_MAP[params.type];
    var newDraw = new DrawClass(scene, _objectSpread(_objectSpread({}, params.options), {}, {
      initialData: cloneDeep(drawData)
    }));
    return newDraw;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [scene, JSON.stringify(omit(params.options, 'initialData')), params.type]);

  // 当前是否在启用中
  var _useState3 = useState(draw.isEnable()),
    _useState4 = _slicedToArray(_useState3, 2),
    isEnable = _useState4[0],
    setIsEnable = _useState4[1];
  useEffect(function () {
    var onEnable = function onEnable() {
      return setIsEnable(true);
    };
    var onDisable = function onDisable() {
      return setIsEnable(false);
    };
    var onChange = function onChange(newData) {
      setDrawData(newData);
    };
    draw === null || draw === void 0 || draw.setData(drawData);
    draw === null || draw === void 0 || draw.on(DrawEvent.Enable, onEnable);
    draw === null || draw === void 0 || draw.on(DrawEvent.Disable, onDisable);
    draw === null || draw === void 0 || draw.on(DrawEvent.Change, onChange);
    return function () {
      // @ts-ignore
      setDrawData(draw.getData());
      draw === null || draw === void 0 || draw.off(DrawEvent.Enable, onEnable);
      draw === null || draw === void 0 || draw.off(DrawEvent.Disable, onDisable);
      draw === null || draw === void 0 || draw.off(DrawEvent.Change, onChange);
      draw === null || draw === void 0 || draw.destroy();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [draw]);
  var syncDrawData = useCallback(function (newData) {
    draw === null || draw === void 0 || draw.setData(newData);
    setDrawData(newData);
  }, [draw]);
  var drawFunctions = useMemo(function () {
    return {
      enable: draw === null || draw === void 0 ? void 0 : draw.enable.bind(draw),
      disable: draw === null || draw === void 0 ? void 0 : draw.disable.bind(draw),
      getDrawData: draw === null || draw === void 0 ? void 0 : draw.getData.bind(draw)
    };
  }, [draw]);
  return _objectSpread({
    drawType: params.type,
    draw: draw,
    drawData: drawData,
    setDrawData: syncDrawData,
    isEnable: isEnable
  }, drawFunctions);
};