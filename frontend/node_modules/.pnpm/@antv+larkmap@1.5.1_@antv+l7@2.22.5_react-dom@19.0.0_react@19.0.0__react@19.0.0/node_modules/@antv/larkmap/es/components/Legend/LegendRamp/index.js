import { useSize } from 'ahooks';
import classnames from 'classnames';
import React, { useRef } from 'react';
import "./index.css";
export var CLS_PREFIX = 'larkmap-legend-ramp';
var getMinMax = function getMinMax(labels) {
  var max = labels[labels.length - 1];
  var min = labels[0];
  if (!Number.isFinite(min)) {
    min = parseInt(min, 10);
  }
  if (!Number.isFinite(max)) {
    max = parseInt(max, 10);
  }
  return [min, max];
};
function Continuous(_ref) {
  var labels = _ref.labels,
    _ref$labelUnit = _ref.labelUnit,
    labelUnit = _ref$labelUnit === void 0 ? '' : _ref$labelUnit,
    colors = _ref.colors;
  var minLabel = labels[0] + labelUnit;
  var maxLabel = labels[labels.length - 1] + labelUnit;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "".concat(CLS_PREFIX, "__continuous"),
    style: {
      background: "linear-gradient(to right,".concat(colors, ")")
    }
  }), /*#__PURE__*/React.createElement("div", {
    className: "".concat(CLS_PREFIX, "__continuous-labelbar")
  }, /*#__PURE__*/React.createElement("span", null, minLabel), /*#__PURE__*/React.createElement("span", null, maxLabel)));
}
function DisContinuous(_ref2) {
  var labels = _ref2.labels,
    _ref2$labelUnit = _ref2.labelUnit,
    labelUnit = _ref2$labelUnit === void 0 ? '' : _ref2$labelUnit,
    colors = _ref2.colors;
  var containerRef = useRef(null);
  var containerSize = useSize(containerRef);
  var stepWidth = (containerSize === null || containerSize === void 0 ? void 0 : containerSize.width) / (colors.length + 1);

  // right labels is labels.length = colors.length + 1
  var rightLabels = labels;

  // 当两端处于无穷最大最小时，比如 < 10、10 - 20、≥ 20
  if (labels.length + 1 === colors.length) {
    var minLabel = '< ' + labels[0];
    var maxLabel = '≥ ' + labels[labels.length - 1];
    rightLabels.unshift(minLabel);
    rightLabels.push(maxLabel);
  }
  var tooltip = function tooltip(idx) {
    var title = "".concat(labels[idx]).concat(labelUnit, " - ").concat(labels[idx + 1]).concat(labelUnit);
    return title;
  };
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(CLS_PREFIX, "__dis-continuous"),
    ref: containerRef
  }, Number.isNaN(stepWidth) ? null : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "".concat(CLS_PREFIX, "__dis-continuous__colors"),
    style: {
      paddingLeft: stepWidth / 2
    }
  }, colors === null || colors === void 0 ? void 0 : colors.map(function (item, i) {
    return /*#__PURE__*/React.createElement("div", {
      key: item,
      title: tooltip(i),
      className: "".concat(CLS_PREFIX, "__dis-continuous__color"),
      style: {
        background: item,
        width: stepWidth
      }
    });
  })), /*#__PURE__*/React.createElement("div", {
    className: "".concat(CLS_PREFIX, "__dis-continuous__labels")
  }, labels === null || labels === void 0 ? void 0 : labels.map(function (item) {
    var label = item + labelUnit;
    return /*#__PURE__*/React.createElement("span", {
      key: item,
      className: "".concat(CLS_PREFIX, "__dis-continuous__label")
    }, label);
  }))));
}
export function LegendRamp(props) {
  var _props$isContinuous = props.isContinuous,
    isContinuous = _props$isContinuous === void 0 ? false : _props$isContinuous,
    labels = props.labels,
    colors = props.colors,
    _props$labelUnit = props.labelUnit,
    labelUnit = _props$labelUnit === void 0 ? '' : _props$labelUnit,
    cls = props.className,
    style = props.style;

  // const [min, max] = getMinMax(labels);
  // const isError = Number.isNaN(min) || Number.isNaN(max);
  // 传入错误数据情况处理 TODO

  return /*#__PURE__*/React.createElement("div", {
    className: classnames("".concat(CLS_PREFIX), cls),
    style: style
  }, isContinuous ? /*#__PURE__*/React.createElement(Continuous, {
    labels: labels,
    labelUnit: labelUnit,
    colors: colors
  }) : /*#__PURE__*/React.createElement(DisContinuous, {
    labels: labels,
    labelUnit: labelUnit,
    colors: colors
  }));
}