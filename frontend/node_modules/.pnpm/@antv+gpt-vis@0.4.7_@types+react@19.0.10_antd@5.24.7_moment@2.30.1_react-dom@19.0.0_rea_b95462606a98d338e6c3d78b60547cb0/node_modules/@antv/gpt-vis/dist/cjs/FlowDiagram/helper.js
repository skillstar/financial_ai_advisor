var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/FlowDiagram/helper.ts
var helper_exports = {};
__export(helper_exports, {
  getGraphOptionsByData: () => getGraphOptionsByData
});
module.exports = __toCommonJS(helper_exports);
function getGraphOptionsByData(data) {
  if (isLinearStructure(data))
    return {
      node: {
        style: {
          ports: [
            { placement: "right" },
            { placement: "left" },
            { placement: "top" },
            { placement: "bottom" }
          ]
        }
      },
      layout: {
        type: "snake",
        cols: 3,
        rowGap: 40
      }
    };
  return {};
}
function isLinearStructure(data) {
  const { nodes = [], edges = [] } = data;
  const inDegree = {};
  const outDegree = {};
  const adjList = {};
  nodes.forEach((node) => {
    inDegree[node.id] = 0;
    outDegree[node.id] = 0;
    adjList[node.id] = [];
  });
  edges.forEach((edge) => {
    inDegree[edge.target]++;
    outDegree[edge.source]++;
    adjList[edge.source].push(edge.target);
  });
  const visited = /* @__PURE__ */ new Set();
  const dfs = (nodeId) => {
    if (visited.has(nodeId))
      return;
    visited.add(nodeId);
    adjList[nodeId].forEach(dfs);
  };
  dfs(nodes[0].id);
  if (visited.size !== nodes.length)
    return false;
  const sourceNodes = nodes.filter((node) => inDegree[node.id] === 0);
  const sinkNodes = nodes.filter((node) => outDegree[node.id] === 0);
  if (sourceNodes.length !== 1 || sinkNodes.length !== 1)
    return false;
  const middleNodes = nodes.filter((node) => inDegree[node.id] === 1 && outDegree[node.id] === 1);
  if (middleNodes.length !== nodes.length - 2)
    return false;
  return true;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getGraphOptionsByData
});
