"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoreLayer = void 0;
const tslib_1 = require("tslib");
const event_emitter_1 = tslib_1.__importDefault(require("@antv/event-emitter"));
const l7_1 = require("@antv/l7");
const util_1 = require("@antv/util");
const attribute_1 = require("../adaptor/attribute");
const utils_1 = require("../utils");
const constants_1 = require("./constants");
class CoreLayer extends event_emitter_1.default {
    /**
     * 图层是否初始化成功
     */
    get inited() {
        return this.layer.inited;
    }
    /**
     * 图层的 source 实例
     */
    get source() {
        return this.layer.getSource();
    }
    constructor(options) {
        super();
        /**
         * 是否是复合图层
         */
        this.isComposite = false;
        const { id, name, source, interaction = false } = options;
        this.id = id ? id : (0, util_1.uniqueId)('core-layer');
        this.name = name ? name : this.id;
        this.interaction = interaction;
        this.options = (0, utils_1.deepMergeLayerOptions)(this.getDefaultOptions(), options);
        this.lastOptions = this.options;
        this.layer = this.createLayer();
        this.adaptorLayerAttr(false);
        this.setSource(source);
        this.emit(constants_1.CoreLayerEvent.CREATED, this);
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return CoreLayer.DefaultOptions;
    }
    /**
     * 获取创建图层配置项
     */
    getLayerConfig() {
        const config = (0, util_1.omit)(this.options, [
            'source',
            'shape',
            'color',
            'size',
            'scale',
            'texture',
            'style',
            'animate',
            'state',
        ]);
        return config;
    }
    /**
     * 适配属性配置
     */
    adaptorAttrOptions(options) {
        return options;
    }
    /**
     * 映射图层属性
     */
    adaptorLayerAttr(isDiff = true) {
        const attrKeys = ['shape', 'color', 'size', 'scale', 'texture', 'filter', 'style', 'animate', 'state'];
        const currentAttrs = this.adaptorAttrOptions(this.options);
        const lastAttrs = this.adaptorAttrOptions(this.lastOptions);
        for (let index = 0; index < attrKeys.length; index++) {
            const attrKey = attrKeys[index];
            const attrValue = currentAttrs[attrKey];
            const lastAttrValue = lastAttrs[attrKey];
            // 当属性不为空与值不相等时，更新属性映射，（不做 diff 时，不做 equal 判断
            if (!(0, util_1.isUndefined)(attrValue) && (!isDiff || !(0, util_1.isEqual)(attrValue, lastAttrValue))) {
                attribute_1.MappingAttribute[attrKey](this.layer, attrValue);
            }
        }
    }
    /**
     * 设置图层数据
     * 支持 source 配置项与 source 实例更新
     */
    setSource(source) {
        if (source instanceof l7_1.Source) {
            this.layer.setSource(source);
        }
        else {
            const { data } = source, option = tslib_1.__rest(source, ["data"]);
            const layerSource = this.layer.getSource();
            if (layerSource) {
                this.layer.setData(data, option);
            }
            else {
                this.layer.source(data, option);
            }
        }
    }
    /**
     * 获取图层 source 实例
     */
    getSource() {
        return this.source;
    }
    /**
     * 添加到场景
     */
    addTo(scene) {
        this.scene = scene;
        this.layer.once(constants_1.CoreLayerEvent.INITED, () => {
            this.emit(constants_1.CoreLayerEvent.INITED, this);
        });
        this.layer.once(constants_1.CoreLayerEvent.ADD, () => {
            this.emit(constants_1.CoreLayerEvent.ADD, this);
        });
        scene.addLayer(this.layer);
    }
    /**
     * 从场景移除
     */
    remove() {
        if (!this.scene)
            return;
        this.scene.removeLayer(this.layer);
        this.emit(constants_1.CoreLayerEvent.REMOVE);
    }
    /**
     * 更新
     */
    update(options, autoRender = true) {
        var _a, _b;
        this.updateOption(options);
        this.updateConfig(options);
        // 停止渲染，避免属性更新与数据更新造成多次内部调用 scene render => renderLayers
        if (autoRender) {
            (_a = this.scene) === null || _a === void 0 ? void 0 : _a.setEnableRender(false);
        }
        if ((0, util_1.isUndefined)(this.options.visible) || this.options.visible) {
            this.adaptorLayerAttr();
        }
        if (options.source && (0, utils_1.isSourceChanged)(options.source, this.lastOptions.source)) {
            this.changeData(options.source);
        }
        if (autoRender) {
            (_b = this.scene) === null || _b === void 0 ? void 0 : _b.setEnableRender(true);
            this.render();
        }
    }
    /**
     * 更新: 更新配置
     */
    updateOption(options) {
        this.lastOptions = this.options;
        this.options = (0, utils_1.deepMergeLayerOptions)(this.options, options);
    }
    // 更新: 更新图层属性配置
    updateConfig(options) {
        if (!(0, util_1.isUndefined)(options.zIndex) && !(0, util_1.isEqual)(this.lastOptions.zIndex, this.options.zIndex)) {
            this.setIndex(options.zIndex);
        }
        if (!(0, util_1.isUndefined)(options.blend) && !(0, util_1.isEqual)(this.lastOptions.blend, this.options.blend)) {
            this.setBlend(options.blend);
        }
        if (!(0, util_1.isUndefined)(options.minZoom) && !(0, util_1.isEqual)(this.lastOptions.minZoom, this.options.minZoom)) {
            this.setMinZoom(options.minZoom);
        }
        if (!(0, util_1.isUndefined)(options.maxZoom) && !(0, util_1.isEqual)(this.lastOptions.maxZoom, this.options.maxZoom)) {
            this.setMaxZoom(options.maxZoom);
        }
        if (!(0, util_1.isUndefined)(options.visible) && !(0, util_1.isEqual)(this.lastOptions.visible, this.options.visible)) {
            options.visible ? this.show() : this.hide();
        }
    }
    render() {
        if (this.scene) {
            this.scene.render();
        }
    }
    /**
     * 更新数据
     * 支持 source 配置项
     */
    changeData(source) {
        this.setSource(source);
    }
    /**
     * 设置图层 zIndex
     */
    setIndex(zIndex) {
        this.layer.setIndex(zIndex);
    }
    /**
     * 设置图层 blend
     */
    setBlend(blend) {
        this.layer.setBlend(blend);
    }
    /**
     * 设置图层 minZoom
     */
    setMinZoom(minZoom) {
        this.layer.setMinZoom(minZoom);
    }
    /**
     * 设置图层 maxZoom
     */
    setMaxZoom(maxZoom) {
        this.layer.setMaxZoom(maxZoom);
    }
    /**
     * 显示图层
     */
    show() {
        if (!this.layer.inited)
            return;
        this.layer.show();
    }
    /**
     * 隐藏图层
     */
    hide() {
        if (!this.layer.inited)
            return;
        this.layer.hide();
    }
    /**
     * 切换图层显隐状态
     */
    toggleVisible() {
        this.isVisible() ? this.hide() : this.show();
    }
    /**
     * 图层是否可见
     */
    isVisible() {
        return this.layer.inited ? this.layer.isVisible() : (0, util_1.isUndefined)(this.options.visible) ? true : this.options.visible;
    }
    /**
     * 图层框选数据
     */
    boxSelect(bounds, callback) {
        this.layer.boxSelect(bounds, callback);
    }
    /**
     * 定位到当前图层数据范围
     */
    fitBounds(fitBoundsOptions) {
        this.layer.fitBounds(fitBoundsOptions);
    }
    /**
     * 获取图例
     */
    getLegend(name) {
        return this.layer.getLegend(name);
    }
    /**
     * 获取图例数据
     */
    getLegendItems(type) {
        return this.layer.getLegendItems(type);
    }
    /**
     * 事件代理: 绑定事件
     */
    on(name, callback, once) {
        if (constants_1.OriginLayerEventList.indexOf(name) !== -1) {
            this.layer.on(name, callback);
        }
        else {
            super.on(name, callback, once);
        }
        return this;
    }
    /**
     * 事件代理: 绑定一次事件
     */
    once(name, callback) {
        if (constants_1.OriginLayerEventList.indexOf(name) !== -1) {
            this.layer.once(name, callback);
        }
        else {
            super.once(name, callback);
        }
        return this;
    }
    /**
     * 事件代理: 解绑事件
     */
    off(name, callback) {
        if (constants_1.OriginLayerEventList.indexOf(name) !== -1) {
            this.layer.off(name, callback);
        }
        else {
            super.off(name, callback);
        }
        return this;
    }
    /**
     * 摧毁
     */
    destroy() {
        this.layer.destroy();
    }
}
exports.CoreLayer = CoreLayer;
/**
 * 默认的 options 配置项
 */
CoreLayer.DefaultOptions = {};
//# sourceMappingURL=core-layer.js.map