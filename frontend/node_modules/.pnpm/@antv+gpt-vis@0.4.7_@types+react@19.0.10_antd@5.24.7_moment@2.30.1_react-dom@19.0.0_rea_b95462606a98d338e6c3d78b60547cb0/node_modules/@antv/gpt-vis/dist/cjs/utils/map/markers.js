var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/map/markers.ts
var markers_exports = {};
__export(markers_exports, {
  setMarkers: () => setMarkers
});
module.exports = __toCommonJS(markers_exports);
var import_l7 = require("@antv/l7");
var import_lodash = require("lodash");
var import_util = require("./util");
function setMarkers(data) {
  const items = data.map((item) => {
    var _a, _b, _c;
    return {
      ...item,
      label: (0, import_lodash.isObject)(item.label) ? item.label.content : item.label,
      color: (_a = item.label) == null ? void 0 : _a.color,
      bgColor: (_b = item.label) == null ? void 0 : _b.bgColor,
      fontSize: (_c = item.label) == null ? void 0 : _c.fontSize,
      offsets: [item.anchorX || 0, item.anchorY || -1],
      iconPath: item.iconPath ? (0, import_util.urlToMarkerId)(item.iconPath) : void 0
    };
  });
  const icons = items.filter((item) => item.iconPath !== void 0);
  const texts = items.filter((item) => item.label !== void 0);
  const layers = [];
  if (texts.length > 0) {
    const offsets = texts[0].offsets;
    const fontSize = texts[0].fontSize || 10;
    const text = new import_l7.PointLayer({
      zIndex: 2
    }).source(texts, {
      parser: {
        type: "json",
        x: "longitude",
        y: "latitude"
      }
    }).shape("label", "text").size("fontSize").color("color").style({
      opacity: 1,
      textOffset: [offsets[0], -2 * offsets[1] * fontSize],
      fontWeight: 600,
      textAnchor: "center",
      stroke: texts[0].bgColor || "#ffffff",
      // 描边颜色
      strokeWidth: 2,
      // 描边宽度
      strokeOpacity: 1,
      padding: [10, 10]
    });
    layers.push(text);
  }
  if (icons.length !== 0) {
    const offsets = icons[0].offsets;
    const width = icons[0].width || 10;
    const iconLayer = new import_l7.PointLayer().source(icons, {
      parser: {
        type: "json",
        x: "longitude",
        y: "latitude"
      }
    }).shape("iconPath").size("width").style({
      offsets: [offsets[0], offsets[1] * width]
    });
    layers.push(iconLayer);
  }
  return layers;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  setMarkers
});
