function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
import { bbox, coordAll, envelope, featureCollection } from '@turf/turf';
import { cloneDeep, isEqual } from 'lodash';
import { DrawEvent } from '../constant';
import { DragPolygonMode } from '../mode';
import { createLineFeature, createPointFeature, getDefaultPolygonProperties, isSameFeature } from '../utils';
import { DEFAULT_RECT_HELPER_CONFIG } from '../constant/helper';
export var RectDrawer = /*#__PURE__*/function (_DragPolygonMode) {
  function RectDrawer(scene, options) {
    var _this;
    _classCallCheck(this, RectDrawer);
    _this = _callSuper(this, RectDrawer, [scene, options]);
    _this.bindPointRenderEvent();
    _this.bindSceneEvent();
    _this.bindMidPointRenderEvent();
    _this.bindLineRenderEvent();
    _this.bindPolygonRenderEvent();
    return _this;
  }
  _inherits(RectDrawer, _DragPolygonMode);
  return _createClass(RectDrawer, [{
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      var newOptions = _get(_getPrototypeOf(RectDrawer.prototype), "getDefaultOptions", this).call(this, options);
      if (newOptions.helper) {
        newOptions.helper = _objectSpread(_objectSpread({}, newOptions.helper), DEFAULT_RECT_HELPER_CONFIG);
      }
      return newOptions;
    }
  }, {
    key: "setData",
    value: function setData(data) {
      var _this2 = this;
      var result = data.map(function (feature) {
        var _feature$properties, _nodes, _feature$properties2;
        feature.properties = _objectSpread(_objectSpread({}, getDefaultPolygonProperties()), (_feature$properties = feature.properties) !== null && _feature$properties !== void 0 ? _feature$properties : {});
        var nodes = feature.properties.nodes;
        if (((_nodes = nodes) === null || _nodes === void 0 ? void 0 : _nodes.length) !== 2) {
          var _bbox = bbox(feature),
            _bbox2 = _slicedToArray(_bbox, 4),
            lng1 = _bbox2[0],
            lat1 = _bbox2[1],
            lng2 = _bbox2[2],
            lat2 = _bbox2[3];
          nodes = [createPointFeature([lng1, lat1]), createPointFeature([lng2, lat2])];
          feature.properties.nodes = nodes;
        }
        var _nodes2 = nodes,
          _nodes3 = _slicedToArray(_nodes2, 2),
          startNode = _nodes3[0],
          endNode = _nodes3[1];
        var isActive = !!((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.isActive);
        var line = feature.properties.line;
        if (!line) {
          line = _this2.handleCreatePolygonLine(startNode, endNode, {
            isActive: isActive
          });
          feature.properties.line = line;
        }
        return _this2.handleCreatePolygon([startNode, endNode], line, _objectSpread(_objectSpread({}, feature.properties), {}, {
          isActive: isActive
        }));
      });
      this.source.setData({
        point: [],
        midPoint: [],
        dashLine: [],
        polygon: result,
        line: result.map(function (feature) {
          return feature.properties.line;
        })
      });
      this.setTextData(this.getAllTexts());
      if (this.editPolygon) {
        this.setActivePolygon(this.editPolygon);
      }
    }
  }, {
    key: "handleCreatePolygonLine",
    value: function handleCreatePolygonLine(startNode, endNode) {
      var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var positions = coordAll(envelope(featureCollection([startNode, endNode])));
      var nodes = positions.map(function (position, index) {
        if (index === 0) {
          return startNode;
        }
        if (index === 2) {
          return endNode;
        }
        return createPointFeature(position);
      });
      return createLineFeature(nodes, properties);
    }
  }, {
    key: "syncPolygonNodes",
    value: function syncPolygonNodes(polygon, nodes) {
      var line = polygon.properties.line;
      var positions = coordAll(envelope(featureCollection(nodes)));
      polygon.properties.nodes = nodes;
      polygon.geometry.coordinates = [positions];
      this.setPolygonData(function (features) {
        return features.map(function (feature) {
          if (isSameFeature(feature, polygon)) {
            return polygon;
          }
          return feature;
        });
      });
      this.setPointData(polygon.properties.isDraw ? [nodes[0]] : nodes);
      var lineNodes = line.properties.nodes;
      var otherPositions = positions.filter(function (position) {
        return !isEqual(position, nodes[0].geometry.coordinates) && !isEqual(position, nodes[1].geometry.coordinates);
      });
      lineNodes.forEach(function (lineNode, index) {
        var position = [0, 0];
        switch (index) {
          case 0:
            position = nodes[0].geometry.coordinates;
            break;
          case 1:
            position = otherPositions[0];
            break;
          case 2:
            position = nodes[1].geometry.coordinates;
            break;
          case 3:
            position = otherPositions[1];
            break;
          case 4:
            position = cloneDeep(nodes[0].geometry.coordinates);
            break;
        }
        lineNode.geometry.coordinates = position;
      });
      line.geometry.coordinates = positions;
      return polygon;
    }
  }, {
    key: "onLineDragging",
    value: function onLineDragging(e) {
      var feature = _get(_getPrototypeOf(RectDrawer.prototype), "onLineDragging", this).call(this, e);
      var dragPolygon = this.dragPolygon;
      if (feature && dragPolygon) {
        var lineNodes = dragPolygon.properties.line.properties.nodes;
        this.syncPolygonNodes(dragPolygon, [lineNodes[0], lineNodes[2]]);
        this.setActivePolygon(dragPolygon, {
          isDrag: true
        });
        this.emit(DrawEvent.Dragging, dragPolygon, this.getPolygonData());
      }
      return feature;
    }
  }]);
}(DragPolygonMode);