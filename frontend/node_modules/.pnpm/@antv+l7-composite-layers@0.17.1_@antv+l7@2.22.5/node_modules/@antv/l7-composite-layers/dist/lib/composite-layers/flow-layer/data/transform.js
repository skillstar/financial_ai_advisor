"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.xLng = xLng;
exports.yLat = yLat;
exports.lngX = lngX;
exports.latY = latY;
exports.transformSource = transformSource;
const util_1 = require("@antv/util");
const id_1 = require("../utils/id");
function xLng(x) {
    return (x - 0.5) * 360;
}
function yLat(y) {
    const y2 = ((180 - y * 360) * Math.PI) / 180;
    return (360 * Math.atan(Math.exp(y2))) / Math.PI - 90;
}
// longitude/latitude to spherical mercator in [0..1] range
function lngX(lng) {
    return lng / 360 + 0.5;
}
function latY(lat) {
    const sin = Math.sin((lat * Math.PI) / 180);
    const y = 0.5 - (0.25 * Math.log((1 + sin) / (1 - sin))) / Math.PI;
    return y < 0 ? 0 : y > 1 ? 1 : y;
}
function transformSource(source) {
    const locationMap = new Map();
    const flowMap = new Map();
    const { data, parser } = source;
    const { type, x: xField, y: yField, x1: x1Field, y1: y1Field, weight: weightField, name: nameField, name1: name1Field, } = parser;
    const makeSureLocation = ({ lng, lat, weight, name }) => {
        const id = `${lng}-${lat}`;
        let location = locationMap.get(id);
        if (!location) {
            location = {
                id: (0, id_1.getLocationId)(),
                lng: lng,
                lat: lat,
                weight,
                name,
            };
            locationMap.set(id, location);
        }
        return location;
    };
    if (type === 'json' && xField && yField && x1Field && y1Field) {
        data.forEach((item) => {
            const lng1 = +(0, util_1.get)(item, xField, 0);
            const lat1 = +(0, util_1.get)(item, yField, 0);
            const lng2 = +(0, util_1.get)(item, x1Field, 0);
            const lat2 = +(0, util_1.get)(item, y1Field, 0);
            const weight = weightField ? +(0, util_1.get)(item, weightField, 0) : 1;
            const flowKey = `${lng1}-${lat1}-${lng2}-${lat2}`;
            const targetFlow = flowMap.get(flowKey);
            if (targetFlow) {
                targetFlow.weight += weight;
            }
            else {
                const name1 = nameField && (0, util_1.get)(item, nameField, undefined);
                const name2 = name1Field && (0, util_1.get)(item, name1Field, undefined);
                const location1 = makeSureLocation({ lng: lng1, lat: lat1, weight, name: name1 });
                const location2 = makeSureLocation({ lng: lng2, lat: lat2, weight, name: name2 });
                flowMap.set(flowKey, {
                    id: (0, id_1.getFlowId)(),
                    fromId: location1.id,
                    toId: location2.id,
                    weight,
                });
            }
        });
    }
    else {
        console.error('FlowLayer 的 source 输入有误，请检查 source 传参');
    }
    return {
        locations: Array.from(locationMap.values()),
        flows: Array.from(flowMap.values()),
    };
}
//# sourceMappingURL=transform.js.map