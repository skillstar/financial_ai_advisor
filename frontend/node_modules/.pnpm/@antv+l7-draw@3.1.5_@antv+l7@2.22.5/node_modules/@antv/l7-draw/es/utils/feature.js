function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { bbox, coordAll, featureCollection, lineString, point } from '@turf/turf';
import { first } from 'lodash';
/**
 * 获取feature唯一id
 */
export var getUuid = function () {
  var count = 1;
  return function (prefix) {
    return "".concat(prefix, "-").concat(count++);
  };
}();
/**
 * 根据id判断两个feature是否为同一feature
 * @param feature1
 * @param feature2
 */
export var isSameFeature = function isSameFeature(feature1, feature2) {
  var _feature1$properties, _feature2$properties;
  return !!(feature1 && feature2 && ((_feature1$properties = feature1.properties) === null || _feature1$properties === void 0 ? void 0 : _feature1$properties.id) === ((_feature2$properties = feature2.properties) === null || _feature2$properties === void 0 ? void 0 : _feature2$properties.id));
};
/**
 * 对target数据使用targetHandler，对target以外数据采用otherHandler
 * @param target
 * @param data
 * @param targetHandler
 * @param otherHandler
 */
export var updateTargetFeature = function updateTargetFeature(_ref) {
  var target = _ref.target,
    data = _ref.data,
    targetHandler = _ref.targetHandler,
    otherHandler = _ref.otherHandler;
  return data.map(function (item, index) {
    var _handler;
    var handler = isSameFeature(item, target) ? targetHandler : otherHandler;
    return (_handler = handler === null || handler === void 0 ? void 0 : handler(item, index)) !== null && _handler !== void 0 ? _handler : item;
  });
};
export var getDefaultPointProperties = function getDefaultPointProperties() {
  return {
    id: getUuid('point'),
    isHover: false,
    isActive: false,
    isDrag: false,
    createTime: Date.now()
  };
};
export var getDefaultLineProperties = function getDefaultLineProperties() {
  return {
    id: getUuid('line'),
    isHover: false,
    isActive: false,
    isDrag: false,
    isDraw: false,
    createTime: Date.now()
  };
};
export var getDefaultPolygonProperties = function getDefaultPolygonProperties() {
  return {
    id: getUuid('polygon'),
    isHover: false,
    isActive: false,
    isDrag: false,
    isDraw: false,
    createTime: Date.now()
  };
};
// export const getDefaultLinePro
/**
 * 创建
 * @param position
 * @param properties
 */
export var createPointFeature = function createPointFeature(position) {
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return point(position, _objectSpread(_objectSpread({}, getDefaultPointProperties()), properties));
};
export var createLineFeature = function createLineFeature(nodes) {
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return {
    type: 'Feature',
    properties: _objectSpread(_objectSpread({}, getDefaultLineProperties()), {}, {
      nodes: nodes
    }, properties),
    geometry: {
      type: 'LineString',
      coordinates: coordAll(featureCollection(nodes))
    }
  };
};
export var createDashLine = function createDashLine(positions) {
  return lineString(positions, {
    id: getUuid('dashLine')
  });
};
export var createPolygonFeature = function createPolygonFeature(nodes) {
  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return {
    type: 'Feature',
    properties: _objectSpread(_objectSpread({}, getDefaultPolygonProperties()), {}, {
      nodes: nodes
    }, properties),
    geometry: {
      type: 'Polygon',
      coordinates: [coordAll(featureCollection([].concat(_toConsumableArray(nodes), [first(nodes)])))]
    }
  };
};
/**
 * 为 feature 加入 bbox 属性
 * @param features
 * @returns
 */
export var injectFeaturesBBox = function injectFeaturesBBox(features) {
  features.forEach(function (feature) {
    feature.bbox = bbox(feature);
  });
  return features;
};
/**
 * 在 setData 时调用，将数据中的 Multi 元素拆分成多个单元素，并赋予 multiIndex，以便在 getData 时组装
 * @param features
 * @returns
 */
export var splitMultiFeatures = function splitMultiFeatures(features) {
  return features.map(function (feature, index) {
    if (feature.geometry.type.startsWith('Multi')) {
      var newType = feature.geometry.type.replace('Multi', '');
      return feature.geometry.coordinates.map(function (coordinates) {
        return {
          type: 'Feature',
          properties: _objectSpread(_objectSpread({}, feature.properties), {}, {
            multiIndex: index
          }),
          geometry: {
            type: newType,
            coordinates: coordinates
          }
        };
      });
    }
    return feature;
  }).flat();
};
/**
 * 在 getData 时调用，将分散的 Multi 数据组装成原始 Multi 结构的 feature
 * @param features
 * @returns
 */
export var joinMultiFeatures = function joinMultiFeatures(features) {
  var newFeatures = [];
  var multiFeatureMap = {};
  features.forEach(function (feature) {
    var _feature$properties;
    var multiIndex = (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.multiIndex;
    if (typeof multiIndex === 'number') {
      var targetMultiFeature = multiFeatureMap[multiIndex];
      if (targetMultiFeature) {
        targetMultiFeature.geometry.coordinates.push(feature.geometry.coordinates);
      } else {
        var newType = "Multi".concat(feature.geometry.type);
        var newMultiFeature = {
          type: 'Feature',
          properties: _objectSpread({}, feature.properties),
          geometry: {
            type: newType,
            coordinates: [feature.geometry.coordinates]
          }
        };
        multiFeatureMap[multiIndex] = newMultiFeature;
        newFeatures.push(newMultiFeature);
      }
    } else {
      newFeatures.push(feature);
    }
  });
  return newFeatures;
};