import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
var _excluded = ["data"];
import { MindMap as ADCMindMap } from '@ant-design/graphs';
import React, { useMemo } from 'react';
import { useGraphConfig } from "../ConfigProvider/hooks";
import { visTreeData2GraphData } from "../utils/graph";
var defaultConfig = {
  type: 'boxed',
  autoFit: 'view',
  autoResize: true,
  padding: 2,
  node: {
    animation: {
      translate: false,
      update: false
    }
  },
  edge: {
    animation: {
      translate: false,
      update: false
    }
  },
  transforms: function transforms(prev) {
    return [].concat(_toConsumableArray(prev.filter(function (transform) {
      return transform.type !== 'collapse-expand-react-node';
    })), [_objectSpread(_objectSpread({}, prev.find(function (transform) {
      return transform.type === 'collapse-expand-react-node';
    })), {}, {
      enable: true
    })]);
  }
};
var MindMap = function MindMap(props) {
  var propsData = props.data,
    restProps = _objectWithoutProperties(props, _excluded);
  var data = useMemo(function () {
    return visTreeData2GraphData(propsData);
  }, [propsData]);
  var config = useGraphConfig('MindMap', defaultConfig, restProps);
  return /*#__PURE__*/React.createElement(ADCMindMap, _extends({
    data: data
  }, config));
};
export default MindMap;