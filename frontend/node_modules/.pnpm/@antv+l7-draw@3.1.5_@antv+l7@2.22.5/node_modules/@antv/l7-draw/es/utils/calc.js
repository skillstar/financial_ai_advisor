function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { along, area, center, centerOfMass, coordAll, distance, featureCollection, length, point } from '@turf/turf';
import { getUuid } from './feature';
/**
 * 将数字转四舍五入为目标精度位数的数字
 * @param num
 * @param precision
 * @returns
 */
export var getPrecisionNumber = function getPrecisionNumber(num) {
  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;
  return Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision);
};
/**
 * 获取线段的中心点Feature
 * @param feature
 */
export var getLineCenterPoint = function getLineCenterPoint(feature) {
  var dis = length(feature, {
    units: 'meters'
  });
  return along(feature, dis / 2, {
    units: 'meters'
  });
};
/**
 * 返回线段对应的距离文本
 * @param feature
 * @param showTotalDistance
 * @param format
 * @param properties
 */
export var calcDistanceTextsByLine = function calcDistanceTextsByLine(feature, _ref) {
  var showTotalDistance = _ref.showTotalDistance,
    format = _ref.format;
  var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var textList = [];
  if (showTotalDistance) {
    var text = getLineCenterPoint(feature);
    var meters = length(feature, {
      units: 'meters'
    });
    var pointFeatures = coordAll(feature).map(function (item) {
      return point(item);
    });
    text.properties = _objectSpread({
      id: getUuid('text'),
      isActive: false,
      meters: meters,
      text: format(meters, pointFeatures),
      type: 'totalDistance'
    }, properties);
    textList.push(text);
  } else {
    var coordinates = feature.geometry.coordinates;
    for (var index = 0; index < coordinates.length - 1; index++) {
      var currentPoint = point(coordinates[index]);
      var nextPoint = point(coordinates[index + 1]);
      var _meters = distance(currentPoint, nextPoint, {
        units: 'meters'
      });
      var _text = center(featureCollection([currentPoint, nextPoint]));
      _text.properties = _objectSpread({
        id: getUuid('text'),
        isActive: false,
        meters: _meters,
        text: format(_meters, [currentPoint, nextPoint]),
        type: 'distance'
      }, properties);
      textList.push(_text);
    }
  }
  return textList;
};
/**
 * 根据传入的polygon和options配置获取面积文本Feature
 * @param feature
 * @param options
 * @param properties
 */
export var calcAreaText = function calcAreaText(feature, options) {
  var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var format = options.format;
  var meters = area(feature);
  return centerOfMass(feature, {
    properties: _objectSpread({
      meters: meters,
      text: format(meters, feature),
      type: 'area',
      isActive: false
    }, properties)
  });
};