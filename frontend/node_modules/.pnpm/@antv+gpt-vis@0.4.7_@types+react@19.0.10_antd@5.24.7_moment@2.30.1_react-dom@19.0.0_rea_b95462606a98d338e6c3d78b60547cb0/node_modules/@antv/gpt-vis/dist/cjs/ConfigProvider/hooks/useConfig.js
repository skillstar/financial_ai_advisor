var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/ConfigProvider/hooks/useConfig.ts
var useConfig_exports = {};
__export(useConfig_exports, {
  useComponentGlobalConfig: () => useComponentGlobalConfig,
  useGraphConfig: () => useGraphConfig,
  useMapConfig: () => useMapConfig,
  usePlotConfig: () => usePlotConfig
});
module.exports = __toCommonJS(useConfig_exports);
var import_react = __toESM(require("react"));
var import_config = require("../../utils/config");
var import_plot = require("../../utils/plot");
var import_context = require("../context");
function useConfig() {
  const context = import_react.default.useContext(import_context.ConfigContext);
  return context;
}
function useComponentGlobalConfig(name) {
  const globalConfig = useConfig();
  const { components = {} } = globalConfig;
  const config = components == null ? void 0 : components[name];
  return config;
}
function usePlotGlobalConfig(name) {
  const componentConfig = useComponentGlobalConfig(name);
  const { plot: plotConfig } = useConfig();
  const config = {
    ...plotConfig,
    ...componentConfig
  };
  return config;
}
function usePlotConfig(name, defaultConfig, props) {
  const globalConfig = usePlotGlobalConfig(name);
  const mergedProps = { ...globalConfig, ...props };
  const transformedProps = (0, import_plot.transform2ADCProps)(mergedProps);
  const _defaultConfig = typeof defaultConfig === "function" ? defaultConfig(transformedProps) : defaultConfig;
  const config = {
    ..._defaultConfig,
    ...transformedProps
  };
  return config;
}
function useMapGlobalConfig(name) {
  const componentConfig = useComponentGlobalConfig(name);
  const { map: mapConfig } = useConfig();
  const transformedProps = {
    mapType: mapConfig == null ? void 0 : mapConfig.style,
    token: mapConfig == null ? void 0 : mapConfig.token
  };
  const config = {
    ...transformedProps,
    ...componentConfig
  };
  return config;
}
function useMapConfig(name, props) {
  const globalConfig = useMapGlobalConfig(name);
  const mapConfig = {
    ...globalConfig,
    ...props
  };
  return mapConfig;
}
function useGraphGlobalConfig(name) {
  const { graph: graphConfig = {} } = useConfig();
  const componentConfig = useComponentGlobalConfig(name);
  return (0, import_config.mergeGraphOptions)(graphConfig, componentConfig || {});
}
function useGraphConfig(name, defaultConfig, props) {
  const globalConfig = useGraphGlobalConfig(name);
  return (0, import_config.mergeGraphOptions)(defaultConfig, globalConfig, props);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useComponentGlobalConfig,
  useGraphConfig,
  useMapConfig,
  usePlotConfig
});
