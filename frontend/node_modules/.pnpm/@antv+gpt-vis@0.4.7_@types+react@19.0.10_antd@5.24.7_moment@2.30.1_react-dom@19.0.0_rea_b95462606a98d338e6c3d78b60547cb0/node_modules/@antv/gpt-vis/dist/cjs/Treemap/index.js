var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/Treemap/index.tsx
var Treemap_exports = {};
__export(Treemap_exports, {
  default: () => Treemap_default
});
module.exports = __toCommonJS(Treemap_exports);
var import_plots = require("@ant-design/plots");
var import_react = __toESM(require("react"));
var import_hooks = require("../ConfigProvider/hooks");
var defaultConfig = (props) => {
  const { valueField = "value" } = props;
  return {
    legend: false,
    layout: {
      tile: "treemapBinary",
      paddingInner: 3
    },
    valueField,
    tooltip: {
      items: [
        (d) => {
          var _a;
          return {
            name: (_a = d.data) == null ? void 0 : _a.name,
            value: d[valueField]
          };
        }
      ]
    },
    style: { fillOpacity: 0.8, labelFontSize: 12 }
  };
};
var transform = (data) => {
  return {
    name: "root",
    children: data
  };
};
var Treemap = (props) => {
  const config = (0, import_hooks.usePlotConfig)("Treemap", defaultConfig, props);
  const { data, ...others } = config;
  const transformData = (0, import_react.useMemo)(() => transform(data), [data]);
  return /* @__PURE__ */ import_react.default.createElement(import_plots.Treemap, { ...others, data: transformData });
};
var Treemap_default = Treemap;
