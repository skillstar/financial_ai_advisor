import { uniqueId } from '@antv/util';
import EventEmitter from '@antv/event-emitter';
import { LayerGroupEvent } from './constants';
export class LayerGroup extends EventEmitter {
    constructor(layers = [], option = {}) {
        super();
        /**
         * 子图层
         */
        this.layerMap = new Map();
        this.name = option.name ? option.name : uniqueId('layerGroup');
        for (let index = 0; index < layers.length; index++) {
            const layer = layers[index];
            this.addLayer(layer);
        }
    }
    /**
     * 图层组添加到地图上
     */
    addTo(scene) {
        this.scene = scene;
        let layerIndex = 0;
        const layerLength = this.layerMap.size;
        for (const layer of this.layerMap.values()) {
            layer.once('inited', (e) => {
                layerIndex++;
                this.emit(LayerGroupEvent.INITED_LAYER, e);
                if (layerIndex === layerLength) {
                    this.emit(LayerGroupEvent.INITED_LAYERS);
                }
            });
            layer.addTo(scene);
        }
    }
    /**
     * 图层组从地图上移除
     */
    remove() {
        if (this.scene) {
            this.getLayers().forEach((layer) => layer.remove());
        }
    }
    /**
     * 图层组是否有该图层
     */
    hasLayer(layer) {
        const layerId = typeof layer === 'string' ? layer : this.getLayerId(layer);
        return this.layerMap.has(layerId);
    }
    /**
     * 添加图层
     */
    addLayer(layer) {
        const layerId = this.getLayerId(layer);
        this.layerMap.set(layerId, layer);
        if (this.scene) {
            layer.once('inited', (e) => this.emit(LayerGroupEvent.INITED_LAYER, e));
            layer.addTo(this.scene);
        }
    }
    /**
     * 添加多个图层
     */
    addLayers(layers) {
        layers.forEach((layer) => {
            this.addLayer(layer);
        });
    }
    /**
     * 根据图层 id 或图层实例移除 layer 图层
     */
    removeLayer(layer) {
        const layerId = typeof layer === 'string' ? layer : this.getLayerId(layer);
        const findLayer = this.layerMap.get(layerId);
        if (!findLayer)
            return false;
        this.layerMap.delete(layerId);
        if (this.scene) {
            findLayer.remove();
        }
        return true;
    }
    /**
     * 获取图层组所有的图层
     */
    getLayers() {
        return Array.from(this.layerMap.values());
    }
    /**
     * 根据图层 ID 获取图层
     */
    getLayer(id) {
        return this.layerMap.get(id);
    }
    /**
     * 根据图层 name 获取图层
     */
    getLayerByName(name) {
        return this.getLayers().find((itemLayer) => itemLayer.name === name);
    }
    /**
     * 移除所有的图层对象
     */
    removeAllLayer() {
        for (const layer of this.layerMap.values()) {
            if (this.scene) {
                layer.remove();
            }
        }
        this.layerMap.clear();
    }
    /**
     * 是否图层组为空
     */
    isEmpty() {
        return this.layerMap.size === 0;
    }
    /**
     * 设置图层组所有图层 zIndex
     */
    setZIndex(zIndex) {
        for (const layer of this.layerMap.values()) {
            layer.setIndex(zIndex);
        }
    }
    /**
     * 根据图层获取图层 ID
     */
    getLayerId(layer) {
        return layer.id;
    }
    /**
     * 摧毁图层组
     */
    destroy() {
        this.remove();
        this.off('*');
    }
}
//# sourceMappingURL=layer-group.js.map