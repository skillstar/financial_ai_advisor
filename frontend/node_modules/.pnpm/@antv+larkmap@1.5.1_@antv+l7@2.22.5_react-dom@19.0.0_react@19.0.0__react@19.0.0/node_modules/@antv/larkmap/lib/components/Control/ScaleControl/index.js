"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScaleControl = void 0;
var _l = require("@antv/l7");
var _lodash = require("lodash");
var _react = require("react");
var _utils = require("../../../utils");
var _hooks = require("../../LarkMap/hooks");
var _hooks2 = require("../hooks");
const ScaleControl = ({
  onShow,
  onHide,
  onAdd,
  onRemove,
  position,
  className,
  style,
  lockWidth,
  maxWidth,
  metric,
  imperial,
  updateWhenIdle
}) => {
  const scene = (0, _hooks.useScene)();
  const [control, setControl] = (0, _react.useState)();
  const styleText = (0, _react.useMemo)(() => (0, _utils.getStyleText)(style), [style]);
  const controlOptions = (0, _react.useMemo)(() => {
    return {
      position,
      className,
      style: styleText,
      lockWidth,
      maxWidth,
      metric,
      imperial,
      updateWhenIdle
    };
  }, [position, className, styleText, lockWidth, maxWidth, metric, imperial, updateWhenIdle]);
  (0, _react.useEffect)(() => {
    const scale = new _l.Scale((0, _lodash.omitBy)(controlOptions, value => value === undefined));
    setControl(scale);
    scene.addControl(scale);
    return () => {
      scene.removeControl(scale);
      setControl(undefined);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _hooks2.useL7ComponentUpdate)(control, controlOptions);
  (0, _hooks2.useL7ComponentEvent)(control, {
    add: onAdd,
    remove: onRemove,
    show: onShow,
    hide: onHide
  });
  return null;
};
exports.ScaleControl = ScaleControl;