function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["id", "style", "className", "map", "mapType", "mapOptions", "onLayerManagerCreated", "onSceneLoaded", "children"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { Scene } from '@antv/l7';
import { useDeepCompareEffect } from 'ahooks';
import classNames from 'classnames';
import { isNull, isNumber, isUndefined } from 'lodash-es';
import React, { forwardRef, memo, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';
import { LayerManager } from "../../utils";
import { createMap } from "./helper";
import { useSceneEvent } from "./hooks/use-scene-event";
export var LarkMapContext = /*#__PURE__*/React.createContext(null);
export var LarkMap = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function LarkMap(props, ref) {
  var id = props.id,
    style = props.style,
    className = props.className,
    map = props.map,
    _props$mapType = props.mapType,
    mapType = _props$mapType === void 0 ? 'Gaode' : _props$mapType,
    _props$mapOptions = props.mapOptions,
    mapOptions = _props$mapOptions === void 0 ? {} : _props$mapOptions,
    onLayerManagerCreated = props.onLayerManagerCreated,
    onSceneLoaded = props.onSceneLoaded,
    children = props.children,
    sceneConfig = _objectWithoutProperties(props, _excluded);
  var containerRef = useRef();
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    sceneInstance = _useState2[0],
    setSceneInstance = _useState2[1];
  var _useRef = useRef({
      scene: null,
      layerManager: null
    }),
    contextValue = _useRef.current;
  useEffect(function () {
    var scene;
    var isMounted = true;
    var callback = isUndefined(map) ? createMap(mapType, mapOptions) : typeof map === 'function' ? map() : map;
    Promise.resolve(callback).then(function (mapInstance) {
      if (!isMounted) {
        return;
      }
      scene = new Scene(_objectSpread(_objectSpread({}, sceneConfig), {}, {
        id: containerRef.current,
        map: mapInstance
      }));
      var layerManager = new LayerManager({
        scene: scene
      });
      contextValue.scene = scene;
      contextValue.layerManager = layerManager;
      scene.once('loaded', function () {
        if (onSceneLoaded) {
          onSceneLoaded(scene);
        }
        if (onLayerManagerCreated) {
          onLayerManagerCreated(layerManager);
        }
        setSceneInstance(scene);
      });
    }).catch(function (error) {
      console.error(error);
    });
    return function () {
      isMounted = false;
      if (scene) {
        contextValue.scene = null;
        contextValue.layerManager = null;
        scene.destroy();
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  useSceneEvent(sceneInstance, props);
  useImperativeHandle(ref, function () {
    return {
      getScene: function getScene() {
        return sceneInstance;
      },
      getMap: function getMap() {
        return sceneInstance.map;
      }
    };
  }, [sceneInstance]);

  // 更新地图样式
  useEffect(function () {
    if (sceneInstance && mapOptions.style) {
      sceneInstance.setMapStyle(mapOptions.style);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mapOptions.style]);

  // 更新地图层级或地图视野中心点
  useDeepCompareEffect(function () {
    if (isNull(sceneInstance)) return;
    if (mapOptions.center && isNumber(mapOptions.zoom)) {
      sceneInstance.setZoomAndCenter(mapOptions.zoom, mapOptions.center);
    } else if (isNumber(mapOptions.zoom)) {
      sceneInstance.setZoom(mapOptions.zoom);
    } else if (mapOptions.center) {
      sceneInstance.setCenter(mapOptions.center);
    }
  }, [mapOptions.zoom, mapOptions.center]);

  // 更新地图视野倾角
  useEffect(function () {
    if (sceneInstance && isNumber(mapOptions.pitch)) {
      sceneInstance.setPitch(mapOptions.pitch);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mapOptions.pitch]);

  // 更新地图旋转角度
  useEffect(function () {
    if (sceneInstance && isNumber(mapOptions.rotation)) {
      sceneInstance.setRotation(mapOptions.rotation);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [mapOptions.rotation]);
  var styles = useMemo(function () {
    return _objectSpread({
      position: 'relative'
    }, style);
  }, [style]);
  return /*#__PURE__*/React.createElement("div", {
    id: id,
    ref: containerRef,
    style: styles,
    className: classNames('larkmap', className)
  }, sceneInstance && /*#__PURE__*/React.createElement(LarkMapContext.Provider, {
    value: contextValue
  }, children));
}));