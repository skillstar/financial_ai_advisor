var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/Text/VisText.tsx
var VisText_exports = {};
__export(VisText_exports, {
  default: () => VisText_default
});
module.exports = __toCommonJS(VisText_exports);
var import_antd = require("antd");
var import_lodash = require("lodash");
var import_react = __toESM(require("react"));
var import_styled_components = __toESM(require("styled-components"));
var import_hooks = require("../ConfigProvider/hooks");
var import_config = require("./config");
var import_utils = require("./utils");
var { Text } = import_antd.Typography;
var StyledText = (0, import_styled_components.default)(Text)`
  margin-left: 1px;
  margin-right: 1px;
`;
function renderPrefixSuffix(symbol, staticsConfig, props) {
  if (!symbol)
    return null;
  const Component = staticsConfig == null ? void 0 : staticsConfig[symbol];
  if (Component)
    return /* @__PURE__ */ import_react.default.createElement(Component, { ...props });
  return symbol;
}
var VisText = (props) => {
  const { children, className, style, type, origin } = props;
  const isDark = (0, import_utils.useAntdDarkAlgorithm)();
  const textConfig = (0, import_hooks.useComponentGlobalConfig)("VisText");
  const encoding = type ? textConfig == null ? void 0 : textConfig[type] : {};
  const staticsConfig = textConfig == null ? void 0 : textConfig[import_config.STATICS_KEY];
  return (
    // TODO  @羽熙 暂时简单处理 tooltip 直接显示 origin，后续可以根据 origin 类型分类处理
    /* @__PURE__ */ import_react.default.createElement(import_antd.Tooltip, { title: (0, import_lodash.toString)(origin) }, /* @__PURE__ */ import_react.default.createElement(
      StyledText,
      {
        className,
        style: {
          // antd Text 组件写死了 14px，在段落定义了 font-size 的情况下，显示很突兀，这里不设置，跟随上级容器字体大小改变。
          // TODO @羽熙 之后看能否通过 antd ConfigProvider 统一配置
          fontSize: "unset",
          color: (0, import_utils.getThemeColor)({ type, color: encoding == null ? void 0 : encoding.color, theme: isDark ? "dark" : "light" }),
          ...style,
          ...(0, import_lodash.pick)(encoding, ["backgroundColor", "fontWeight"])
        }
      },
      renderPrefixSuffix(encoding == null ? void 0 : encoding.prefix, staticsConfig, props),
      children,
      renderPrefixSuffix(encoding == null ? void 0 : encoding.suffix, staticsConfig, props)
    ))
  );
};
var VisText_default = VisText;
