import { useUnmount } from 'ahooks';
import { useEffect, useMemo, useRef } from 'react';
import { LayerEventMap } from "./constant";
export var useLayerEvent = function useLayerEvent(layer, props) {
  var layerEventMap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : LayerEventMap;
  // LarkMap 事件名列表
  var layerEventList = useMemo(function () {
    return Object.keys(layerEventMap);
  }, [layerEventMap]);

  // 绑定或解绑所有事件的回调函数
  var handleLayerEvents = function handleLayerEvents(type) {
    layerEventList.forEach(function (callbackName) {
      var eventName = layerEventMap[callbackName];
      var callback = props[callbackName];
      if (callbackName && callback) {
        layer[type](eventName, callback);
      }
    });
  };
  var bindLayerEvents = function bindLayerEvents() {
    return handleLayerEvents('on');
  };
  var unbindLayerEvents = function unbindLayerEvents() {
    return handleLayerEvents('off');
  };
  var isFirstRef = useRef(true);

  // 保证图层初始化后同步执行事件绑定，而不是在 useEffect 中异步绑定事件
  if (isFirstRef.current) {
    bindLayerEvents();
  }
  useEffect(function () {
    if (isFirstRef.current) {
      isFirstRef.current = false;
    } else {
      bindLayerEvents();
    }
    return function () {
      unbindLayerEvents();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, layerEventList.map(function (eventName) {
    return props[eventName];
  }));
  useUnmount(function () {
    unbindLayerEvents();
  });
};