function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { useTrackedEffect, useUnmount } from 'ahooks';
import { SceneEventList, SceneEventMap } from "./constant";
export var useSceneEvent = function useSceneEvent(scene, props) {
  useTrackedEffect(function (changeIndexList, previousDeps, currentDeps) {
    if (!scene) {
      return;
    }
    // 需要更新的事件对应到 deps 的数组下标，但是不包含 scene 实例的更新
    var eventIndexList = changeIndexList.filter(function (index) {
      return !!index;
    }).map(function (index) {
      return index - 1;
    });

    // 如果本次变化为 scene 的实例化则无差别遍历所有事件类型
    if (changeIndexList.includes(0)) {
      eventIndexList = SceneEventList.map(function (_, index) {
        return index;
      });
    }
    eventIndexList.forEach(function (index) {
      var eventName = SceneEventMap[SceneEventList[index]];
      var previousCallback = previousDeps[index + 1];
      var currentCallback = currentDeps[index + 1];
      // 分别注销旧的事件回调并绑定新的事件
      if (previousCallback) {
        scene.off(eventName, previousCallback);
      }
      if (currentCallback) {
        scene.on(eventName, currentCallback);
      }
    });
  }, [scene].concat(_toConsumableArray(SceneEventList.map(function (eventName) {
    return props[eventName];
  }))));
  useUnmount(function () {
    if (!scene) {
      return;
    }
    SceneEventList.forEach(function (key) {
      var eventName = SceneEventMap[key];
      var callback = props[key];
      if (eventName && callback) {
        scene.off(eventName, callback);
      }
    });
  });
};