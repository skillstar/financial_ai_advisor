"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDraw = void 0;
var _l7Draw = require("@antv/l7-draw");
var _lodash = require("lodash");
var _react = require("react");
var _hooks = require("../../LarkMap/hooks");
var _constant = require("./constant");
const useDraw = params => {
  const scene = (0, _hooks.useScene)();
  // @ts-ignore
  const [drawData, setDrawData] = (0, _react.useState)(() => (0, _lodash.cloneDeep)(params?.options?.initialData) ?? []);
  const draw = (0, _react.useMemo)(() => {
    if (!scene) {
      console.error('useDraw 只能使用在 LarkMap 容器中');
      return null;
    }
    const DrawClass = _constant.DRAW_TYPE_MAP[params.type];
    const newDraw = new DrawClass(scene, {
      ...params.options,
      initialData: (0, _lodash.cloneDeep)(drawData)
    });
    return newDraw;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [scene, JSON.stringify((0, _lodash.omit)(params.options, 'initialData')), params.type]);

  // 当前是否在启用中
  const [isEnable, setIsEnable] = (0, _react.useState)(draw.isEnable());
  (0, _react.useEffect)(() => {
    const onEnable = () => setIsEnable(true);
    const onDisable = () => setIsEnable(false);
    const onChange = newData => {
      setDrawData(newData);
    };
    draw?.setData(drawData);
    draw?.on(_l7Draw.DrawEvent.Enable, onEnable);
    draw?.on(_l7Draw.DrawEvent.Disable, onDisable);
    draw?.on(_l7Draw.DrawEvent.Change, onChange);
    return () => {
      // @ts-ignore
      setDrawData(draw.getData());
      draw?.off(_l7Draw.DrawEvent.Enable, onEnable);
      draw?.off(_l7Draw.DrawEvent.Disable, onDisable);
      draw?.off(_l7Draw.DrawEvent.Change, onChange);
      draw?.destroy();
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [draw]);
  const syncDrawData = (0, _react.useCallback)(newData => {
    draw?.setData(newData);
    setDrawData(newData);
  }, [draw]);
  const drawFunctions = (0, _react.useMemo)(() => {
    return {
      enable: draw?.enable.bind(draw),
      disable: draw?.disable.bind(draw),
      getDrawData: draw?.getData.bind(draw)
    };
  }, [draw]);
  return {
    drawType: params.type,
    draw,
    drawData,
    setDrawData: syncDrawData,
    isEnable,
    ...drawFunctions
  };
};
exports.useDraw = useDraw;