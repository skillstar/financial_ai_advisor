var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/GPTVis/Lite.tsx
var Lite_exports = {};
__export(Lite_exports, {
  default: () => Lite_default,
  useEventPublish: () => import_useEvent.useEventPublish
});
module.exports = __toCommonJS(Lite_exports);
var import_event_emitter = __toESM(require("@antv/event-emitter"));
var import_react = __toESM(require("react"));
var import_react_markdown = __toESM(require("react-markdown"));
var import_rehype_raw = __toESM(require("rehype-raw"));
var import_remark_gfm = __toESM(require("remark-gfm"));
var import_useContext = require("./hooks/useContext");
var import_useEvent = require("./hooks/useEvent");
var GPTVisLite = ({
  children,
  components,
  rehypePlugins,
  remarkPlugins,
  eventSubs,
  ...rest
}) => {
  const eventBus = (0, import_react.useMemo)(() => new import_event_emitter.default(), []);
  const contextValue = (0, import_react.useMemo)(() => ({ eventBus }), [eventBus]);
  (0, import_react.useEffect)(() => {
    if (eventSubs) {
      const events = Object.keys(eventSubs);
      for (const eventName of events) {
        eventBus.on(eventName, eventSubs[eventName]);
      }
      return () => {
        for (const eventName of events) {
          eventBus.off(eventName, eventSubs[eventName]);
        }
      };
    }
  }, [eventBus, eventSubs]);
  return /* @__PURE__ */ import_react.default.createElement(import_useContext.GPTVisContext.Provider, { value: contextValue }, /* @__PURE__ */ import_react.default.createElement(
    import_react_markdown.default,
    {
      components,
      rehypePlugins: [import_rehype_raw.default, ...rehypePlugins ? rehypePlugins : []],
      remarkPlugins: [import_remark_gfm.default, ...remarkPlugins ? remarkPlugins : []],
      ...rest
    },
    children
  ));
};
var Lite_default = (0, import_react.memo)(GPTVisLite);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useEventPublish
});
