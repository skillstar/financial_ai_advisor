import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
var _excluded = ["type"];
import React, { memo, useRef, useState } from 'react';
import styled, { createGlobalStyle } from 'styled-components';
import Loading from "./Loading";
var StyledGPTVis = styled.div.withConfig({
  displayName: "StyledGPTVis",
  componentId: "gpt-vis-c7ef__sc-1f5p953-0"
})(["min-width:300px;height:300px;max-width:100%;"]);
var GlobalStyles = createGlobalStyle(["pre:has(.gpt-vis){overflow:hidden;}"]);
export var RenderVisChart = /*#__PURE__*/memo(function (_ref) {
  var style = _ref.style,
    content = _ref.content,
    components = _ref.components,
    debug = _ref.debug,
    loadingTimeout = _ref.loadingTimeout;
  var timeoutRef = useRef();
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    loading = _useState2[0],
    setLoading = _useState2[1];
  var chartJson;
  try {
    chartJson = JSON.parse(content);
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  } catch (e) {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      if (debug) {
        console.warn('GPT-Vis withChartCode parse content timeout');
      }
    }
    timeoutRef.current = setTimeout(function () {
      setLoading(false);
    }, loadingTimeout);
    if (loading) {
      return /*#__PURE__*/React.createElement(StyledGPTVis, {
        className: "gpt-vis",
        style: style
      }, /*#__PURE__*/React.createElement(Loading, null));
    }
    return /*#__PURE__*/React.createElement("p", null, "Chart generation timeout.");
  }
  var _chartJson = chartJson,
    type = _chartJson.type,
    chartProps = _objectWithoutProperties(_chartJson, _excluded);
  var ChartComponent = components[type];

  // debug mode print chartJson
  if (debug) {
    console.log('GPT-Vis withChartCode get chartJson parse from vis-chart code block', chartJson);
  }

  // If the chart type is not supported, display an error message
  if (!ChartComponent) {
    return /*#__PURE__*/React.createElement("p", null, "Chart type \"".concat(type, "\" is not supported."));
  }

  // Render the supported chart component with data
  return /*#__PURE__*/React.createElement(StyledGPTVis, {
    className: "gpt-vis",
    style: style
  }, /*#__PURE__*/React.createElement(GlobalStyles, null), /*#__PURE__*/React.createElement(ChartComponent, chartProps));
});