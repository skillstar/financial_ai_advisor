"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PointDrawer = void 0;
var _constant = require("../constant");
var _mode = require("../mode");
var _utils = require("../utils");
var _helper = require("../constant/helper");
var _lodash = require("lodash");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var PointDrawer = exports.PointDrawer = /*#__PURE__*/function (_PointMode) {
  function PointDrawer(scene, options) {
    var _this;
    _classCallCheck(this, PointDrawer);
    _this = _callSuper(this, PointDrawer, [scene, options]);
    _this.bindPointRenderEvent();
    return _this;
  }
  _inherits(PointDrawer, _PointMode);
  return _createClass(PointDrawer, [{
    key: "dragItem",
    get: function get() {
      return this.dragPoint;
    }
  }, {
    key: "editItem",
    get: function get() {
      return this.editPoint;
    }
  }, {
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      var defaultOptions = _objectSpread(_objectSpread({}, this.getCommonOptions(options)), {}, {
        helper: (0, _lodash.cloneDeep)(_helper.DEFAULT_POINT_HELPER_CONFIG),
        initialData: options.initialData
      });
      defaultOptions.style.point = _constant.DEFAULT_POINT_STYLE;
      return defaultOptions;
    }
  }, {
    key: "bindEnableEvent",
    value: function bindEnableEvent() {
      _get(_getPrototypeOf(PointDrawer.prototype), "bindEnableEvent", this).call(this);
      this.enablePointRenderAction();
    }
  }, {
    key: "unbindEnableEvent",
    value: function unbindEnableEvent() {
      _get(_getPrototypeOf(PointDrawer.prototype), "unbindEnableEvent", this).call(this);
      this.disablePointRenderAction();
    }
  }, {
    key: "getRenderTypes",
    value: function getRenderTypes() {
      return ['point'];
    }
  }, {
    key: "getMainLayer",
    value: function getMainLayer() {
      var _this$render$point$ge, _this$render$point;
      return (_this$render$point$ge = (_this$render$point = this.render.point) === null || _this$render$point === void 0 ? void 0 : _this$render$point.getLayers()) !== null && _this$render$point$ge !== void 0 ? _this$render$point$ge : [];
    }
  }, {
    key: "setData",
    value: function setData(points) {
      this.setPointData((0, _utils.splitMultiFeatures)(points).map(function (point) {
        point.properties = _objectSpread(_objectSpread({}, (0, _utils.getDefaultPointProperties)()), point.properties);
        return point;
      }));
    }
  }, {
    key: "getData",
    value: function getData() {
      var getOriginData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var points = this.getPointData();
      if (getOriginData) {
        return points;
      }
      return (0, _utils.joinMultiFeatures)(points);
    }
  }, {
    key: "onPointCreate",
    value: function onPointCreate(e) {
      if (!this.addable) {
        this.setPointData(function (features) {
          return features.map(function (feature) {
            feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
              isHover: false,
              isActive: false
            });
            return feature;
          });
        });
        return;
      }
      var newFeature = _get(_getPrototypeOf(PointDrawer.prototype), "onPointCreate", this).call(this, e);
      if (!newFeature) {
        return;
      }
      if (this.options.editable) {
        this.setHelper('pointHover');
      }
      this.emit(_constant.DrawEvent.Add, newFeature, this.getData());
      return newFeature;
    }
  }, {
    key: "onPointMouseMove",
    value: function onPointMouseMove(e) {
      var feature = _get(_getPrototypeOf(PointDrawer.prototype), "onPointMouseMove", this).call(this, e);
      if (this.options.editable && !this.dragPoint) {
        this.setHelper('pointHover');
      }
      return feature;
    }
  }, {
    key: "onPointMouseOut",
    value: function onPointMouseOut(e) {
      var feature = _get(_getPrototypeOf(PointDrawer.prototype), "onPointMouseOut", this).call(this, e);
      this.setHelper(this.addable ? 'draw' : null);
      return feature;
    }
  }, {
    key: "onPointDragStart",
    value: function onPointDragStart(e) {
      var dragPoint = _get(_getPrototypeOf(PointDrawer.prototype), "onPointDragStart", this).call(this, e);
      this.setHelper('pointDrag');
      this.emit(_constant.DrawEvent.DragStart, dragPoint, this.getData());
      return dragPoint;
    }
  }, {
    key: "onPointDragging",
    value: function onPointDragging(e) {
      var dragPoint = _get(_getPrototypeOf(PointDrawer.prototype), "onPointDragging", this).call(this, e);
      if (dragPoint && this.options.editable) {
        this.emit(_constant.DrawEvent.Dragging, dragPoint, this.getData());
      }
      return dragPoint;
    }
  }, {
    key: "onPointDragEnd",
    value: function onPointDragEnd(e) {
      var dragPoint = _get(_getPrototypeOf(PointDrawer.prototype), "onPointDragEnd", this).call(this, e);
      if (dragPoint && this.options.editable) {
        this.setHelper('pointHover');
        this.emit(_constant.DrawEvent.DragEnd, dragPoint, this.getData());
        this.emit(_constant.DrawEvent.Edit, dragPoint, this.getData());
      }
      return dragPoint;
    }
  }, {
    key: "bindThis",
    value: function bindThis() {
      _get(_getPrototypeOf(PointDrawer.prototype), "bindThis", this).call(this);
      this.bindPointRenderEvent = this.bindPointRenderEvent.bind(this);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  }, {
    key: "onSceneMouseMove",
    value: function onSceneMouseMove(e) {}
  }, {
    key: "setActiveFeature",
    value: function setActiveFeature(target) {
      var targetFeature = this.getTargetFeature(target);
      this.setPointData(function (oldData) {
        return oldData.map(function (feature) {
          feature.properties.isActive = (0, _utils.isSameFeature)(targetFeature, feature);
          return feature;
        });
      });
    }
  }, {
    key: "resetFeatures",
    value: function resetFeatures() {
      this.setPointData(function (features) {
        return features.map(function (feature) {
          feature.properties = _objectSpread(_objectSpread({}, feature.properties), {}, {
            isDrag: false,
            isActive: false,
            isHover: false
          });
          return feature;
        });
      });
    }
  }]);
}(_mode.PointMode);