import { __rest } from "tslib";
import { clone, isEqual, isUndefined, omit } from '@antv/util';
import { PointLayer } from '../../core-layers/point-layer';
import { TextLayer } from '../../core-layers/text-layer';
import { CompositeLayer } from '../../core/composite-layer';
import { CompositeLayerEvent } from '../../core/constants';
import { BlendType } from '../../types';
import { EMPTY_JSON_SOURCE } from '../common/constants';
import { getLabelLayerOptions } from '../common/label-layer';
import { isGestureMultiSelect } from '../common/multi-select';
import { getDefaultState } from './adaptor';
import { DEFAULT_OPTIONS, DEFAULT_STATE } from './constants';
export class IconLayer extends CompositeLayer {
    /**
     * 主图层
     */
    get layer() {
        return this.iconLayer;
    }
    /**
     * 图标图层
     */
    get iconLayer() {
        return this.subLayers.getLayer('iconLayer');
    }
    /**
     * 标注文本图层
     */
    get iconLabelLayer() {
        return this.subLayers.getLayer('labelLayer');
    }
    /**
     * 选中填充面图层
     */
    get selectIconLayer() {
        return this.subLayers.getLayer('selectIconLayer');
    }
    constructor(options) {
        super(options);
        /**
         * 图层交互状态配置
         */
        this.layerState = DEFAULT_STATE;
        /**
         * 复合图层类型
         */
        this.type = CompositeLayer.LayerType.IconImageLayer;
        /**
         * 选中数据
         */
        this.selectData = [];
        /**
         * 图层选中回调
         */
        this.onSelectHandle = (event) => {
            const { feature, featureId } = event;
            this.handleSelectData(featureId, feature);
        };
        this.initSubLayersEvent();
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return IconLayer.DefaultOptions;
    }
    /**
     * 添加到场景
     */
    addTo(scene) {
        this.scene = scene;
        this.initAssets();
        this.subLayers.addTo(scene);
        this.emit(CompositeLayerEvent.ADD);
    }
    /**
     * 获取图标图层配置项
     */
    getIconLayerOptions() {
        var _a;
        const _b = omit(this.options, ['source']), { visible, minZoom, maxZoom, zIndex = 0, radius, opacity, icon, fillColor, iconStyle } = _b, baseConfig = __rest(_b, ["visible", "minZoom", "maxZoom", "zIndex", "radius", "opacity", "icon", "fillColor", "iconStyle"]);
        const fillState = {
            active: (_a = this.options.state) === null || _a === void 0 ? void 0 : _a.active,
            select: false, // 主图层默认关闭 select
        };
        const fillStyle = Object.assign({ opacity: opacity }, iconStyle);
        const options = Object.assign(Object.assign({}, baseConfig), { visible,
            minZoom,
            maxZoom,
            zIndex, shape: icon, size: radius, state: fillState, color: fillColor, style: fillStyle });
        return options;
    }
    getHighLightLayerOptions() {
        var _a;
        const { visible, minZoom, maxZoom, zIndex = 0, icon } = this.options;
        const selectState = (_a = this.layerState) === null || _a === void 0 ? void 0 : _a.select;
        const { radius = 5, opacity = 1 } = selectState;
        const fillStyle = { opacity: opacity };
        const option = {
            visible: visible,
            blend: BlendType.normal,
            zIndex: zIndex + 0.1,
            minZoom,
            maxZoom,
            source: EMPTY_JSON_SOURCE,
            size: radius,
            style: fillStyle,
            shape: (selectState === null || selectState === void 0 ? void 0 : selectState.icon) || icon,
            state: { select: false, active: false },
        };
        return option;
    }
    handleSelectData(featureId, feature, isSelfMultiSelect) {
        const { enabledMultiSelect, triggerMultiSelectKey } = this.options;
        const isMultiSelect = isGestureMultiSelect(enabledMultiSelect, triggerMultiSelectKey) || isSelfMultiSelect;
        let selectData = clone(this.selectData);
        const index = selectData.findIndex((item) => item.featureId === featureId);
        if (index === -1) {
            if (isMultiSelect) {
                selectData.push({ feature, featureId });
            }
            else {
                selectData = [{ feature, featureId }];
            }
            this.emit('select', feature, clone(selectData));
        }
        else {
            const unselectFeature = selectData[index];
            if (isMultiSelect) {
                selectData.splice(index, 1);
            }
            else {
                selectData = [];
            }
            this.emit('unselect', unselectFeature, clone(selectData));
        }
        this.setSelectLayerSource(selectData);
    }
    createSubLayers() {
        const source = this.source;
        this.layerState = getDefaultState(this.options.state);
        // 映射图标图层
        const iconLayer = new PointLayer(Object.assign(Object.assign({}, this.getIconLayerOptions()), { id: 'iconLayer', source, interaction: true }));
        // 选中效果
        const selectLayer = new PointLayer(Object.assign({ id: 'selectIconLayer' }, this.getHighLightLayerOptions()));
        // 文本标注
        const labelLayer = new TextLayer(Object.assign(Object.assign({}, getLabelLayerOptions(this.options)), { id: 'labelLayer', source }));
        const subLayers = [iconLayer, labelLayer, selectLayer];
        return subLayers;
    }
    updateSubLayers(options) {
        this.iconLayer.update(this.getIconLayerOptions(), false);
        this.iconLabelLayer.update(getLabelLayerOptions(this.options), false);
    }
    /**
     * 设置选中描边与填充子图层数据
     */
    setSelectLayerSource(selectData = []) {
        if (this.selectData.length === selectData.length &&
            isEqual(this.selectData.map(({ featureId }) => featureId), selectData.map(({ featureId }) => featureId))) {
            return;
        }
        const features = selectData.map(({ feature }) => feature);
        const parser = this.source.parser;
        const data = parser.type === 'geojson' ? { type: 'FeatureCollection', features } : features;
        this.selectIconLayer.changeData({ data, parser });
        this.selectData = selectData;
    }
    /**
     * 设置子图层数据
     */
    setSubLayersSource(source) {
        if (this.isSourceInstance(source)) {
            this.source = source;
            this.iconLayer.setSource(source);
            this.iconLabelLayer.setSource(source);
        }
        else {
            const { data } = source, option = __rest(source, ["data"]);
            this.source.setData(data, option);
        }
        this.selectIconLayer.changeData(EMPTY_JSON_SOURCE);
    }
    initSubLayersEvent() {
        this.iconLayer.off('click', this.onSelectHandle);
        this.selectData = [];
        if (!this.options.state)
            return;
        // active
        // select
        if (this.options.state.select) {
            this.iconLayer.on('click', this.onSelectHandle);
        }
    }
    /**
     * 更新: 更新配置
     */
    updateOption(options) {
        super.updateOption(options);
        this.layerState = getDefaultState(this.options.state);
    }
    setIndex(zIndex) {
        this.iconLayer.setIndex(zIndex);
        this.iconLabelLayer.setIndex(zIndex);
        this.selectIconLayer.setIndex(zIndex + 0.1);
    }
    /**
     * 设置图层高亮状态
     */
    setActive(field, value) {
        const source = this.iconLayer.source;
        const featureId = source.getFeatureId(field, value);
        if (isUndefined(featureId)) {
            console.warn(`Feature non-existent by field: ${field},value: ${value}`);
            return;
        }
        this.iconLayer.layer.setActive(featureId);
    }
    /**
     * 更新
     */
    update(options) {
        super.update(options);
        this.initSubLayersEvent();
    }
    /**
     * 设置图层选中状态
     */
    setSelect(field, value) {
        var _a, _b;
        const source = this.iconLayer.source;
        const featureId = source.getFeatureId(field, value);
        if (isUndefined(featureId)) {
            console.warn(`Feature non-existent by field: ${field},value: ${value}`);
            return;
        }
        if (((_a = this.layerState) === null || _a === void 0 ? void 0 : _a.select) && ((_b = this.layerState) === null || _b === void 0 ? void 0 : _b.select).enable !== false) {
            return;
        }
        const feature = source.getFeatureById(featureId);
        const { enabledMultiSelect } = this.options;
        this.handleSelectData(featureId, feature, enabledMultiSelect);
        // TODO: L7 method pickFeature(id|{x,y})
    }
    /**
     * 图层框选数据
     */
    boxSelect(bounds, callback) {
        this.iconLayer.boxSelect(bounds, callback);
    }
}
/**
 * 默认配置项
 */
IconLayer.DefaultOptions = DEFAULT_OPTIONS;
//# sourceMappingURL=icon.js.map