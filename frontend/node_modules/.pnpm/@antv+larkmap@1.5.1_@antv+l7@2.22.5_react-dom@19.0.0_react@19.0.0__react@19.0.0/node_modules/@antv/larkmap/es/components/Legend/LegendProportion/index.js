function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import classnames from 'classnames';
import { isNaN, isNumber, uniqueId } from 'lodash-es';
import React from 'react';
import "./index.css";
export var CLS_PREFIX = 'larkmap-legend-proportion';
export var LegendProportion = function LegendProportion(props) {
  var labels = props.labels,
    _props$fillColor = props.fillColor,
    fillColor = _props$fillColor === void 0 ? '#f9f9f9' : _props$fillColor,
    cls = props.className,
    style = props.style;
  var _labels = _slicedToArray(labels, 2),
    min = _labels[0],
    max = _labels[1];
  var circleSizes = [86, 62, 38, 24];
  /**
   * 计算跨度
   * @param min 最小值
   * @param max 最大值
   * @returns
   */
  function calculateSteps(newMin, newMax) {
    var gap = (newMax - newMin) / 4;
    var step1 = Math.floor(newMin + gap);
    var step2 = Math.floor(newMax - gap);
    return [step1, step2];
  }

  /**
   * 生成label范围
   * @returns
   */
  function generateRange() {
    var newMin = min,
      newMax = max;
    if (!isNumber(newMin) || !isNumber(newMin)) {
      newMin = newMax = 0;
    }
    if (isNaN(newMin)) {
      newMin = 0;
    }
    if (isNaN(newMax)) {
      newMax = 0;
    }
    var steps = calculateSteps(newMin, newMax);
    var range = [{
      prefix: 'MIN:',
      val: newMin
    }].concat(_toConsumableArray(steps), [{
      prefix: 'MAX:',
      val: newMax
    }]);
    return range;
  }
  function CircleBox() {
    return /*#__PURE__*/React.createElement("div", {
      className: "".concat(CLS_PREFIX, "__circlebox"),
      style: {
        width: circleSizes[0]
      }
    }, circleSizes.map(function (item) {
      return /*#__PURE__*/React.createElement("div", {
        key: item,
        style: {
          width: item,
          height: item,
          background: fillColor
        },
        className: "".concat(CLS_PREFIX, "__circlebox__item")
      });
    }));
  }
  function LabelBox() {
    return /*#__PURE__*/React.createElement("div", {
      style: {
        height: circleSizes[0]
      }
    }, generateRange().reverse().map(function (item) {
      return /*#__PURE__*/React.createElement("div", {
        key: uniqueId(),
        className: "".concat(CLS_PREFIX, "__labelitem")
      }, item === null || item === void 0 ? void 0 : item.prefix, typeof item === 'number' ? item : item.val);
    }));
  }
  return /*#__PURE__*/React.createElement("div", {
    className: classnames("".concat(CLS_PREFIX), cls),
    style: style
  }, /*#__PURE__*/React.createElement(CircleBox, null), /*#__PURE__*/React.createElement(LabelBox, null));
};