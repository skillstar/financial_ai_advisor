/**
 * Adjust graph configuration based on data characteristics.
 * @param data - graph data
 * @returns graph options
 */
export function getGraphOptionsByData(data) {
  if (isLinearStructure(data)) return {
    node: {
      style: {
        ports: [{
          placement: 'right'
        }, {
          placement: 'left'
        }, {
          placement: 'top'
        }, {
          placement: 'bottom'
        }]
      }
    },
    layout: {
      type: 'snake',
      cols: 3,
      rowGap: 40
    }
  };
  return {};
}
function isLinearStructure(data) {
  var _data$nodes = data.nodes,
    nodes = _data$nodes === void 0 ? [] : _data$nodes,
    _data$edges = data.edges,
    edges = _data$edges === void 0 ? [] : _data$edges;
  var inDegree = {};
  var outDegree = {};
  var adjList = {};
  nodes.forEach(function (node) {
    inDegree[node.id] = 0;
    outDegree[node.id] = 0;
    adjList[node.id] = [];
  });
  edges.forEach(function (edge) {
    inDegree[edge.target]++;
    outDegree[edge.source]++;
    adjList[edge.source].push(edge.target);
  });

  // 检查图是否连通
  // Check if the graph is connected
  var visited = new Set();
  var dfs = function dfs(nodeId) {
    if (visited.has(nodeId)) return;
    visited.add(nodeId);
    adjList[nodeId].forEach(dfs);
  };
  dfs(nodes[0].id);
  if (visited.size !== nodes.length) return false;

  // 检查是否有且仅有一个源节点和一个汇节点
  // Check if there is exactly one source node and one sink node
  var sourceNodes = nodes.filter(function (node) {
    return inDegree[node.id] === 0;
  });
  var sinkNodes = nodes.filter(function (node) {
    return outDegree[node.id] === 0;
  });
  if (sourceNodes.length !== 1 || sinkNodes.length !== 1) return false;

  // 检查中间节点是否只有一个前驱和一个后继
  // Check if the middle nodes have only one predecessor and one successor
  var middleNodes = nodes.filter(function (node) {
    return inDegree[node.id] === 1 && outDegree[node.id] === 1;
  });
  if (middleNodes.length !== nodes.length - 2) return false;
  return true;
}