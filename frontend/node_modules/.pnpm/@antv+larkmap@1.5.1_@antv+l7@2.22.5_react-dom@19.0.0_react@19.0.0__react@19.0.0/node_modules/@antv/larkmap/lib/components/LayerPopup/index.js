"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerPopup = void 0;
var _l = require("@antv/l7");
var _lodash = require("lodash");
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../utils");
var _hooks = require("../Control/hooks");
var _hooks2 = require("../LarkMap/hooks");
var _utils2 = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const LayerPopup = ({
  style,
  closeButton,
  closeButtonOffsets,
  closeOnClick,
  closeOnEsc,
  maxWidth,
  anchor,
  offsets,
  stopPropagation,
  autoPan,
  autoClose,
  className,
  lngLat,
  items,
  trigger,
  onOpen,
  onClose,
  onShow,
  onHide
}) => {
  const scene = (0, _hooks2.useScene)();
  const [popup, setPopup] = (0, _react.useState)();
  const styleText = (0, _react.useMemo)(() => (0, _utils.getStyleText)(style), [style]);
  const fullLayerList = (0, _hooks2.useLayerList)();
  const layerPopupItems = (0, _react.useMemo)(() => {
    const result = [];
    items.forEach(item => {
      let originLayer;
      // 若 layer 为字符串格式，统一从 LarkMap 的 LayerManger 中获取 layer 实例
      if (typeof item.layer === 'string') {
        const targetLayer = fullLayerList.find(layer => layer.id === item.layer);
        if (targetLayer) {
          originLayer = targetLayer;
        } else {
          // 在传 Layer id 的情况下，如果未找到目标图层实例则直接跳过当前配置项
          return;
        }
      } else {
        originLayer = item.layer;
      }
      const layers = [];
      if (originLayer.isComposite) {
        // 若 originLayer 为交互图层，
        // @ts-ignore
        layers.push(...originLayer.getInteractionSubLayers());
      } else {
        // @ts-ignore
        layers.push(originLayer);
      }
      layers.forEach(layer => {
        const newItem = {
          layer
        };
        if (item.title) {
          newItem.title = (0, _utils2.getElementTypePortal)(item.title, 'div');
        }
        if (item.customContent) {
          newItem.customContent = (0, _utils2.getElementTypePortal)(item.customContent, 'div');
        }
        if (item.fields?.length) {
          newItem.fields = item.fields.map(field => {
            if (typeof field === 'string') {
              return field;
            } else {
              const newField = {
                field: field.field,
                getValue: field.getValue
              };
              if (field.formatField) {
                newField.formatField = (0, _utils2.getElementTypePortal)(field.formatField, 'span');
              }
              if (field.formatValue) {
                newField.formatValue = (0, _utils2.getElementTypePortal)(field.formatValue, 'span');
              }
              return newField;
            }
          });
        }
        result.push(newItem);
      });
    });
    return result;
  }, [fullLayerList, items]);
  const layerPopupOptions = (0, _react.useMemo)(() => ({
    style: styleText,
    closeButton,
    closeButtonOffsets,
    closeOnClick,
    closeOnEsc,
    maxWidth,
    anchor,
    offsets,
    stopPropagation,
    autoPan,
    autoClose,
    followCursor: trigger === 'hover',
    className,
    lngLat,
    items: layerPopupItems,
    trigger
  }), [styleText, closeButton,
  // eslint-disable-next-line react-hooks/exhaustive-deps
  JSON.stringify(closeButtonOffsets), closeOnClick, closeOnEsc, maxWidth, anchor,
  // eslint-disable-next-line react-hooks/exhaustive-deps
  JSON.stringify(offsets), stopPropagation, autoPan, autoClose, className, trigger,
  // eslint-disable-next-line react-hooks/exhaustive-deps
  JSON.stringify(lngLat), layerPopupItems]);
  (0, _react.useEffect)(() => {
    const newPopup = new _l.LayerPopup((0, _lodash.omitBy)(layerPopupOptions, value => value === undefined));
    setPopup(newPopup);
    scene.addPopup(newPopup);
    return () => {
      scene.removePopup(newPopup);
      setPopup(undefined);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _hooks.useL7ComponentUpdate)(popup, layerPopupOptions);
  (0, _hooks.useL7ComponentEvent)(popup, {
    open: onOpen,
    close: onClose,
    show: onShow,
    hide: onHide
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);
};
exports.LayerPopup = LayerPopup;