"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Source = void 0;
var _eventemitter = _interopRequireDefault(require("eventemitter3"));
var _lodash = require("lodash");
var _constant = require("../constant");
var _history = require("./history");
var _utils = require("../utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var Source = exports.Source = /*#__PURE__*/function (_EventEmitter) {
  function Source(_ref) {
    var _this;
    var data = _ref.data,
      render = _ref.render,
      historyConfig = _ref.history,
      scene = _ref.scene,
      bbox = _ref.bbox;
    _classCallCheck(this, Source);
    _this = _callSuper(this, Source);
    _this.scene = void 0;
    /**
     * 用于存储渲染器render映射
     * @protected
     */
    _this.render = void 0;
    /**
     * 用于存储当前最新数据
     * @protected
     */
    _this.data = (0, _lodash.cloneDeep)(_constant.DEFAULT_SOURCE_DATA);
    /**
     * 存储当前延迟更新函数的timeout
     * @protected
     */
    _this.timeout = null;
    /**
     * 用于需要待更新的renderType以及对应的最新数据
     * @protected
     */
    _this.diffData = {};
    _this.enableBBox = void 0;
    _this.featureType = void 0;
    /**
     *
     * @protected
     */
    _this.history = void 0;
    _this.scene = scene;
    _this.render = render;
    if (historyConfig) {
      _this.history = new _history.History({
        config: historyConfig
      });
    }
    if (data) {
      _this.setData(data);
    }
    _this.featureType = function () {
      if (render.polygon) {
        return 'polygon';
      }
      if (render.line) {
        return 'line';
      }
      return 'point';
    }();
    _this.enableBBox = bbox;
    return _this;
  }
  _inherits(Source, _EventEmitter);
  return _createClass(Source, [{
    key: "saveHistory",
    value: function saveHistory() {
      var _this$history;
      return (_this$history = this.history) === null || _this$history === void 0 ? void 0 : _this$history.save(this.data);
    }
  }, {
    key: "revertHistory",
    value: function revertHistory() {
      var _this$history2;
      var data = (_this$history2 = this.history) === null || _this$history2 === void 0 ? void 0 : _this$history2.revert();
      if (data) {
        this.setData(data);
        return data;
      }
    }
  }, {
    key: "redoHistory",
    value: function redoHistory() {
      var _this$history3;
      var data = (_this$history3 = this.history) === null || _this$history3 === void 0 ? void 0 : _this$history3.redo();
      if (data) {
        this.setData(data);
        return data;
      }
    }
    /**
     * 更新数据的方法，新的数据会累积延迟更新
     * @param data
     */
  }, {
    key: "setData",
    value: function setData(data) {
      var _this2 = this;
      if (Object.keys(data).length) {
        var _data$this$featureTyp;
        if (this.enableBBox && ((_data$this$featureTyp = data[this.featureType]) === null || _data$this$featureTyp === void 0 ? void 0 : _data$this$featureTyp.length)) {
          // @ts-ignore
          data[this.featureType] = (0, _utils.injectFeaturesBBox)(data[this.featureType]);
        }
        this.data = _objectSpread(_objectSpread({}, this.data), data);
        this.diffData = _objectSpread(_objectSpread({}, this.diffData), data);
        if (!this.timeout) {
          this.timeout = requestAnimationFrame(function () {
            return _this2.updateDiffData();
          });
        }
        this.emit(_constant.SourceEvent.Change, {
          data: this.data
        });
      }
      return this.data;
    }
    /**
     * 获取全量source数据
     */
  }, {
    key: "getData",
    value: function getData() {
      return this.data;
    }
    /**
     * 获取单项source数据
     * @param renderType
     */
  }, {
    key: "getRenderData",
    value: function getRenderData(renderType) {
      return this.data[renderType];
    }
    /**
     * 设置单项
     * @param renderType
     * @param updater
     */
  }, {
    key: "setRenderData",
    value: function setRenderData(renderType, updater) {
      var data = typeof updater === 'function' ? updater(this.getRenderData(renderType)) : updater;
      this.setData(_defineProperty({}, renderType, data));
      this.emit(_constant.SourceEvent.Change, this.data);
      return data;
    }
    /**
     * 根据当前diffData中积累的数据更新对应render
     */
  }, {
    key: "updateDiffData",
    value: function updateDiffData() {
      var _this3 = this;
      var renderTypes = Object.entries(this.diffData);
      if (renderTypes.length) {
        renderTypes.forEach(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 2),
            renderType = _ref3[0],
            renderData = _ref3[1];
          if (Array.isArray(renderData)) {
            var _this3$getRender;
            (_this3$getRender = _this3.getRender(renderType)) === null || _this3$getRender === void 0 ? void 0 : _this3$getRender.setData(renderData);
          }
        });
        this.emit(_constant.SourceEvent.Update, this.data, this.diffData);
        this.diffData = {};
        this.timeout = null;
        requestAnimationFrame(function () {
          _this3.scene.render();
        });
      }
    }
    /**
     * 获取对应renderType类型的render实例，如果没有获取到则代表
     * @param type
     */
  }, {
    key: "getRender",
    value: function getRender(type) {
      return this.render[type];
    }
    /**
     * 清空所有数据
     */
  }, {
    key: "clear",
    value: function clear() {
      this.setData((0, _lodash.fromPairs)(Object.keys(this.render).map(function (renderType) {
        return [renderType, []];
      })));
    }
  }]);
}(_eventemitter.default);