function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
import EventEmitter from 'eventemitter3';
import { cloneDeep, debounce, fromPairs, isEqual, merge, toPairs } from 'lodash';
import Mousetrap from 'mousetrap';
import { DEFAULT_CURSOR_MAP, DEFAULT_HISTORY_CONFIG, DEFAULT_KEYBOARD_CONFIG, DEFAULT_STYLE, DrawEvent, RENDER_MAP, RenderEvent, SceneEvent, SourceEvent } from '../constant';
import { Cursor, Popup } from '../interactive';
import { SceneRender } from '../render';
import { Source } from '../source';
import { getLngLat, isSameFeature } from '../utils';
export var BaseMode = /*#__PURE__*/function (_EventEmitter) {
  function BaseMode(scene, options) {
    var _this$options$bbox;
    var _this;
    _classCallCheck(this, BaseMode);
    _this = _callSuper(this, BaseMode);
    /**
     * L7 场景实例，在构造器中传入
     */
    _this.scene = void 0;
    /**
     * 数据管理中心
     */
    _this.source = void 0;
    /**
     * 渲染器render对象
     */
    _this.render = void 0;
    /**
     * 指针管理器
     * @protected
     */
    _this.cursor = void 0;
    /**
     * Drawer 配置
     */
    _this.options = void 0;
    /**
     * 当前Drawer是否为开启绘制状态
     */
    _this.enabled = false;
    // 在 enable 时传入，用于判断当前是否支持添加操作
    _this.allowCreate = false;
    /**
     * scene相关事件管理
     * @protected
     */
    _this.sceneRender = void 0;
    /**
     * 光标在地图上的经纬度位置
     * @protected
     */
    _this.mouseLngLat = {
      lng: 0,
      lat: 0
    };
    _this.popup = void 0;
    /**
     * 本次enable添加的绘制物个数
     * @protected
     */
    _this.addCount = 0;
    // 用于收集当前鼠标所在经纬度的回调函数，用于在数据回退时，若有存在绘制中的数据，伪造mousemove事件时使用
    _this.saveMouseLngLat = debounce(function (e) {
      _this.mouseLngLat = getLngLat(e);
    }, 100, {
      maxWait: 100
    });
    /**
     * 保存当前数据备份
     */
    _this.saveHistory = debounce(function () {
      if (!_this.options.history) {
        return;
      }
      _this.source.saveHistory();
    }, 100);
    _this.bindThis();
    _this.scene = scene;
    _this.sceneRender = new SceneRender(scene);
    _this.options = merge({}, _this.getDefaultOptions(options), options);
    _this.render = _this.initRender();
    _this.source = new Source({
      render: _this.render,
      history: _this.options.history || undefined,
      scene: scene,
      bbox: (_this$options$bbox = _this.options.bbox) !== null && _this$options$bbox !== void 0 ? _this$options$bbox : false
    });
    _this.cursor = new Cursor(scene, _this.options.cursor);
    var _this$options = _this.options,
      initialData = _this$options.initialData,
      popup = _this$options.popup;
    if (initialData) {
      _this.setData(initialData);
    }
    if (popup) {
      _this.popup = new Popup(scene, popup instanceof Object ? popup : {});
    }
    _this.saveHistory();
    _this.bindCommonEvent();
    _this.emit(DrawEvent.Init, _this);
    _this.bindEnableEvent();
    BaseMode.instances.push(_this);
    return _this;
  }
  /**
   * 获取当前options配置的方法
   */
  _inherits(BaseMode, _EventEmitter);
  return _createClass(BaseMode, [{
    key: "addable",
    get:
    /**
     * 当期是否可以添加新的绘制物
     */
    function get() {
      var data = this.getData();
      var _this$options2 = this.options,
        multiple = _this$options2.multiple,
        maxCount = _this$options2.maxCount;
      var drawItem = data.find(function (item) {
        var _item$properties;
        return (_item$properties = item.properties) === null || _item$properties === void 0 ? void 0 : _item$properties.isDraw;
      });
      if (!this.enabled || !this.allowCreate) {
        return false;
      }
      if (multiple && maxCount <= 0 || drawItem) {
        return true;
      }
      if (!multiple && this.addCount >= 1) {
        return false;
      }
      if (maxCount > 0 && data.length >= maxCount) {
        return false;
      }
      return true;
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.options;
    }
    /**
     * 获取当前激活的绘制项
     */
  }, {
    key: "getEditItem",
    value: function getEditItem() {
      return this.editItem;
    }
    /**
     * 获取当前正在被拖拽的绘制项
     */
  }, {
    key: "getDragItem",
    value: function getDragItem() {
      return this.dragItem;
    }
  }, {
    key: "setHelper",
    value: function setHelper(type) {
      var _ref, _this$popup;
      var helper = this.options.helper;
      if (!helper) {
        return;
      }
      // @ts-ignore
      var content = (_ref = type in helper ? helper[type] : type) !== null && _ref !== void 0 ? _ref : null;
      (_this$popup = this.popup) === null || _this$popup === void 0 ? void 0 : _this$popup.setContent(content);
    }
    /**
     * 获取当前是否为编辑态
     */
  }, {
    key: "isEnable",
    value: function isEnable() {
      return this.enabled;
    }
    /**
     * 绑定回调函数的this指向
     */
  }, {
    key: "bindThis",
    value: function bindThis() {
      this.initRender = this.initRender.bind(this);
      this.getData = this.getData.bind(this);
      this.setData = this.setData.bind(this);
      this.emitChangeEvent = this.emitChangeEvent.bind(this);
      this.saveHistory = this.saveHistory.bind(this);
      this.onSceneMouseMove = this.onSceneMouseMove.bind(this);
      this.revertHistory = this.revertHistory.bind(this);
      this.redoHistory = this.redoHistory.bind(this);
      this.removeActiveFeature = this.removeActiveFeature.bind(this);
      this.bindCommonEvent = this.bindCommonEvent.bind(this);
      this.bindEnableEvent = this.bindEnableEvent.bind(this);
      this.unbindEnableEvent = this.unbindEnableEvent.bind(this);
      this.setActiveFeature = this.setActiveFeature.bind(this);
    }
  }, {
    key: "bindCommonEvent",
    value: function bindCommonEvent() {
      var _this2 = this;
      this.on(DrawEvent.Add, this.emitChangeEvent);
      this.on(DrawEvent.Add, function () {
        _this2.addCount++;
      });
      this.on(DrawEvent.Edit, this.emitChangeEvent);
      this.on(DrawEvent.Remove, this.emitChangeEvent);
      this.on(DrawEvent.Clear, this.emitChangeEvent);
      this.on(DrawEvent.AddNode, this.saveHistory);
      this.on(DrawEvent.RemoveNode, this.emitChangeEvent);
      this.bindEmitSelectEvent(true);
    }
    /**
     * 绑定判断 select 事件方法
     * @param emit
     */
  }, {
    key: "bindEmitSelectEvent",
    value: function bindEmitSelectEvent() {
      var _this3 = this;
      var emit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var previousSelectFeature = null;
      var onSourceChange = function onSourceChange() {
        var _previousSelectFeatur, _previousSelectFeatur2, _newSelectFeature$pro;
        var newSelectFeature = _this3.getData(true).find(function (feature) {
          var _feature$properties;
          return (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.isActive;
        }) || null;
        if (((_previousSelectFeatur = previousSelectFeature) === null || _previousSelectFeatur === void 0 ? void 0 : (_previousSelectFeatur2 = _previousSelectFeatur.properties) === null || _previousSelectFeatur2 === void 0 ? void 0 : _previousSelectFeatur2.id) !== (newSelectFeature === null || newSelectFeature === void 0 ? void 0 : (_newSelectFeature$pro = newSelectFeature.properties) === null || _newSelectFeature$pro === void 0 ? void 0 : _newSelectFeature$pro.id)) {
          // @ts-ignore
          previousSelectFeature = newSelectFeature;
          _this3.emit(DrawEvent.Select, newSelectFeature);
        }
      };
      this.source.on(SourceEvent.Change, onSourceChange);
      if (emit) {
        onSourceChange();
      }
    }
    /**
     * 监听通用事件
     */
  }, {
    key: "bindEnableEvent",
    value: function bindEnableEvent() {
      this.unbindKeyboardEvent();
      this.scene.setMapStatus({
        doubleClickZoom: false
      });
      this.scene.on(SceneEvent.Mousemove, this.saveMouseLngLat);
      this.bindKeyboardEvent();
    }
    /**
     * 监听通用事件
     */
  }, {
    key: "unbindEnableEvent",
    value: function unbindEnableEvent() {
      this.scene.setMapStatus({
        doubleClickZoom: true
      });
      this.scene.off(SceneEvent.Mousemove, this.saveMouseLngLat);
      this.unbindKeyboardEvent();
    }
    // 快捷键绑定
  }, {
    key: "bindKeyboardEvent",
    value: function bindKeyboardEvent() {
      var _this4 = this;
      var _ref2 = this.options.keyboard || {},
        revert = _ref2.revert,
        redo = _ref2.redo,
        remove = _ref2.remove;
      remove && Mousetrap.bind(remove, function () {
        _this4.removeActiveFeature();
      });
      if (this.options.history) {
        revert && Mousetrap.bind(revert, this.revertHistory);
        redo && Mousetrap.bind(redo, this.redoHistory);
      }
    }
    // 快捷键解绑
  }, {
    key: "unbindKeyboardEvent",
    value: function unbindKeyboardEvent() {
      var _ref3 = this.options.keyboard || {},
        revert = _ref3.revert,
        redo = _ref3.redo,
        remove = _ref3.remove;
      remove && Mousetrap.unbind(remove);
      if (this.options.history) {
        revert && Mousetrap.unbind(revert);
        redo && Mousetrap.unbind(redo);
      }
    }
  }, {
    key: "emitChangeEvent",
    value:
    /**
     * 触发change事件，同时触发保存数据备份
     */
    function emitChangeEvent() {
      this.emit(DrawEvent.Change, this.getData());
      this.saveHistory();
    }
  }, {
    key: "revertHistory",
    value:
    /**
     * 回退至上一次数据备份
     */
    function revertHistory() {
      if (!this.enabled || !this.options.history) {
        return;
      }
      if (this.source.revertHistory()) {
        this.correctDrawItem();
        this.emit(DrawEvent.Change, this.getData());
      }
    }
    /**
     * 重做回退之前的数据备份
     */
  }, {
    key: "redoHistory",
    value: function redoHistory() {
      if (!this.enabled || !this.options.history) {
        return;
      }
      if (this.source.redoHistory()) {
        this.correctDrawItem();
        this.emit(DrawEvent.Change, this.getData());
      }
    }
    /**
     * 获取 renderType 与对应 L7图层的键值对
     */
  }, {
    key: "getRenderLayers",
    value: function getRenderLayers() {
      return fromPairs(toPairs(this.render).map(function (_ref4) {
        var _ref5 = _slicedToArray(_ref4, 2),
          renderType = _ref5[0],
          render = _ref5[1];
        return [renderType, render.getLayers()];
      }));
    }
    // 传入 Feature 或者 id 获取当前数据中的目标 Feature
  }, {
    key: "getTargetFeature",
    value: function getTargetFeature(target) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getData(true);
      var targetFeature = null;
      if (target) {
        var _data$find;
        targetFeature = (_data$find = data.find(function (feature) {
          var _feature$properties2, _target$properties;
          return ((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.id) === (typeof target === 'string' ? target : (_target$properties = target.properties) === null || _target$properties === void 0 ? void 0 : _target$properties.id);
        })) !== null && _data$find !== void 0 ? _data$find : null;
        if (!targetFeature && target instanceof Object) {
          var _data$find2;
          targetFeature = (_data$find2 = data.find(function (feature) {
            return isEqual(target.geometry, feature.geometry);
          })) !== null && _data$find2 !== void 0 ? _data$find2 : null;
        }
      }
      return targetFeature;
    }
    /**
     * 删除当前active的绘制物
     */
  }, {
    key: "removeActiveFeature",
    value: function removeActiveFeature() {
      var activeItem = this.getData(true).find(function (item) {
        var _item$properties2;
        var _ref6 = (_item$properties2 = item.properties) !== null && _item$properties2 !== void 0 ? _item$properties2 : {},
          isActive = _ref6.isActive,
          isDraw = _ref6.isDraw;
        return isActive || isDraw;
      });
      if (activeItem) {
        this.removeFeature(activeItem);
      }
      return activeItem;
    }
    /**
     * 删除指定
     * @param target
     */
  }, {
    key: "removeFeature",
    value: function removeFeature(target) {
      var data = this.getData(true);
      var targetFeature = this.getTargetFeature(target);
      if (targetFeature) {
        this.setData(
        // @ts-ignore
        data.filter(function (feature) {
          return !isSameFeature(targetFeature, feature);
        }));
        this.emit(DrawEvent.Remove, target, this.getData());
      }
    }
    /**
     * 矫正正在绘制Feature的虚线部分（Drawer中都是在onSceneMouseMove中进行绘制）
     */
  }, {
    key: "correctDrawItem",
    value: function correctDrawItem() {
      var drawItem = this.getData(true).find(function (item) {
        var _item$properties3;
        return (_item$properties3 = item.properties) === null || _item$properties3 === void 0 ? void 0 : _item$properties3.isDraw;
      });
      // 如果当前有正在绘制的元素，需要将虚线部分与鼠标位置表现一致，而非history保存时的虚线位置
      if (drawItem) {
        this.onSceneMouseMove({
          type: 'mousemove',
          lnglat: this.mouseLngLat,
          lngLat: this.mouseLngLat
        });
      }
    }
    /**
     * 根据子类实现的 getRenderTypes 方法，初始化对应的Render实例。
     */
  }, {
    key: "initRender",
    value: function initRender() {
      var renderMap = {};
      var renderTypeList = this.getRenderTypes();
      var _iterator = _createForOfIteratorHelper(renderTypeList),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var renderType = _step.value;
          var Render = RENDER_MAP[renderType];
          var style = this.options.style[renderType];
          // @ts-ignore
          renderMap[renderType] = new Render(this.scene, {
            // @ts-ignore
            style: style
          });
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return renderMap;
    }
    /**
     * 根据用户传入的options返回通用的options默认配置
     * @param options
     */
  }, {
    key: "getCommonOptions",
    value: function getCommonOptions(options) {
      return {
        initialData: [],
        autoActive: true,
        cursor: cloneDeep(DEFAULT_CURSOR_MAP),
        editable: true,
        style: cloneDeep(DEFAULT_STYLE),
        multiple: true,
        history: cloneDeep(DEFAULT_HISTORY_CONFIG),
        keyboard: cloneDeep(DEFAULT_KEYBOARD_CONFIG),
        popup: true,
        helper: {},
        maxCount: -1
      };
    }
    /**
     * 设置地图上光标样式类型
     * @param cursor
     */
  }, {
    key: "setCursor",
    value: function setCursor(cursor) {
      this.cursor.setCursor(cursor);
    }
    /**
     * 重置光标到常规状态
     */
  }, {
    key: "resetCursor",
    value: function resetCursor() {
      this.setCursor(this.addable ? 'draw' : null);
    }
    /**
     * 启用 Drawer
     * @param allowCreate 是否支持添加操作
     */
  }, {
    key: "enable",
    value: function enable() {
      var _this5 = this;
      var allowCreate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.allowCreate = allowCreate;
      this.addCount = 0;
      this.enabled = true;
      this.bindEnableEvent();
      this.resetCursor();
      this.setHelper(this.addable ? 'draw' : null);
      setTimeout(function () {
        _this5.emit(DrawEvent.Enable, _this5);
      }, 0);
    }
    /**
     * 禁用Drawer
     */
  }, {
    key: "disable",
    value: function disable() {
      var _this6 = this;
      this.resetFeatures();
      this.enabled = false;
      this.setCursor(null);
      this.unbindEnableEvent();
      this.addCount = 0;
      this.setHelper(null);
      setTimeout(function () {
        _this6.emit(DrawEvent.Disable, _this6);
      }, 0);
    }
    /**
     * 清空所有数据
     */
  }, {
    key: "clear",
    value: function clear() {
      var disable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.source.clear();
      this.emit(DrawEvent.Clear, this);
      if (disable) {
        this.disable();
      }
    }
    /**
     * 显示该Drawer下所有图层
     */
  }, {
    key: "show",
    value: function show() {
      return Object.values(this.render).forEach(function (render) {
        render.show();
      });
    }
    /**
     * 隐藏该Drawer下所有图层
     */
  }, {
    key: "hide",
    value: function hide() {
      return Object.values(this.render).forEach(function (render) {
        render.hide();
      });
    }
    /**
     * 销毁当前Drawer
     */
  }, {
    key: "destroy",
    value: function destroy() {
      var _this7 = this,
        _this$popup2;
      Object.values(this.render).forEach(function (render) {
        render.destroy();
      });
      Object.values(RenderEvent).forEach(function (EventName) {
        Object.values(_this7.render).forEach(function (render) {
          render.removeAllListeners(EventName);
        });
        _this7.sceneRender.removeAllListeners(EventName);
      });
      setTimeout(function () {
        Object.values(DrawEvent).forEach(function (EventName) {
          _this7.removeAllListeners(EventName);
        });
      }, 0);
      (_this$popup2 = this.popup) === null || _this$popup2 === void 0 ? void 0 : _this$popup2.destroy();
      this.cursor.destroy();
      this.emit(DrawEvent.Destroy, this);
      var targetIndex = BaseMode.instances.indexOf(this);
      if (targetIndex > -1) {
        BaseMode.instances.splice(targetIndex, 1);
      }
    }
  }]);
}(EventEmitter);
BaseMode.instances = [];