import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import React from 'react';
import { mergeGraphOptions } from "../../utils/config";
import { transform2ADCProps } from "../../utils/plot";
import { ConfigContext } from "../context";
function useConfig() {
  var context = React.useContext(ConfigContext);
  return context;
}
export function useComponentGlobalConfig(name) {
  var globalConfig = useConfig();
  var _globalConfig$compone = globalConfig.components,
    components = _globalConfig$compone === void 0 ? {} : _globalConfig$compone;
  var config = components === null || components === void 0 ? void 0 : components[name];
  return config;
}
function usePlotGlobalConfig(name) {
  var componentConfig = useComponentGlobalConfig(name);
  var _useConfig = useConfig(),
    plotConfig = _useConfig.plot;
  var config = _objectSpread(_objectSpread({}, plotConfig), componentConfig);
  return config;
}
export function usePlotConfig(name, defaultConfig, props) {
  var globalConfig = usePlotGlobalConfig(name);
  var mergedProps = _objectSpread(_objectSpread({}, globalConfig), props);
  var transformedProps = transform2ADCProps(mergedProps);
  var _defaultConfig = typeof defaultConfig === 'function' ? defaultConfig(transformedProps) : defaultConfig;
  var config = _objectSpread(_objectSpread({}, _defaultConfig), transformedProps);
  return config;
}
function useMapGlobalConfig(name) {
  var componentConfig = useComponentGlobalConfig(name);
  var _useConfig2 = useConfig(),
    mapConfig = _useConfig2.map;
  var transformedProps = {
    mapType: mapConfig === null || mapConfig === void 0 ? void 0 : mapConfig.style,
    token: mapConfig === null || mapConfig === void 0 ? void 0 : mapConfig.token
  };
  var config = _objectSpread(_objectSpread({}, transformedProps), componentConfig);
  return config;
}
export function useMapConfig(name, props) {
  var globalConfig = useMapGlobalConfig(name);
  var mapConfig = _objectSpread(_objectSpread({}, globalConfig), props);
  return mapConfig;
}
function useGraphGlobalConfig(name) {
  var _useConfig3 = useConfig(),
    _useConfig3$graph = _useConfig3.graph,
    graphConfig = _useConfig3$graph === void 0 ? {} : _useConfig3$graph;
  var componentConfig = useComponentGlobalConfig(name);
  return mergeGraphOptions(graphConfig, componentConfig || {});
}
export function useGraphConfig(name, defaultConfig, props) {
  var globalConfig = useGraphGlobalConfig(name);
  return mergeGraphOptions(defaultConfig, globalConfig, props);
}