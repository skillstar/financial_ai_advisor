var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/ChartCodeRender/VisChart.tsx
var VisChart_exports = {};
__export(VisChart_exports, {
  RenderVisChart: () => RenderVisChart
});
module.exports = __toCommonJS(VisChart_exports);
var import_react = __toESM(require("react"));
var import_styled_components = __toESM(require("styled-components"));
var import_Loading = __toESM(require("./Loading"));
var StyledGPTVis = import_styled_components.default.div`
  min-width: 300px;
  height: 300px;
  max-width: 100%;
`;
var GlobalStyles = import_styled_components.createGlobalStyle`
  pre:has(.gpt-vis) {
    overflow: hidden;
  }
`;
var RenderVisChart = (0, import_react.memo)(
  ({ style, content, components, debug, loadingTimeout }) => {
    const timeoutRef = (0, import_react.useRef)();
    const [loading, setLoading] = (0, import_react.useState)(true);
    let chartJson;
    try {
      chartJson = JSON.parse(content);
    } catch (e) {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        if (debug) {
          console.warn("GPT-Vis withChartCode parse content timeout");
        }
      }
      timeoutRef.current = setTimeout(() => {
        setLoading(false);
      }, loadingTimeout);
      if (loading) {
        return /* @__PURE__ */ import_react.default.createElement(StyledGPTVis, { className: "gpt-vis", style }, /* @__PURE__ */ import_react.default.createElement(import_Loading.default, null));
      }
      return /* @__PURE__ */ import_react.default.createElement("p", null, "Chart generation timeout.");
    }
    const { type, ...chartProps } = chartJson;
    const ChartComponent = components[type];
    if (debug) {
      console.log("GPT-Vis withChartCode get chartJson parse from vis-chart code block", chartJson);
    }
    if (!ChartComponent) {
      return /* @__PURE__ */ import_react.default.createElement("p", null, `Chart type "${type}" is not supported.`);
    }
    return /* @__PURE__ */ import_react.default.createElement(StyledGPTVis, { className: "gpt-vis", style }, /* @__PURE__ */ import_react.default.createElement(GlobalStyles, null), /* @__PURE__ */ import_react.default.createElement(ChartComponent, { ...chartProps }));
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RenderVisChart
});
