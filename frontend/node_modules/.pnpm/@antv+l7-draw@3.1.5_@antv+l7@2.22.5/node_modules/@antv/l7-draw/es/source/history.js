function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { cloneDeep } from 'lodash';
export var History = /*#__PURE__*/function () {
  function History(_ref) {
    var config = _ref.config;
    _classCallCheck(this, History);
    /**
     * 保存历史数组的队列，越新的数据越靠前
     * @protected
     */
    this.historyList = [];
    /**
     * 当前回退/重做操作后对应的index下标，回退对应index++，重做对应index--
     * @protected
     */
    this.historyIndex = 0;
    /**
     * 配置
     * @protected
     */
    this.config = void 0;
    this.config = config;
  }
  return _createClass(History, [{
    key: "save",
    value: function save(data) {
      if (!this.config) {
        return;
      }
      var maxSize = this.config.maxSize;
      if (this.historyIndex) {
        this.historyList = this.historyList.slice(this.historyIndex);
        this.historyIndex = 0;
      }
      if (this.historyList.length >= maxSize) {
        this.historyList.pop();
      }
      var cloneData = cloneDeep(data);
      this.historyList.unshift(cloneData);
      return cloneData;
    }
  }, {
    key: "revert",
    value: function revert() {
      if (!this.historyList.length || this.historyIndex >= this.historyList.length - 1) {
        return;
      }
      var previousData = this.historyList[++this.historyIndex];
      if (previousData) {
        return cloneDeep(previousData);
      }
    }
  }, {
    key: "redo",
    value: function redo() {
      if (!this.historyList.length || this.historyIndex <= 0) {
        return;
      }
      var nextData = this.historyList[--this.historyIndex];
      if (nextData) {
        return cloneDeep(nextData);
      }
    }
  }]);
}();