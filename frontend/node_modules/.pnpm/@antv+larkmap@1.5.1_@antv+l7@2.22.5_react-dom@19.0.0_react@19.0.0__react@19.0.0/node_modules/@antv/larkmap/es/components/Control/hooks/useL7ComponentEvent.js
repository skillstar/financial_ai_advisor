function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { useUnmount } from 'ahooks';
import { useEffect, useMemo } from 'react';
/**
 * 为 Control 绑定对应事件的回调，并且在回调函数发生更新时重新绑定
 * @param control
 * @param props
 */
export var useL7ComponentEvent = function useL7ComponentEvent(control, props) {
  var eventNameList = useMemo(function () {
    return Object.keys(props);
  }, [props]);
  useEffect(function () {
    if (control) {
      eventNameList.forEach(function (eventName) {
        var callback = props[eventName];
        if (callback) {
          control.on(eventName, callback);
        }
      });
    }
    return function () {
      if (control) {
        eventNameList.forEach(function (eventName) {
          var callback = props[eventName];
          if (callback) {
            control.off(eventName, callback);
          }
        });
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [control].concat(_toConsumableArray(Object.values(props))));
  useUnmount(function () {
    if (!control) {
      return;
    }
    eventNameList.forEach(function (eventName) {
      var callback = props[eventName];
      if (callback) {
        control.off(eventName, callback);
      }
    });
  });
};