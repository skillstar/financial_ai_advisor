"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerManager = void 0;
var _eventEmitter = _interopRequireDefault(require("@antv/event-emitter"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
let layerCounter = 0;

/**
 * 图层管理器
 */
class LayerManager extends _eventEmitter.default {
  /**
   * 地图容器
   */
  scene;
  /**
   * 配置项
   */
  options;
  /**
   * 图层
   */
  layerMap = new Map();
  constructor(options) {
    super();
    this.scene = options.scene;
    this.options = options;
  }

  /**
   * 是否有该图层
   */
  hasLayer(id) {
    return this.layerMap.has(id);
  }

  /**
   * 添加图层
   */
  addLayer(layer) {
    const layerId = this.getLayerId(layer);
    this.layerMap.set(layerId, layer);
    layer.addTo(this.scene);
    this.emit('add', layer);
  }

  /**
   * 添加多个图层
   */
  addLayers(layers) {
    layers.forEach(layer => {
      this.addLayer(layer);
    });
  }

  /**
   * 根据图层 id 或图层实例移除 layer 图层
   */
  removeLayer(id) {
    const layerId = typeof id === 'string' ? id : this.getLayerId(id);
    const findLayer = this.layerMap.get(layerId);
    if (!findLayer) return false;
    this.layerMap.delete(layerId);
    findLayer.remove();
    this.emit('remove', layerId);
    return true;
  }

  /**
   * 获取图层组所有的图层
   */
  getLayers() {
    return Array.from(this.layerMap.values());
  }

  /**
   * 根据图层 ID 获取图层
   */
  getLayerById(id) {
    return this.layerMap.get(id);
  }
  getLayer(id) {
    return this.getLayerById(id);
  }

  /**
   * 移除所有的图层对象
   */
  removeAllLayer() {
    for (const layer of this.layerMap.values()) {
      layer.remove();
    }
    this.layerMap.clear();
  }

  /**
   * 是否图层为空
   */
  isEmpty() {
    return this.layerMap.size === 0;
  }

  /**
   * 根据图层获取图层 ID
   */
  getLayerId(layer) {
    if ('id' in layer) {
      return layer.id;
    }
    return `${layerCounter++}`;
  }
  destroy() {
    this.removeAllLayer();
  }
}
exports.LayerManager = LayerManager;