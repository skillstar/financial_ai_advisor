var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/plot.ts
var plot_exports = {};
__export(plot_exports, {
  transform2ADCProps: () => transform2ADCProps
});
module.exports = __toCommonJS(plot_exports);
var import_lodash = require("lodash");
var ADC_ENCODE_FIELDS = /* @__PURE__ */ new Map([
  ["x", "xField"],
  ["y", "yField"],
  ["series", "seriesField"],
  ["size", "sizeField"],
  ["color", "colorField"],
  ["shape", "shapeField"],
  ["y", "angleField"]
]);
function visG2Encode2ADCEncode(config) {
  const encodeConfig = config.encode;
  if (!encodeConfig)
    return config;
  const _config = { ...config };
  for (const field of encodeConfig) {
    const adcField = ADC_ENCODE_FIELDS.get(field);
    if (adcField) {
      _config[adcField] = encodeConfig[field];
    }
  }
  return _config;
}
function axisTitle2G2axis(config) {
  const { axisXTitle, axisYTitle } = config;
  const _config = { axis: {}, ...config };
  if (axisXTitle) {
    if ((0, import_lodash.get)(_config, "axis.x")) {
      _config.axis.x.title = axisXTitle;
    } else {
      _config.axis.x = { title: axisXTitle };
    }
  }
  if (axisYTitle) {
    if ((0, import_lodash.get)(_config, "axis.y")) {
      _config.axis.y.title = axisYTitle;
    } else {
      _config.axis.y = { title: axisYTitle };
    }
  }
  return _config;
}
function transform2ADCProps(props) {
  const transformedEncode = visG2Encode2ADCEncode(props);
  const transformedAxis = axisTitle2G2axis(transformedEncode);
  return transformedAxis;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  transform2ADCProps
});
