import EventEmitter from '@antv/event-emitter';
import { ClusterState, FlowDataProviderState, FlowSource } from '../types';
export declare class DataProvider extends EventEmitter {
    getSourceData: (source: FlowSource, config: FlowDataProviderState) => Record<string, any>[];
    getSourceParser: (source: FlowSource, config: FlowDataProviderState) => import("../types").FlowParser;
    getMapZoom: (source: FlowSource, config: FlowDataProviderState) => number;
    getMapBounds: (source: FlowSource, config: FlowDataProviderState) => [number, number, number, number];
    getEnableCluster: (source: FlowSource, config: FlowDataProviderState) => boolean;
    getClusterType: (source: FlowSource, config: FlowDataProviderState) => "HCA";
    getExtent: (source: FlowSource, config: FlowDataProviderState) => number;
    getNodeSize: (source: FlowSource, config: FlowDataProviderState) => number;
    getRadius: (source: FlowSource, config: FlowDataProviderState) => number;
    getMinZoom: (source: FlowSource, config: FlowDataProviderState) => number;
    getMaxZoom: (source: FlowSource, config: FlowDataProviderState) => number;
    getZoomStep: (source: FlowSource, config: FlowDataProviderState) => number;
    getMaxTopFlowNum: (source: FlowSource, config: FlowDataProviderState) => number;
    /**
     * 将 source 转换成最底层的客流点/线数据
     */
    getOriginData: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => import("../types").OriginData) & import("reselect").OutputSelectorFields<(args_0: Record<string, any>[], args_1: import("../types").FlowParser) => import("../types").OriginData, {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
    /**
     * 获取聚合配置
     */
    getClusterOptions: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => ClusterState) & import("reselect").OutputSelectorFields<(args_0: "HCA", args_1: boolean, args_2: number, args_3: number, args_4: number, args_5: number, args_6: number, args_7: number) => ClusterState, {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
    /**
     * 获取各个层级下的聚合点数组
     */
    getClusterLevels: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => import("../types").ClusterLevel[]) & import("reselect").OutputSelectorFields<(args_0: import("../types").OriginData, args_1: ClusterState) => import("../types").ClusterLevel[], {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
    /**
     * 获取聚合点的检索器
     */
    getClusterIndex: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => {
        zoomList: number[];
        clusterIdMap: Map<string, import("../types").ClusterLocation>;
        getAppropriateLevel: (targetZoom: number) => import("../types").ClusterLevel;
        getMapLocations: (targetZoom: number, bounds: [number, number, number, number]) => import("../types").ClusterLocation[];
        getLocationIdsFromCluster: (clusterId: string) => string[];
        findClusterForZoom: (locationId: string, zoom: number) => import("../types").ClusterLocation | undefined;
    }) & import("reselect").OutputSelectorFields<(args_0: import("../types").ClusterLevel[]) => {
        zoomList: number[];
        clusterIdMap: Map<string, import("../types").ClusterLocation>;
        getAppropriateLevel: (targetZoom: number) => import("../types").ClusterLevel;
        getMapLocations: (targetZoom: number, bounds: [number, number, number, number]) => import("../types").ClusterLocation[];
        getLocationIdsFromCluster: (clusterId: string) => string[];
        findClusterForZoom: (locationId: string, zoom: number) => import("../types").ClusterLocation | undefined;
    }, {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
    /**
     * 获取当前需要展示的聚合点
     */
    getViewLocations: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => import("../types").ClusterLocation[]) & import("reselect").OutputSelectorFields<(args_0: {
        zoomList: number[];
        clusterIdMap: Map<string, import("../types").ClusterLocation>;
        getAppropriateLevel: (targetZoom: number) => import("../types").ClusterLevel;
        getMapLocations: (targetZoom: number, bounds: [number, number, number, number]) => import("../types").ClusterLocation[];
        getLocationIdsFromCluster: (clusterId: string) => string[];
        findClusterForZoom: (locationId: string, zoom: number) => import("../types").ClusterLocation | undefined;
    }, args_1: number, args_2: [number, number, number, number]) => import("../types").ClusterLocation[], {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
    getLocationWeightRange: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => [number, number]) & import("reselect").OutputSelectorFields<(args_0: {
        zoomList: number[];
        clusterIdMap: Map<string, import("../types").ClusterLocation>;
        getAppropriateLevel: (targetZoom: number) => import("../types").ClusterLevel;
        getMapLocations: (targetZoom: number, bounds: [number, number, number, number]) => import("../types").ClusterLocation[];
        getLocationIdsFromCluster: (clusterId: string) => string[];
        findClusterForZoom: (locationId: string, zoom: number) => import("../types").ClusterLocation | undefined;
    }, args_1: number) => [number, number], {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
    /**
     * 获取当前层级下的聚合线数据
     */
    getAggregatedFlows: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => import("../types").ClusterFlow[]) & import("reselect").OutputSelectorFields<(args_0: {
        zoomList: number[];
        clusterIdMap: Map<string, import("../types").ClusterLocation>;
        getAppropriateLevel: (targetZoom: number) => import("../types").ClusterLevel;
        getMapLocations: (targetZoom: number, bounds: [number, number, number, number]) => import("../types").ClusterLocation[];
        getLocationIdsFromCluster: (clusterId: string) => string[];
        findClusterForZoom: (locationId: string, zoom: number) => import("../types").ClusterLocation | undefined;
    }, args_1: import("../types").OriginData, args_2: number) => import("../types").ClusterFlow[], {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
    /**
     * 获取当前需要展示的聚合线数据
     */
    getFilterFlows: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => import("../types").ClusterFlow[]) & import("reselect").OutputSelectorFields<(args_0: import("../types").ClusterLocation[], args_1: import("../types").ClusterFlow[], args_2: number) => import("../types").ClusterFlow[], {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
    getFilterLocations: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => import("../types").ClusterLocation[]) & import("reselect").OutputSelectorFields<(args_0: import("../types").ClusterLocation[], args_1: import("../types").ClusterFlow[]) => import("../types").ClusterLocation[], {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
    /**
     * 获取当前层级下筛选前的权重区间，用于计算客流线的宽度和颜色深浅
     */
    getFlowWeightRange: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => [number, number]) & import("reselect").OutputSelectorFields<(args_0: import("../types").ClusterFlow[]) => [number, number], {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
    /**
     * 获取当前层级下筛选后的客流线的权重区间，主要用于客流线透明度的计算
     */
    getFilterFlowWeightRange: ((state: FlowSource, config: import("../types").ClusterOptions & import("../types").DisplayOptions & {
        maxZoom: number;
        minZoom: number;
        mapStatus: import("../types").MapStatus;
    }) => [number, number]) & import("reselect").OutputSelectorFields<(args_0: import("../types").ClusterFlow[]) => [number, number], {
        clearCache: () => void;
    }> & {
        clearCache: () => void;
    };
}
