var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/Map/Component/Polyline.tsx
var Polyline_exports = {};
__export(Polyline_exports, {
  default: () => Polyline_default
});
module.exports = __toCommonJS(Polyline_exports);
var import_larkmap = require("@antv/larkmap");
var import_react = require("react");
var import_map = require("../../utils/map");
var Polyline_default = (props) => {
  const scene = (0, import_larkmap.useScene)();
  const [layers, setLayers] = (0, import_react.useState)([]);
  const removeLayers = () => {
    layers.forEach((item) => {
      scene.removeLayer(item);
    });
  };
  (0, import_react.useEffect)(() => {
    if (!props.polyline)
      return;
    const lineLayers = (0, import_map.setPolyline)(props.polyline || []);
    removeLayers();
    lineLayers.forEach((item) => {
      scene.addLayer(item);
    });
    setLayers(lineLayers);
    return () => {
      removeLayers();
    };
  }, [props.polyline]);
  return null;
};
