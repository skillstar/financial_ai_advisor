"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDrawGroup = void 0;
var _lodash = require("lodash");
var _react = require("react");
var _useDraw = require("../use-draw");
const useDrawGroup = ({
  point: pointConfig,
  line: lineConfig,
  polygon: polygonConfig,
  rect: rectConfig,
  circle: circleConfig
}, commonOptions) => {
  const hasPointConfig = !!pointConfig;
  const hasLineConfig = !!lineConfig;
  const hasPolygonConfig = !!polygonConfig;
  const hasRectConfig = !!rectConfig;
  const hasCircleConfig = !!circleConfig;
  const getDrawOptions = (0, _react.useCallback)(options => {
    return {
      ...commonOptions,
      ...(options instanceof Object ? options : {})
    };
  }, [commonOptions]);
  const pointDrawHook = (0, _useDraw.useDraw)({
    type: 'point',
    options: getDrawOptions(pointConfig)
  });
  const lineDrawHook = (0, _useDraw.useDraw)({
    type: 'line',
    options: getDrawOptions(lineConfig)
  });
  const polygonDrawHook = (0, _useDraw.useDraw)({
    type: 'polygon',
    options: getDrawOptions(polygonConfig)
  });
  const rectDrawHook = (0, _useDraw.useDraw)({
    type: 'rect',
    options: getDrawOptions(rectConfig)
  });
  const circleDrawHook = (0, _useDraw.useDraw)({
    type: 'circle',
    options: getDrawOptions(circleConfig)
  });
  const drawInfoMap = (0, _react.useMemo)(() => {
    return (0, _lodash.fromPairs)((0, _lodash.toPairs)({
      point: hasPointConfig ? pointDrawHook : undefined,
      line: hasLineConfig ? lineDrawHook : undefined,
      polygon: hasPolygonConfig ? polygonDrawHook : undefined,
      rect: hasRectConfig ? rectDrawHook : undefined,
      circle: hasCircleConfig ? circleDrawHook : undefined
    }).filter(([, hook]) => !!hook));
  }, [pointDrawHook, lineDrawHook, polygonDrawHook, rectDrawHook, circleDrawHook, hasPointConfig, hasLineConfig, hasPolygonConfig, hasRectConfig, hasCircleConfig]);
  const drawMap = (0, _react.useMemo)(() => {
    return (0, _lodash.fromPairs)((0, _lodash.toPairs)(drawInfoMap).map(([type, hook]) => [type, hook.draw]));
  }, [drawInfoMap]);
  const drawGroupData = (0, _react.useMemo)(() => {
    return (0, _lodash.fromPairs)((0, _lodash.toPairs)(drawInfoMap).map(([type, hook]) => [type, hook.drawData]));
  }, [drawInfoMap]);
  const setDrawGroupData = (0, _react.useCallback)(newData => {
    Object.entries(newData).forEach(([type, newDrawData]) => {
      drawInfoMap[type]?.setDrawData(newDrawData);
    });
  }, [drawInfoMap]);
  const activeDrawInfo = (0, _react.useMemo)(() => {
    return Object.values(drawInfoMap).find(hook => {
      return hook.isEnable;
    });
  }, [drawInfoMap]);
  const activeDraw = (0, _react.useMemo)(() => {
    return activeDrawInfo?.draw ?? null;
  }, [activeDrawInfo]);
  const setActiveDraw = (0, _react.useCallback)(target => {
    Object.values(drawInfoMap).forEach(hook => {
      if (!hook) {
        return;
      }
      const targetDraw = typeof target === 'string' ? drawInfoMap[target]?.draw ?? null : target;
      if (!targetDraw) {
        hook.disable();
        return;
      }
      const enabled = hook.isEnable;
      if (targetDraw === hook.draw) {
        if (!enabled) {
          hook.enable();
        }
      } else if (enabled) {
        hook.disable();
      }
    });
  }, [drawInfoMap]);
  return {
    drawMap,
    drawGroupData,
    setDrawGroupData,
    activeDraw,
    activeDrawInfo,
    setActiveDraw
  };
};
exports.useDrawGroup = useDrawGroup;