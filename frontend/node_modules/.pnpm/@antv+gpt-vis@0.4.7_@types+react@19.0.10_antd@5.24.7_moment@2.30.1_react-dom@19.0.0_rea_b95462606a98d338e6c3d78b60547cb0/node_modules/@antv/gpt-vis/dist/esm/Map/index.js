import _extends from "@babel/runtime/helpers/esm/extends";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/helpers/esm/regeneratorRuntime";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import { LarkMap } from '@antv/larkmap';
import React, { useMemo } from 'react';
import { formatMapStyle } from "../utils/map";
import { MapView, Marker, Polyline } from "./Component";
var Map = function Map(props) {
  var className = props.className,
    containerStyle = props.containerStyle,
    style = props.style,
    children = props.children;
  var mapConfig = useMemo(function () {
    return formatMapStyle(props);
  }, [props]);
  var onSceneLoaded = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (props.onInitComplete) {
              props.onInitComplete();
            }
          case 1:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function onSceneLoaded() {
      return _ref.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/React.createElement(LarkMap, _extends({
    className: className,
    style: _objectSpread(_objectSpread({
      height: 300
    }, containerStyle), style)
  }, mapConfig, {
    onSceneLoaded: onSceneLoaded
  }), /*#__PURE__*/React.createElement(MapView, props), /*#__PURE__*/React.createElement(Marker, props), /*#__PURE__*/React.createElement(Polyline, props), children);
};
export default Map;