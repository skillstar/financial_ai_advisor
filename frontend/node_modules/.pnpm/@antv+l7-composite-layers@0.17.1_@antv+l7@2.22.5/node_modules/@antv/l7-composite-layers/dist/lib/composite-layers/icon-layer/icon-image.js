"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconImageLayer = void 0;
const tslib_1 = require("tslib");
const lodash_es_1 = require("lodash-es");
const composite_layer_1 = require("../../core/composite-layer");
const constants_1 = require("../../core/constants");
const constants_2 = require("./constants");
const icon_1 = require("./icon");
class IconImageLayer extends icon_1.IconLayer {
    constructor() {
        super(...arguments);
        /**
         * 复合图层类型
         */
        this.type = composite_layer_1.CompositeLayer.LayerType.IconImageLayer;
    }
    /**
     * 添加到场景
     */
    addTo(scene) {
        this.scene = scene;
        this.initAssets().then(() => {
            this.subLayers.once(constants_1.LayerGroupEvent.INITED_LAYERS, () => {
                this.emit(constants_1.CompositeLayerEvent.INITED, this);
                this.emit(constants_1.CompositeLayerEvent.ADD, this);
            });
            this.subLayers.addTo(scene);
        });
    }
    /**
     * 初始化资源
     */
    initAssets() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.loadIconAtlas();
        });
    }
    /**
     * 更新资源
     */
    updateAssets() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.loadIconAtlas();
        });
    }
    updateSubLayers(options) {
        // 资源发生更新时
        if (options.iconAtlas && !(0, lodash_es_1.isEqual)(options.iconAtlas, this.lastOptions.iconAtlas)) {
            this.updateAssets().then(() => {
                super.updateSubLayers(options);
            });
        }
        else {
            super.updateSubLayers(options);
        }
    }
    /**
     * load 图片资源
     */
    loadIconAtlas() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const iconAtlas = this.options.iconAtlas;
            const scene = this.scene;
            if (!scene)
                return;
            // 过滤已经加载到 scene 上的图标
            const images = Object.entries(iconAtlas).filter(([imageName]) => scene.hasImage(imageName) === false);
            yield Promise.all(images.map((_a) => tslib_1.__awaiter(this, [_a], void 0, function* ([imageName, imageUrl]) { return yield scene.addImage(imageName, imageUrl); })));
        });
    }
}
exports.IconImageLayer = IconImageLayer;
/**
 * 默认配置项
 */
IconImageLayer.DefaultOptions = constants_2.DEFAULT_OPTIONS;
//# sourceMappingURL=icon-image.js.map