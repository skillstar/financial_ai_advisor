import _createForOfIteratorHelper from "@babel/runtime/helpers/esm/createForOfIteratorHelper";
import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { get } from 'lodash';
var ADC_ENCODE_FIELDS = new Map([['x', 'xField'], ['y', 'yField'], ['series', 'seriesField'], ['size', 'sizeField'], ['color', 'colorField'], ['shape', 'shapeField'], ['y', 'angleField']]);

/**
 * 将 G2 encode 写法转换为 ADC Plot 字段映射
 */
function visG2Encode2ADCEncode(config) {
  var encodeConfig = config.encode;
  if (!encodeConfig) return config;
  var _config = _objectSpread({}, config);
  var _iterator = _createForOfIteratorHelper(encodeConfig),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var field = _step.value;
      var adcField = ADC_ENCODE_FIELDS.get(field);
      if (adcField) {
        // @ts-expect-error
        _config[adcField] = encodeConfig[field];
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return _config;
}

/**
 * 将缩写的 axisTitle 转换为 G2 axis 配置
 */
function axisTitle2G2axis(config) {
  var axisXTitle = config.axisXTitle,
    axisYTitle = config.axisYTitle;
  var _config = _objectSpread({
    axis: {}
  }, config);
  if (axisXTitle) {
    if (get(_config, 'axis.x')) {
      _config.axis.x.title = axisXTitle;
    } else {
      _config.axis.x = {
        title: axisXTitle
      };
    }
  }
  if (axisYTitle) {
    if (get(_config, 'axis.y')) {
      _config.axis.y.title = axisYTitle;
    } else {
      _config.axis.y = {
        title: axisYTitle
      };
    }
  }
  return _config;
}

/**
 * 将 GPT-Vis 图表的配置转换为 ADC 的配置
 */
export function transform2ADCProps(props) {
  var transformedEncode = visG2Encode2ADCEncode(props);
  var transformedAxis = axisTitle2G2axis(transformedEncode);
  return transformedAxis;
}