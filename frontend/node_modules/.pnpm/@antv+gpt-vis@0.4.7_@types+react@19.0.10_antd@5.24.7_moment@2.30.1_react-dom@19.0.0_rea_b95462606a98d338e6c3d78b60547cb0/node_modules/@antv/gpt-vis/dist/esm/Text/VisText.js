import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import { Tooltip, Typography } from 'antd';
import { pick, toString } from 'lodash';
import React from 'react';
import styled from 'styled-components';
import { useComponentGlobalConfig } from "../ConfigProvider/hooks";
import { STATICS_KEY } from "./config";
import { getThemeColor, useAntdDarkAlgorithm } from "./utils";
var Text = Typography.Text;
var StyledText = styled(Text).withConfig({
  displayName: "StyledText",
  componentId: "gpt-vis-c7ef__sc-16yhboy-0"
})(["margin-left:1px;margin-right:1px;"]);
function renderPrefixSuffix(symbol, staticsConfig, props) {
  if (!symbol) return null;
  var Component = staticsConfig === null || staticsConfig === void 0 ? void 0 : staticsConfig[symbol];
  if (Component) return /*#__PURE__*/React.createElement(Component, props);
  return symbol;
}
var VisText = function VisText(props) {
  var children = props.children,
    className = props.className,
    style = props.style,
    type = props.type,
    origin = props.origin;
  var isDark = useAntdDarkAlgorithm();
  var textConfig = useComponentGlobalConfig('VisText');
  var encoding = type ? textConfig === null || textConfig === void 0 ? void 0 : textConfig[type] : {};
  var staticsConfig = textConfig === null || textConfig === void 0 ? void 0 : textConfig[STATICS_KEY];
  return (
    /*#__PURE__*/
    // TODO  @羽熙 暂时简单处理 tooltip 直接显示 origin，后续可以根据 origin 类型分类处理
    React.createElement(Tooltip, {
      title: toString(origin)
    }, /*#__PURE__*/React.createElement(StyledText, {
      className: className,
      style: _objectSpread(_objectSpread({
        // antd Text 组件写死了 14px，在段落定义了 font-size 的情况下，显示很突兀，这里不设置，跟随上级容器字体大小改变。
        // TODO @羽熙 之后看能否通过 antd ConfigProvider 统一配置
        fontSize: 'unset',
        color: getThemeColor({
          type: type,
          color: encoding === null || encoding === void 0 ? void 0 : encoding.color,
          theme: isDark ? 'dark' : 'light'
        })
      }, style), pick(encoding, ['backgroundColor', 'fontWeight']))
    }, renderPrefixSuffix(encoding === null || encoding === void 0 ? void 0 : encoding.prefix, staticsConfig, props), children, renderPrefixSuffix(encoding === null || encoding === void 0 ? void 0 : encoding.suffix, staticsConfig, props)))
  );
};
export default VisText;