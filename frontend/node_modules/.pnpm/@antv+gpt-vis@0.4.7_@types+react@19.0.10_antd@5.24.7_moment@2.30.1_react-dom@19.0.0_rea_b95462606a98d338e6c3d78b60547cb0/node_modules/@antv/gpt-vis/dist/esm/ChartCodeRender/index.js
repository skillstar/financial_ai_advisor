import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["children", "className", "node"];
import { get } from 'lodash';
import React from 'react';
import { DEFAULT_CHART_COMPONENTS } from "../export";
import { RenderVisChart } from "./VisChart";
var RenderDefaultCode = function RenderDefaultCode(props) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  var children = props.children,
    _props$className = props.className,
    className = _props$className === void 0 ? '' : _props$className,
    node = props.node,
    rest = _objectWithoutProperties(props, _excluded);
  return /*#__PURE__*/React.createElement("code", _extends({}, rest, {
    className: className
  }), children);
};
var withCodeBlock = function withCodeBlock(options) {
  // Render code block component
  return function CodeBlock(props) {
    var _className$match;
    var children = props.children,
      _props$className2 = props.className,
      className = _props$className2 === void 0 ? '' : _props$className2;
    var content = String(children).trim();
    var isVisChart = className.includes('language-vis-chart');
    var components = options.components,
      languageRenderers = options.languageRenderers,
      DefaultRenderer = options.defaultRenderer,
      debug = options.debug,
      _options$loadingTimeo = options.loadingTimeout,
      loadingTimeout = _options$loadingTimeo === void 0 ? 5000 : _options$loadingTimeo,
      style = options.style;

    // If the code block is a VisChart, render the corresponding chart component
    if (isVisChart) {
      return /*#__PURE__*/React.createElement(RenderVisChart, {
        style: style,
        content: content,
        components: components,
        debug: debug,
        loadingTimeout: loadingTimeout
      });
    }

    // If the code block math extraRenderer  languageName, the corresponding extra languageRenderers component
    var languageName = ((_className$match = className.match(/language-(.*)/)) === null || _className$match === void 0 ? void 0 : _className$match[1]) || '';
    var extraLanguageRenderers = languageRenderers;
    var ExtraRendererComponent = extraLanguageRenderers && extraLanguageRenderers[languageName];
    if (ExtraRendererComponent) {
      return /*#__PURE__*/React.createElement(ExtraRendererComponent, props);
    }

    // If the code block is not a VisChart, render plain code
    return DefaultRenderer ? /*#__PURE__*/React.createElement(DefaultRenderer, props) : /*#__PURE__*/React.createElement(RenderDefaultCode, props);
  };
};

// Create a higher-order component (HOC) with chart code
export var withChartCode = function withChartCode(options) {
  return withCodeBlock(options);
};

/**
 * Includes built-in chart components such as line charts, pie charts, etc.
 * @param componentsArray
 * @returns
 */
export var withDefaultChartCode = function withDefaultChartCode(options) {
  return withChartCode(_objectSpread(_objectSpread({}, options), {}, {
    components: _objectSpread(_objectSpread({}, DEFAULT_CHART_COMPONENTS), get(options, 'components', {}))
  }));
};