function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["onCreated", "source"],
  _excluded2 = ["data"],
  _excluded3 = ["data"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { useUpdateEffect } from 'ahooks';
import { cloneDeep, isEqual } from 'lodash-es';
import { useEffect, useRef } from 'react';
import { useLayerManager } from "../../../LarkMap/hooks";

/**
 * LayerCtor 图层类 构造函数
 */

/**
 * LayerOptions 图层基础配置
 */

export var useCreateLayer = function useCreateLayer(Ctor, config) {
  var onCreated = config.onCreated,
    source = config.source,
    options = _objectWithoutProperties(config, _excluded);
  var layerManager = useLayerManager();
  var layerRef = useRef();
  var layerOptionsRef = useRef(options);
  var layerSourceRef = useRef(source);

  // 创建图层
  // 添加到 layerManager 自动加载到 scene
  if (!layerRef.current) {
    layerRef.current = new Ctor(config);

    // 图层初始化完成事件
    if (onCreated) {
      layerRef.current.once('inited', function () {
        return onCreated(layerRef.current);
      });
    }
    layerManager.addLayer(layerRef.current);
  }

  // options 更新时
  useUpdateEffect(function () {
    if (layerRef.current) {
      var changeOption = !isEqual(layerOptionsRef.current, options);
      if (changeOption) {
        layerRef.current.update(options);
        layerOptionsRef.current = cloneDeep(options);
      }
    }
  }, [options]);

  // source 更新时
  useUpdateEffect(function () {
    if (layerRef.current) {
      var data = source.data,
        restOptions = _objectWithoutProperties(source, _excluded2);
      var _layerSourceRef$curre = layerSourceRef.current,
        currentData = _layerSourceRef$curre.data,
        restCurrentOptions = _objectWithoutProperties(_layerSourceRef$curre, _excluded3);
      var changeSource = data !== currentData || !isEqual(restOptions, restCurrentOptions);
      if (changeSource) {
        layerRef.current.changeData(source);
        layerSourceRef.current = _objectSpread({}, source);
      }
    }
  }, [source]);

  // 组件销毁时
  useEffect(function () {
    return function () {
      if (layerRef.current) {
        layerManager.removeLayer(layerRef.current);
        layerRef.current = null;
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return layerRef;
};