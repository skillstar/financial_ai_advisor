function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { MouseLocation as L7MouseLocation } from '@antv/l7';
import { omitBy } from 'lodash-es';
import { useEffect, useMemo, useState } from 'react';
import { getStyleText } from "../../../utils";
import { useScene } from "../../LarkMap/hooks";
import { useL7ComponentEvent, useL7ComponentUpdate } from "../hooks";
export var MouseLocationControl = function MouseLocationControl(_ref) {
  var position = _ref.position,
    className = _ref.className,
    style = _ref.style,
    onLocationChange = _ref.onLocationChange,
    transform = _ref.transform,
    onAdd = _ref.onAdd,
    onRemove = _ref.onRemove,
    onShow = _ref.onShow,
    onHide = _ref.onHide;
  var scene = useScene();
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    control = _useState2[0],
    setControl = _useState2[1];
  var styleText = useMemo(function () {
    return getStyleText(style);
  }, [style]);
  var controlOptions = useMemo(function () {
    return {
      transform: transform,
      position: position,
      className: className,
      style: styleText
    };
  }, [transform, position, className, styleText]);
  useEffect(function () {
    var mouseLocation = new L7MouseLocation(omitBy(controlOptions, function (value) {
      return value === undefined;
    }));
    setControl(mouseLocation);
    scene.addControl(mouseLocation);
    return function () {
      scene.removeControl(mouseLocation);
      setControl(undefined);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  useL7ComponentUpdate(control, controlOptions);
  useL7ComponentEvent(control, {
    add: onAdd,
    remove: onRemove,
    show: onShow,
    hide: onHide,
    locationChange: onLocationChange
  });
  return null;
};