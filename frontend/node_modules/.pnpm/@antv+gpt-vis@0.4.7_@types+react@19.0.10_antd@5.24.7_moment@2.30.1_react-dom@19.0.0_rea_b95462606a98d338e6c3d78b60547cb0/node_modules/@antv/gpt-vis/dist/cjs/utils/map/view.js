var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/map/view.ts
var view_exports = {};
__export(view_exports, {
  fitBounds: () => fitBounds,
  setMapStatus: () => setMapStatus,
  setMapView: () => setMapView
});
module.exports = __toCommonJS(view_exports);
function fitIncludePoints(includePoints, scene, includePadding) {
  if (includePoints.length === 1) {
    scene.setCenter([includePoints[0].longitude, includePoints[0].latitude]);
  } else {
    const bounds = [180, 90, -180, -90];
    includePoints.forEach((point) => {
      if (bounds[0] > point.longitude) {
        bounds[0] = point.longitude;
      }
      if (bounds[1] > point.latitude) {
        bounds[1] = point.latitude;
      }
      if (bounds[2] < point.longitude) {
        bounds[2] = point.longitude;
      }
      if (bounds[3] < point.latitude) {
        bounds[3] = point.latitude;
      }
    });
    const { left = 20, right = 20, bottom = 20, top = 20 } = includePadding || {};
    const padding = [left, top, right, bottom];
    scene.map.setBounds(bounds, false, padding);
  }
}
var setMapView = (props, scene) => {
  fitBounds(props, scene);
  setMapStatus(props, scene);
};
var fitBounds = (props, scene) => {
  var _a;
  if ((_a = props.includePoints) == null ? void 0 : _a.length) {
    fitIncludePoints(props.includePoints, scene, props.includePadding);
  } else {
    const points = [];
    if (props.markers) {
      props.markers.forEach((item) => {
        points.push({ longitude: item.longitude, latitude: item.latitude });
      });
    }
    if (props.polyline) {
      props.polyline.forEach((item) => {
        item.points.forEach((point) => {
          points.push({ longitude: point.longitude, latitude: point.latitude });
        });
      });
    }
    if (points.length) {
      fitIncludePoints(points, scene, props.includePadding);
    }
  }
};
var setMapStatus = (props, scene) => {
  if (props.enableZoom !== void 0) {
    scene.setMapStatus({
      zoomEnable: props.enableZoom
    });
  }
  if (props.enableRotate !== void 0) {
    scene.setMapStatus({
      rotateEnable: props.enableRotate
    });
  }
  if (props.enableScroll !== void 0) {
    scene.setMapStatus({
      dragEnable: props.enableScroll
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fitBounds,
  setMapStatus,
  setMapView
});
