"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LayerSwitchControl = void 0;
var _l = require("@antv/l7");
var _lodash = require("lodash");
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../../utils");
var _hooks = require("../../LarkMap/hooks");
var _hooks2 = require("../hooks");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const LayerSwitchControl = ({
  layers: layerItems,
  popperPlacement,
  popperTrigger,
  popperClassName,
  btnIcon,
  btnText,
  title,
  vertical,
  position,
  className,
  style,
  multiple,
  onAdd,
  onRemove,
  onShow,
  onHide,
  onPopperShow,
  onPopperHide,
  onSelectChange
}) => {
  const scene = (0, _hooks.useScene)();
  const fullLayerList = (0, _hooks.useLayerList)();
  const [control, setControl] = (0, _react.useState)();
  const styleText = (0, _react.useMemo)(() => (0, _utils.getStyleText)(style), [style]);
  const {
    portal: btnIconPortal,
    dom: btnIconDOM
  } = (0, _hooks2.useL7ComponentPortal)(btnIcon);
  const layers = (0, _react.useMemo)(() => {
    return layerItems?.length ? layerItems.map(layerItem => {
      if (typeof layerItem === 'string') {
        return fullLayerList.find(layer => layer.id === layerItem);
      }
      // 当 layerItem 为 LayerSwitchItem 类型
      if (!Object.prototype.hasOwnProperty.call(layerItem, 'isComposite')) {
        const {
          layer
        } = layerItem;
        if (typeof layer === 'string') {
          const targetLayer = fullLayerList.find(item => item.id === layer);
          return targetLayer ? {
            ...layerItem,
            layer: targetLayer
          } : undefined;
        }
        return layerItem;
      }
      return layerItem;
    }).filter(layer => !!layer) : fullLayerList;
  }, [layerItems, fullLayerList]);
  const controlOptions = (0, _react.useMemo)(() => {
    return {
      layers,
      popperPlacement,
      popperTrigger,
      popperClassName,
      btnText,
      title,
      vertical,
      position,
      className,
      multiple,
      style: styleText,
      btnIcon: btnIconDOM
    };
  }, [layers, popperPlacement, popperTrigger, popperClassName, btnText, title, vertical, position, className, multiple, styleText, btnIconDOM]);
  (0, _react.useEffect)(() => {
    const layerSwitch = new _l.LayerSwitch((0, _lodash.omitBy)(controlOptions, value => value === undefined));
    setControl(layerSwitch);
    scene.addControl(layerSwitch);
    return () => {
      scene.removeControl(layerSwitch);
      setControl(undefined);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  (0, _hooks2.useL7ComponentUpdate)(control, controlOptions);
  (0, _hooks2.useL7ComponentEvent)(control, {
    add: onAdd,
    remove: onRemove,
    show: onShow,
    hide: onHide,
    popperShow: onPopperShow,
    popperHide: onPopperHide,
    selectChange: onSelectChange
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, btnIconPortal);
};
exports.LayerSwitchControl = LayerSwitchControl;