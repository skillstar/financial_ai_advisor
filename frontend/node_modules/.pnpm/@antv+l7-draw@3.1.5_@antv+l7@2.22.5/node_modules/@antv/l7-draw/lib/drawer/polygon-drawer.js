"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PolygonDrawer = void 0;
var _turf = require("@turf/turf");
var _lodash = require("lodash");
var _constant = require("../constant");
var _mode = require("../mode");
var _utils = require("../utils");
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function (e, t, r) { var p = _superPropBase(e, t); if (p) { var n = Object.getOwnPropertyDescriptor(p, t); return n.get ? n.get.call(arguments.length < 3 ? e : r) : n.value; } }, _get.apply(null, arguments); }
function _superPropBase(t, o) { for (; !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));); return t; }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var PolygonDrawer = exports.PolygonDrawer = /*#__PURE__*/function (_PolygonMode) {
  function PolygonDrawer(scene, options) {
    var _this;
    _classCallCheck(this, PolygonDrawer);
    _this = _callSuper(this, PolygonDrawer, [scene, options]);
    _this.drawPolygonFinish = function () {
      var _drawPolygon$properti;
      var drawPolygon = _this.drawPolygon;
      var nodes = (_drawPolygon$properti = drawPolygon === null || drawPolygon === void 0 ? void 0 : drawPolygon.properties.nodes) !== null && _drawPolygon$properti !== void 0 ? _drawPolygon$properti : [];
      if (!drawPolygon || nodes.length < 3) {
        return;
      }
      drawPolygon.properties.isDraw = false;
      _this.syncPolygonNodes(drawPolygon, nodes);
      _this.setActivePolygon(drawPolygon);
      var _this$options = _this.options,
        autoActive = _this$options.autoActive,
        editable = _this$options.editable;
      if (!autoActive || !editable) {
        _this.handlePolygonUnClick(drawPolygon);
      }
      if (editable) {
        _this.setHelper(autoActive ? 'pointHover' : 'polygonHover');
      } else {
        _this.setHelper(_this.addable ? 'draw' : null);
      }
      _this.emit(_constant.DrawEvent.Add, drawPolygon, _this.getPolygonData());
    };
    _this.sceneRender.on(_constant.RenderEvent.DblClick, _this.drawPolygonFinish);
    _this.bindPointRenderEvent();
    _this.bindSceneEvent();
    _this.bindMidPointRenderEvent();
    _this.bindLineRenderEvent();
    _this.bindPolygonRenderEvent();
    return _this;
  }
  _inherits(PolygonDrawer, _PolygonMode);
  return _createClass(PolygonDrawer, [{
    key: "getDefaultOptions",
    value: function getDefaultOptions(options) {
      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(PolygonDrawer.prototype), "getDefaultOptions", this).call(this, options)), {}, {
        liveUpdate: false
      });
    }
  }, {
    key: "setData",
    value: function setData(data) {
      var polygonFeatures = (0, _utils.splitMultiFeatures)(data).map(function (polygon) {
        var _polygon$properties, _polygon$properties$n;
        polygon.properties = _objectSpread(_objectSpread({}, (0, _utils.getDefaultPolygonProperties)()), (_polygon$properties = polygon.properties) !== null && _polygon$properties !== void 0 ? _polygon$properties : {});
        if (!((_polygon$properties$n = polygon.properties.nodes) === null || _polygon$properties$n === void 0 ? void 0 : _polygon$properties$n.length)) {
          var positions = (0, _turf.coordAll)(polygon);
          positions = positions.slice(0, positions.length - 1);
          polygon.properties.nodes = positions.map(function (position) {
            return (0, _utils.createPointFeature)(position);
          });
        }
        if (!polygon.properties.line) {
          var nodes = polygon.properties.nodes;
          polygon.properties.line = (0, _utils.createLineFeature)([].concat(_toConsumableArray(nodes), [(0, _utils.createPointFeature)((0, _lodash.first)(nodes).geometry.coordinates)]));
        }
        return polygon;
      });
      this.source.setData({
        point: [],
        midPoint: [],
        dashLine: [],
        polygon: polygonFeatures,
        line: polygonFeatures.map(function (feature) {
          return feature.properties.line;
        })
      });
      this.setTextData(this.getAllTexts());
      if (this.editPolygon) {
        this.setActivePolygon(this.editPolygon);
      }
    }
  }, {
    key: "onPointCreate",
    value: function onPointCreate(e) {
      if (!this.addable || this.dragPoint) {
        return;
      }
      var feature = _get(_getPrototypeOf(PolygonDrawer.prototype), "onPointCreate", this).call(this, e);
      var drawPolygon = this.drawPolygon;
      var drawLine = this.drawLine;
      if (feature) {
        if (drawPolygon) {
          this.syncPolygonNodes(drawPolygon, [].concat(_toConsumableArray(drawPolygon.properties.nodes), [feature]));
          this.setDashLineData([(0, _utils.createDashLine)([(0, _utils.getPosition)(e), drawPolygon.properties.nodes[0].geometry.coordinates])]);
          var nodeLength = drawPolygon.properties.nodes.length;
          if (nodeLength > 1) {
            this.setHelper('drawFinish');
          }
        } else if (drawLine) {
          this.handleCreatePolygon([feature], drawLine);
          this.setHelper('drawContinue');
        }
        this.emit(_constant.DrawEvent.AddNode, feature, drawPolygon, this.getPolygonData());
      }
      return feature;
    }
  }, {
    key: "onPointClick",
    value: function onPointClick(e) {
      var _this2 = this;
      var drawPolygon = this.drawPolygon;
      var feature = e.feature;
      if (!drawPolygon) {
        return;
      }
      var nodes = drawPolygon.properties.nodes;
      if (nodes.length >= 3 && ((0, _utils.isSameFeature)((0, _lodash.first)(nodes), feature) || (0, _utils.isSameFeature)((0, _lodash.last)(nodes), feature))) {
        requestAnimationFrame(function () {
          _this2.drawPolygonFinish();
        });
      } else {
        var _feature$geometry$coo = _slicedToArray(feature.geometry.coordinates, 2),
          lng = _feature$geometry$coo[0],
          lat = _feature$geometry$coo[1];
        e.lngLat = {
          lng: lng,
          lat: lat
        };
        this.onPointCreate(e);
      }
    }
  }, {
    key: "onPointDragging",
    value: function onPointDragging(e) {
      var feature = this.dragPoint;
      var editPolygon = this.editPolygon;
      if (feature && editPolygon) {
        var line = editPolygon.properties.line;
        line.properties.nodes = line.properties.nodes.map(function (node) {
          return (0, _utils.isSameFeature)(node, feature) ? feature : node;
        });
        var lineNodes = line.properties.nodes;
        var nodes = lineNodes.slice(0, lineNodes.length - 1);
        var firstLineNode = (0, _lodash.first)(lineNodes);
        var lastLineNode = (0, _lodash.last)(lineNodes);
        var isSame = (0, _utils.isSameFeature)(firstLineNode, feature) || (0, _utils.isSameFeature)(lastLineNode, feature);
        if (isSame) {
          firstLineNode.geometry.coordinates = lastLineNode.geometry.coordinates = (0, _utils.getPosition)(e);
        }
        if (this.options.adsorbOptions && isSame) {
          var adsorbPosition = this.resetAdsorbLngLat(e);
          if (adsorbPosition) {
            firstLineNode.geometry.coordinates = lastLineNode.geometry.coordinates = adsorbPosition;
          }
        }
        _get(_getPrototypeOf(PolygonDrawer.prototype), "onPointDragging", this).call(this, e);
        this.syncPolygonNodes(editPolygon, nodes);
        this.setActivePolygon(editPolygon);
      }
      return feature;
    }
  }, {
    key: "onLineDragging",
    value: function onLineDragging(e) {
      var dragPolygon = this.dragPolygon;
      var feature = _get(_getPrototypeOf(PolygonDrawer.prototype), "onLineDragging", this).call(this, e);
      if (feature && dragPolygon) {
        var lineNodes = feature.properties.nodes;
        this.syncPolygonNodes(dragPolygon, lineNodes.slice(0, lineNodes.length - 1));
        this.emit(_constant.DrawEvent.Dragging, dragPolygon, this.getPolygonData());
      }
      return feature;
    }
  }, {
    key: "onMidPointClick",
    value: function onMidPointClick(e) {
      var feature = _get(_getPrototypeOf(PolygonDrawer.prototype), "onMidPointClick", this).call(this, e);
      var editPolygon = this.editPolygon;
      if (feature && editPolygon) {
        this.emit(_constant.DrawEvent.Edit, editPolygon, this.getPolygonData());
        this.emit(_constant.DrawEvent.AddNode, feature, editPolygon, this.getPolygonData());
      }
      return feature;
    }
  }, {
    key: "onSceneMouseMove",
    value: function onSceneMouseMove(e) {
      var _drawPolygon$properti2;
      var drawPolygon = this.drawPolygon;
      var nodes = (_drawPolygon$properti2 = drawPolygon === null || drawPolygon === void 0 ? void 0 : drawPolygon.properties.nodes) !== null && _drawPolygon$properti2 !== void 0 ? _drawPolygon$properti2 : [];
      if (!drawPolygon || !nodes.length) {
        return;
      }
      if (this.options.adsorbOptions) {
        this.resetAdsorbLngLat(e);
      }
      var mousePosition = (0, _utils.getPosition)(e);
      var dashLineData = [];
      dashLineData.push((0, _utils.createDashLine)([mousePosition, (0, _lodash.first)(nodes).geometry.coordinates]));
      if (nodes.length > 1) {
        dashLineData.push((0, _utils.createDashLine)([mousePosition, (0, _lodash.last)(nodes).geometry.coordinates]));
      }
      if (this.options.liveUpdate && nodes.length >= 2) {
        var nodePositions = (0, _turf.coordAll)((0, _turf.featureCollection)(nodes));
        drawPolygon.geometry.coordinates = [[].concat(_toConsumableArray(nodePositions), [mousePosition, nodePositions[0]])];
        this.setPolygonData(this.getPolygonData());
      }
      this.setDashLineData(dashLineData);
      this.setTextData(this.getAllTexts());
    }
  }, {
    key: "onSceneDragEnd",
    value: function onSceneDragEnd(e) {
      if (!this.isDragTrigger || !this.addable || !this.drawLine) {
        return;
      }
      this.drawPolygonFinish();
    }
  }, {
    key: "removeNode",
    value: function removeNode(node, feature) {
      var _targetFeature$proper;
      var targetFeature = this.getTargetFeature(feature);
      var targetNode = this.getTargetFeature(node, (_targetFeature$proper = targetFeature === null || targetFeature === void 0 ? void 0 : targetFeature.properties.nodes) !== null && _targetFeature$proper !== void 0 ? _targetFeature$proper : []);
      if (targetFeature && targetNode) {
        var _targetFeature$proper2;
        var nodes = (_targetFeature$proper2 = targetFeature === null || targetFeature === void 0 ? void 0 : targetFeature.properties.nodes) !== null && _targetFeature$proper2 !== void 0 ? _targetFeature$proper2 : [];
        if (nodes.length < 4) {
          return;
        }
        this.syncPolygonNodes(targetFeature, nodes.filter(function (node) {
          return !(0, _utils.isSameFeature)(targetNode, node);
        }));
        this.emit(_constant.DrawEvent.RemoveNode, targetNode, targetFeature, this.getLineData());
        this.emit(_constant.DrawEvent.Edit, targetFeature, this.getPolygonData());
      }
    }
  }, {
    key: "onPointContextMenu",
    value: function onPointContextMenu(e) {
      var _editPolygon$properti;
      var editPolygon = this.editPolygon;
      var deleteNode = e.feature;
      var nodes = (_editPolygon$properti = editPolygon === null || editPolygon === void 0 ? void 0 : editPolygon.properties.nodes) !== null && _editPolygon$properti !== void 0 ? _editPolygon$properti : [];
      if (!editPolygon || nodes.length < 4) {
        return;
      }
      if (!nodes.find(function (node) {
        return (0, _utils.isSameFeature)(node, deleteNode);
      })) {
        deleteNode = nodes[0];
      }
      this.removeNode(deleteNode, editPolygon);
      return deleteNode;
    }
  }, {
    key: "bindPointRenderEvent",
    value: function bindPointRenderEvent() {
      var _this$pointRender;
      _get(_getPrototypeOf(PolygonDrawer.prototype), "bindPointRenderEvent", this).call(this);
      (_this$pointRender = this.pointRender) === null || _this$pointRender === void 0 ? void 0 : _this$pointRender.on(_constant.RenderEvent.Contextmenu, this.onPointContextMenu.bind(this));
    }
  }, {
    key: "enablePointRenderAction",
    value: function enablePointRenderAction() {
      _get(_getPrototypeOf(PolygonDrawer.prototype), "enablePointRenderAction", this).call(this);
      if (this.options.editable) {
        var _this$pointRender2;
        (_this$pointRender2 = this.pointRender) === null || _this$pointRender2 === void 0 ? void 0 : _this$pointRender2.enableContextMenu();
      }
    }
  }, {
    key: "disablePointRenderAction",
    value: function disablePointRenderAction() {
      var _this$pointRender3;
      _get(_getPrototypeOf(PolygonDrawer.prototype), "disablePointRenderAction", this).call(this);
      (_this$pointRender3 = this.pointRender) === null || _this$pointRender3 === void 0 ? void 0 : _this$pointRender3.disableContextMenu();
    }
  }]);
}(_mode.PolygonMode);