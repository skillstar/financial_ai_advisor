"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompositeLayer = void 0;
const tslib_1 = require("tslib");
const event_emitter_1 = tslib_1.__importDefault(require("@antv/event-emitter"));
const l7_1 = require("@antv/l7");
const util_1 = require("@antv/util");
const types_1 = require("../types");
const utils_1 = require("../utils");
const constants_1 = require("./constants");
const layer_group_1 = require("./layer-group");
class CompositeLayer extends event_emitter_1.default {
    constructor(options) {
        super();
        /**
         * 是否是复合图层
         */
        this.isComposite = true;
        const { id, name } = options;
        this.id = id ? id : (0, util_1.uniqueId)('composite-layer');
        this.name = name ? name : this.id;
        this.options = (0, utils_1.deepMergeLayerOptions)(this.getDefaultOptions(), options);
        this.lastOptions = this.options;
        this.source = this.createSource();
        const layers = this.createSubLayers();
        this.subLayers = new layer_group_1.LayerGroup(layers);
        this.emit(constants_1.CompositeLayerEvent.CREATED, this);
    }
    /**
     * 获取默认配置
     */
    getDefaultOptions() {
        return CompositeLayer.DefaultOptions;
    }
    /**
     * 创建图层间共享 source 方法
     */
    createSource() {
        const sourceOptions = this.options.source;
        const { data } = sourceOptions, sourceCFG = tslib_1.__rest(sourceOptions, ["data"]);
        const source = this.isSourceInstance(sourceOptions) ? sourceOptions : new l7_1.Source(data, sourceCFG);
        return source;
    }
    /**
     * 判断 source 是否是实例工具方法
     */
    isSourceInstance(source) {
        if (source instanceof l7_1.Source) {
            return true;
        }
        return false;
    }
    /**
     * 设置子图层数据
     *支持 source 配置项与 source 实例更新
     */
    setSubLayersSource(source) {
        this.layer.changeData(source);
    }
    /**
     * 初始化子图层相关事件绑定
     */
    initSubLayersEvent() {
        //
    }
    /**
     * 添加到场景
     */
    addTo(scene) {
        this.scene = scene;
        this.subLayers.once(constants_1.LayerGroupEvent.INITED_LAYERS, () => {
            this.emit(constants_1.CompositeLayerEvent.INITED, this);
            this.emit(constants_1.CompositeLayerEvent.ADD, this);
        });
        this.subLayers.addTo(scene);
    }
    /**
     * 从场景移除
     */
    remove() {
        if (!this.scene)
            return;
        this.subLayers.remove();
        this.emit(constants_1.CompositeLayerEvent.REMOVE);
    }
    /**
     * 更新
     */
    update(options, autoRender = true) {
        var _a, _b;
        this.updateOption(options);
        // 停止渲染，避免属性更新与数据更新造成多次内部调用 scene render => renderLayers
        if (autoRender) {
            (_a = this.scene) === null || _a === void 0 ? void 0 : _a.setEnableRender(false);
        }
        // 数据更新
        if (options.source && (0, utils_1.isSourceChanged)(options.source, this.lastOptions.source)) {
            this.changeData(options.source);
        }
        // 图层更新
        this.updateSubLayers(options);
        if (autoRender) {
            (_b = this.scene) === null || _b === void 0 ? void 0 : _b.setEnableRender(true);
            this.render();
        }
    }
    /**
     * 更新: 更新配置
     */
    updateOption(options) {
        this.lastOptions = this.options;
        this.options = (0, utils_1.deepMergeLayerOptions)(this.options, options);
    }
    render() {
        if (this.scene) {
            this.scene.render();
        }
    }
    /**
     * 更新数据
     */
    changeData(source) {
        this.setSubLayersSource(source);
    }
    /**
     * 设置图层 zIndex
     */
    setIndex(zIndex) {
        this.subLayers.setZIndex(zIndex);
    }
    /**
     * 设置图层 blend
     */
    setBlend(blend) {
        this.layer.setBlend(blend);
    }
    /**
     * 设置图层 minZoom
     */
    setMinZoom(minZoom) {
        this.subLayers.getLayers().forEach((layer) => {
            layer.setMinZoom(minZoom);
        });
    }
    /**
     * 设置图层 maxZoom
     */
    setMaxZoom(maxZoom) {
        this.subLayers.getLayers().forEach((layer) => {
            layer.setMaxZoom(maxZoom);
        });
    }
    /**
     * 显示图层
     */
    show() {
        if (!this.layer.inited)
            return;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        this.update({ visible: true });
    }
    /**
     * 隐藏图层
     */
    hide() {
        if (!this.layer.inited)
            return;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        this.update({ visible: false });
    }
    /**
     * 切换图层显隐状态
     */
    toggleVisible() {
        this.isVisible() ? this.hide() : this.show();
    }
    /**
     * 图层是否可见
     */
    isVisible() {
        return this.layer.inited ? this.layer.isVisible() : (0, util_1.isUndefined)(this.options.visible) ? true : this.options.visible;
    }
    /**
     * 图层框选数据
     */
    boxSelect(bounds, callback) {
        this.layer.boxSelect(bounds, callback);
    }
    /**
     * 定位到当前图层数据范围
     */
    fitBounds(fitBoundsOptions) {
        this.layer.fitBounds(fitBoundsOptions);
    }
    /**
     * 获取图例
     */
    getLegend(name) {
        return this.layer.getLegend(name);
    }
    /**
     * 获取图例数据
     */
    getLegendItems(type) {
        return this.layer.getLegendItems(type);
    }
    /**
     * 获取颜色图例数据
     */
    getColorLegendItems() {
        const colorLegendItems = this.layer.getLegendItems('color');
        if (Array.isArray(colorLegendItems) && colorLegendItems.length !== 0) {
            const items = colorLegendItems;
            return items;
        }
        return [];
    }
    /**
     * 获取带有交互的子图层
     * 一般用于是否启用 tooltip，图层事件绑定
     */
    getInteractionSubLayers() {
        const layers = this.subLayers.getLayers().filter((layer) => layer.interaction === true);
        return layers;
    }
    /**
     * 摧毁
     */
    destroy() {
        this.subLayers.destroy();
    }
    /**
     * 事件代理: 绑定事件
     */
    on(name, callback, once) {
        if (constants_1.OriginLayerEventList.indexOf(name) !== -1) {
            this.layer.on(name, callback);
        }
        else {
            super.on(name, callback, once);
        }
        return this;
    }
    /**
     * 事件代理: 绑定一次事件
     */
    once(name, callback) {
        if (constants_1.OriginLayerEventList.indexOf(name) !== -1) {
            this.layer.once(name, callback);
        }
        else {
            super.once(name, callback);
        }
        return this;
    }
    /**
     * 事件代理: 解绑事件
     */
    off(name, callback) {
        if (constants_1.OriginLayerEventList.indexOf(name) !== -1) {
            this.layer.off(name, callback);
        }
        else {
            super.off(name, callback);
        }
        return this;
    }
}
exports.CompositeLayer = CompositeLayer;
/**
 * 复合图层类型
 */
CompositeLayer.LayerType = types_1.CompositeLayerType;
/**
 * 默认的 options 配置项
 */
CompositeLayer.DefaultOptions = {};
//# sourceMappingURL=composite-layer.js.map